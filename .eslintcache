[{"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/index.tsx":"1","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/constants.ts":"2","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/auth_utils.ts":"3","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/app.tsx":"4","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/axios_interceptor.ts":"5","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/init.ts":"6","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/router_utils.ts":"7","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/interfaces.ts":"8","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/general_utils.ts":"9","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/identity_slice.ts":"10","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/helpers.ts":"11","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/authentication_api.ts":"12","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/game_quiz_dialog/game_quiz_dialog.tsx":"13","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/initialize/initialize.tsx":"14","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/file_reader_utils.ts":"15","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/device_key_manager/device_key_manager.ts":"16","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/index.ts":"17","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/interfaces.ts":"18","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/helpers.ts":"19","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/interfaces.ts":"20","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/routes/index.ts":"21","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/index.ts":"22","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/assets/themes/index.tsx":"23","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/ui_slice.ts":"24","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/game_quiz_dialog/helper.ts":"25","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/game_quiz_dialog/styles.ts":"26","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_init_pubnub_events.ts":"27","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/helpers.ts":"28","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/initialize/use_folder_counters.tsx":"29","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/initialize/use_browser_notifications_prompt.tsx":"30","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/index.ts":"31","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/store.ts":"32","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/device_key_manager/interfaces.ts":"33","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/device_helpers.ts":"34","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/messaging_slice.ts":"35","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/interfaces.ts":"36","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/routes/routes.tsx":"37","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/game_api.ts":"38","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/form_dialog/index.ts":"39","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/full_image_dialog.tsx":"40","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/keystore_api.ts":"41","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/pubnub/notification_events.ts":"42","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/consent_api.ts":"43","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/full_image_handler.tsx":"44","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/interfaces.ts":"45","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/channel_helpers.ts":"46","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/assets/themes/main_theme.tsx":"47","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/index.tsx":"48","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/counters_slice.ts":"49","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/channels_slice/channels_slice.ts":"50","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/device_key_manager/helpers.ts":"51","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/counter_helpers.tsx":"52","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/use_user_authentication.ts":"53","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/index.ts":"54","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/block_users_api.ts":"55","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/index.ts":"56","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/index.ts":"57","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/meeting_utils.ts":"58","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/styles.ts":"59","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/notification_handlers.ts":"60","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/image_slice.ts":"61","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/index.ts":"62","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/interfaces.ts":"63","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/channels_api.ts":"64","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/form_dialog/form_dialog.tsx":"65","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/channels_slice/helpers.ts":"66","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/avatar_api.ts":"67","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/selectors.ts":"68","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/get_app_icon.tsx":"69","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/right_arrow.tsx":"70","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/ellipsis_icon.tsx":"71","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/settings_icon.tsx":"72","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/route_slice/index.ts":"73","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/interfaces.ts":"74","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/dexie_index_db_helpers.ts":"75","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/dexie_index_db.ts":"76","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/attestations_api.ts":"77","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/messages_utils.ts":"78","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/user_helpers.ts":"79","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/index.ts":"80","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/meetings_slice.ts":"81","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/identities_slice.ts":"82","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/form_helpers.ts":"83","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/index.ts":"84","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/delay.ts":"85","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/contact_helpers.ts":"86","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/messaging_api.ts":"87","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/identity_api.ts":"88","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/identities_api.ts":"89","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/contacts_api.ts":"90","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/index.ts":"91","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/notification_utils.ts":"92","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/browser_notifications_store.ts":"93","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/helpers.ts":"94","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/form_dialog/styles.ts":"95","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/route_slice/route_slice.ts":"96","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/messages_slice.ts":"97","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/file_service_api.ts":"98","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/identities_selectors.ts":"99","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/interfaces.ts":"100","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/helpers.ts":"101","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/contacts_slice.ts":"102","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/meetings.tsx":"103","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/notify_browser_notifications_disabled_thunk.ts":"104","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/notify_browser_notifications_enabled_thunk.ts":"105","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/page_not_found.tsx":"106","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/profile_not_found.tsx":"107","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/reducer_builder.ts":"108","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/helpers.tsx":"109","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/image_media_helpers.ts":"110","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/loading_splash_screen.tsx":"111","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/globalid_loader.tsx":"112","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/interfaces.ts":"113","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/styles.ts":"114","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/theme.tsx":"115","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_handler.tsx":"116","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/no_meeting_redirect.tsx":"117","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/interfaces.ts":"118","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/styles.ts":"119","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/interfaces.ts":"120","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/index.ts":"121","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/notifications.tsx":"122","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/providers/error_provider.tsx":"123","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/providers/navigation_provider.tsx":"124","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/providers/app_state_provider.tsx":"125","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/chat_beginning_card.tsx":"126","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/deleted_message_card.tsx":"127","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/system_message_card.tsx":"128","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/text_message_card.tsx":"129","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/enums/index.ts":"130","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/overlay/index.ts":"131","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/index.tsx":"132","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/styles.ts":"133","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/info_message_card.tsx":"134","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/message_grouping_hooks.tsx":"135","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/message_context_controller.tsx":"136","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/timestamp_tooltip.tsx":"137","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/overlay/overlay.tsx":"138","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/use_message_state.tsx":"139","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/assets/styles.ts":"140","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/meeting/index.tsx":"141","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/index.ts":"142","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/index.ts":"143","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/index.ts":"144","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/trash_icon.tsx":"145","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/meeting/meeting.tsx":"146","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/options_icon.tsx":"147","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/interfaces.ts":"148","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/styles.ts":"149","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/index.ts":"150","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/skeleton.tsx":"151","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/skeleton_provider.tsx":"152","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/index.ts":"153","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/meeting/meeting.styled.ts":"154","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/device_permission_prompt.tsx":"155","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/hooks/use_meeting_end_redirect.tsx":"156","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/navigation/navigation_control.tsx":"157","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/message_divider.tsx":"158","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/styles.ts":"159","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/index.ts":"160","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/button_group/index.ts":"161","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/index.ts":"162","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/transition/index.ts":"163","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/index.ts":"164","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/index.ts":"165","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/delete_message_dialog.tsx":"166","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/quick_menu.tsx":"167","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/logout_icon.tsx":"168","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/list_icon.tsx":"169","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/issue_verification_icon.tsx":"170","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/my_membership_icon.tsx":"171","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/hidden_icon.tsx":"172","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/log_out_2_icon.tsx":"173","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/edit_icon.tsx":"174","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/pending_icon.tsx":"175","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/send_message_icon.tsx":"176","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/x_circle_icon.tsx":"177","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/user_plus_icon.tsx":"178","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/user_minus_icon.tsx":"179","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/single_user_icon.tsx":"180","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/send_icon.tsx":"181","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/dollar_sign_icon.tsx":"182","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/corner_up_left_icon.tsx":"183","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/checkbox_on_icon.tsx":"184","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/checkbox_off_icon.tsx":"185","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/check_circle_icon.tsx":"186","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/award_icon.tsx":"187","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/groups_slice.ts":"188","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/pubnub/interfaces.ts":"189","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/pubnub/notifications.ts":"190","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/messaging_selectors.ts":"191","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_controls/index.tsx":"192","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_details/index.tsx":"193","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/alert_triangle_icon.tsx":"194","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/people_icon.tsx":"195","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/wallet_icon.tsx":"196","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/groups_icon.tsx":"197","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/messages_icon.tsx":"198","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/profile_icon.tsx":"199","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/more_icon.tsx":"200","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/auth.tsx":"201","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/hooks/use_device_permission_status.tsx":"202","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_roster.tsx":"203","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/styles.ts":"204","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/button_group/button_group.tsx":"205","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/styles.ts":"206","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/transition/transitions.tsx":"207","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/chat_infinite_scroll.tsx":"208","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/right_sidebar.tsx":"209","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/interfaces.ts":"210","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/quick_menu_item.tsx":"211","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/index.ts":"212","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/infinite_scroll.tsx":"213","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/horizontal_infinite_scroll.tsx":"214","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/groups_selectors.ts":"215","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/groups_api.ts":"216","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/index.tsx":"217","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/navigation/index.tsx":"218","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_controls/meeting_controls.tsx":"219","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_details/meeting_details.tsx":"220","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/components/card/index.tsx":"221","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/disconnect_dialog/index.ts":"222","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/index.ts":"223","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/get_app_dialog/index.ts":"224","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/close_button/index.ts":"225","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/index.ts":"226","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/popover/index.ts":"227","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/bottom_drawer/index.ts":"228","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/button_group/styles.ts":"229","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/index.ts":"230","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/styles.ts":"231","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/interfaces.ts":"232","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_toggled_state.ts":"233","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/reverse_scroll_container.tsx":"234","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/styles.tsx":"235","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messages.tsx":"236","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/use_scroll_ref.tsx":"237","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_details/meeting_details.styled.ts":"238","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_controls/meeting_controls.styled.ts":"239","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/navigation/navigation.tsx":"240","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/components/card/card.tsx":"241","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/interfaces.ts":"242","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/disconnect_dialog/disconnect_dialog.tsx":"243","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/edit_channel_dialog.tsx":"244","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/get_app_dialog/get_app_dialog.tsx":"245","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/close_button/close_button.tsx":"246","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/combined_button.tsx":"247","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/popover/popover.tsx":"248","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/bottom_drawer/bottom_drawer.tsx":"249","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/icon_button.tsx":"250","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/use_messages.ts":"251","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/route_with_layout/index.ts":"252","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/index.ts":"253","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/styles.ts":"254","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/layout_control/index.ts":"255","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/index.tsx":"256","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/end_meeting_control/index.tsx":"257","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/components/card/card.styled.tsx":"258","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/styles.ts":"259","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/interfaces.ts":"260","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/styles.ts":"261","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/disconnect_dialog/style.tsx":"262","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/get_app_dialog/style.tsx":"263","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/popover/styles.ts":"264","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/bottom_drawer/styles.ts":"265","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/helpers.ts":"266","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/styles.ts":"267","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/index.ts":"268","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/close_button/styles.tsx":"269","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/route_with_layout/route_with_layout.tsx":"270","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar.tsx":"271","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/layout_control/layout_control.tsx":"272","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/main_layout.tsx":"273","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/end_meeting_control/end_meeting_control.tsx":"274","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/styled_dialog/index.ts":"275","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/interfaces.ts":"276","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/messages.tsx":"277","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/interfaces.ts":"278","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/no_chats.tsx":"279","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/messages_mobile.tsx":"280","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/e2e_ecryption.tsx":"281","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/continue_to_app.tsx":"282","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/skeleton_page.tsx":"283","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/wallet.tsx":"284","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/go_to_groups.tsx":"285","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/layout_control/layout_control.styled.ts":"286","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/layout_context.tsx":"287","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_window_resize.tsx":"288","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_submenu.tsx":"289","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_drawer.tsx":"290","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_options.tsx":"291","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/styles.tsx":"292","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_navigation_listener.ts":"293","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/style.tsx":"294","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/end_meeting_control/end_meeting_control.styled.tsx":"295","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/styled_dialog/styled_dialog.tsx":"296","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/styles.ts":"297","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/index.ts":"298","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/index.ts":"299","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/header/index.ts":"300","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/page_content_header/index.ts":"301","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/style.tsx":"302","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/route_with_layout/interfaces.tsx":"303","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/styled_dialog/style.tsx":"304","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/interfaces.ts":"305","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/index.ts":"306","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list.tsx":"307","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/sidebar_profile.tsx":"308","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/header/header.tsx":"309","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/page_content_header/page_content_header.tsx":"310","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/header/style.tsx":"311","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/app_store_buttons/index.ts":"312","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/interfaces.ts":"313","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/qr_utils.ts":"314","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/sidebar_list_item.tsx":"315","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/style.tsx":"316","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/links/app_store_links.tsx":"317","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/sidebar_list_item_content.tsx":"318","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/page_content_header/styles.ts":"319","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/app_store_buttons/app_store_buttons.tsx":"320","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/general_avatar/index.ts":"321","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/links/styles.ts":"322","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/link_wrapper.tsx":"323","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/style.tsx":"324","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/app_store_buttons/constants.ts":"325","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/general_avatar/interfaces.ts":"326","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/general_avatar/general_avatar.tsx":"327","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messages_content.tsx":"328","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_wrapper.tsx":"329","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channels_list.tsx":"330","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_handle_channel_loading_hook.ts":"331","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_create.tsx":"332","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_folders.tsx":"333","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/groups_chat.tsx":"334","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_container.tsx":"335","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_boolean_state.ts":"336","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/use_get_channels_hook.tsx":"337","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channels_list_item.tsx":"338","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/styles.tsx":"339","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/styles.ts":"340","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/participants_selectors.ts":"341","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/use_chat_container.tsx":"342","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_messages.tsx":"343","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/message_input.tsx":"344","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/helpers.ts":"345","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/index.ts":"346","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channel_list_counter.tsx":"347","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/use_channels_list_item.tsx":"348","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_bar/index.ts":"349","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/index.ts":"350","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_header/index.ts":"351","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/use_message_input.ts":"352","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/use_chat_messages.tsx":"353","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/style.tsx":"354","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channels_list_item_helpers.ts":"355","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/channel_header.tsx":"356","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/channel_header_bar.tsx":"357","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/channel_members_sidebar.tsx":"358","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_bar/participants_bar.tsx":"359","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/identities_search.tsx":"360","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_header/participants_header.tsx":"361","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/get_avatar_by_channel_type.tsx":"362","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/helpers.ts":"363","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/interfaces.ts":"364","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/helpers.tsx":"365","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/get_messages_card_by_type.tsx":"366","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/interfaces.ts":"367","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/interfaces.ts":"368","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/styles.ts":"369","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_fetch_members.ts":"370","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_header/styles.ts":"371","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_identity_menu_options.tsx":"372","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/fuse/fuse.ts":"373","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/styles.ts":"374","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_channel_header.tsx":"375","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_channel_update.tsx":"376","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/use_leave_conversation_hook.tsx":"377","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_channel_details.tsx":"378","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/helpers.ts":"379","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_bar/styles.ts":"380","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_search_identities_hook.tsx":"381","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_get_contacts_hook.tsx":"382","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/channel_avatar.tsx":"383","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/channel_multi_avatar.tsx":"384","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/typing_message_card.tsx":"385","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/unsupported_message_card.tsx":"386","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/image_message_card.tsx":"387","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/init_video_call/index.ts":"388","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/index.ts":"389","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/index.ts":"390","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/index.ts":"391","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/search_input/index.ts":"392","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_info_message/index.ts":"393","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_header/index.ts":"394","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/styles.ts":"395","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/removable_item/index.ts":"396","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/user_avatar/index.ts":"397","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/styles.tsx":"398","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/index.ts":"399","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/use_image_message_card.ts":"400","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/image_message_card_components.tsx":"401","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/interfaces.ts":"402","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/init_video_call/init_video_call.tsx":"403","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/identity_list.tsx":"404","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/leave_channel_dialog.tsx":"405","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/action_card.tsx":"406","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/identity_list_item.tsx":"407","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/search_input/search_input.tsx":"408","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_info_message/list_info_message.tsx":"409","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_header/list_header.tsx":"410","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/removable_item/removable_item.tsx":"411","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/user_avatar/user_avatar.tsx":"412","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message.tsx":"413","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/use_get_media_data_by_type.ts":"414","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/init_video_call/use_init_video_call.ts":"415","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/styles.ts":"416","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/styles.ts":"417","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/styles.ts":"418","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/helpers.ts":"419","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/interfaces.ts":"420","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/search_input/styles.ts":"421","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_info_message/styles.ts":"422","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/video_call_icon.tsx":"423","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_header/styles.ts":"424","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/removable_item/styles.ts":"425","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/user_avatar/styles.ts":"426","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/styles.ts":"427","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/dialog_utils.ts":"428","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message_content.tsx":"429","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/tooltip/index.ts":"430","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/checkbox/index.ts":"431","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message_buttons_wrapper.tsx":"432","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/use_card_view_message.tsx":"433","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/checkbox/checkbox.tsx":"434","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/tooltip/tooltip.tsx":"435","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/reject_invitation_dialog/index.ts":"436","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/meeting_helpers.ts":"437","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message_buttons.tsx":"438","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/group_invitation_helpers.tsx":"439","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/tooltip/styles.ts":"440","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/checkbox/styles.ts":"441","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/reject_invitation_dialog/reject_invitation_dialog.tsx":"442","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/reject_invitation_dialog/styles.ts":"443"},{"size":946,"mtime":1608547913970,"results":"444","hashOfConfig":"445"},{"size":8051,"mtime":1608547913967,"results":"446","hashOfConfig":"445"},{"size":4242,"mtime":1608547913977,"results":"447","hashOfConfig":"445"},{"size":1078,"mtime":1608547913890,"results":"448","hashOfConfig":"445"},{"size":2677,"mtime":1608547913977,"results":"449","hashOfConfig":"445"},{"size":140,"mtime":1608547913970,"results":"450","hashOfConfig":"445"},{"size":3975,"mtime":1608547913977,"results":"451","hashOfConfig":"445"},{"size":561,"mtime":1608547913977,"results":"452","hashOfConfig":"445"},{"size":9854,"mtime":1608547913977,"results":"453","hashOfConfig":"445"},{"size":1982,"mtime":1608547913973,"results":"454","hashOfConfig":"445"},{"size":1218,"mtime":1608547913973,"results":"455","hashOfConfig":"445"},{"size":3945,"mtime":1608547913970,"results":"456","hashOfConfig":"445"},{"size":4505,"mtime":1608582785424,"results":"457","hashOfConfig":"445"},{"size":982,"mtime":1608547913940,"results":"458","hashOfConfig":"445"},{"size":350,"mtime":1608547913977,"results":"459","hashOfConfig":"445"},{"size":8674,"mtime":1608547913970,"results":"460","hashOfConfig":"445"},{"size":24,"mtime":1608547913973,"results":"461","hashOfConfig":"445"},{"size":460,"mtime":1608547913973,"results":"462","hashOfConfig":"445"},{"size":9257,"mtime":1608547913907,"results":"463","hashOfConfig":"445"},{"size":1395,"mtime":1608547913970,"results":"464","hashOfConfig":"445"},{"size":25,"mtime":1608547913970,"results":"465","hashOfConfig":"445"},{"size":102,"mtime":1608547913917,"results":"466","hashOfConfig":"445"},{"size":2367,"mtime":1608547913907,"results":"467","hashOfConfig":"445"},{"size":731,"mtime":1608582785434,"results":"468","hashOfConfig":"445"},{"size":2100,"mtime":1608582785427,"results":"469","hashOfConfig":"445"},{"size":485,"mtime":1608582785427,"results":"470","hashOfConfig":"445"},{"size":588,"mtime":1608547913970,"results":"471","hashOfConfig":"445"},{"size":7091,"mtime":1608547913957,"results":"472","hashOfConfig":"445"},{"size":1210,"mtime":1608547913940,"results":"473","hashOfConfig":"445"},{"size":771,"mtime":1608547913940,"results":"474","hashOfConfig":"445"},{"size":68,"mtime":1608547913907,"results":"475","hashOfConfig":"445"},{"size":2000,"mtime":1608547913977,"results":"476","hashOfConfig":"445"},{"size":2029,"mtime":1608547913973,"results":"477","hashOfConfig":"445"},{"size":428,"mtime":1608547913977,"results":"478","hashOfConfig":"445"},{"size":5136,"mtime":1608547913977,"results":"479","hashOfConfig":"445"},{"size":135,"mtime":1608547913917,"results":"480","hashOfConfig":"445"},{"size":2576,"mtime":1608547913970,"results":"481","hashOfConfig":"445"},{"size":879,"mtime":1608582785431,"results":"482","hashOfConfig":"445"},{"size":30,"mtime":1608547913913,"results":"483","hashOfConfig":"445"},{"size":2539,"mtime":1608547913917,"results":"484","hashOfConfig":"445"},{"size":881,"mtime":1608547913970,"results":"485","hashOfConfig":"445"},{"size":13830,"mtime":1608547913973,"results":"486","hashOfConfig":"445"},{"size":1185,"mtime":1608547913970,"results":"487","hashOfConfig":"445"},{"size":818,"mtime":1608547913917,"results":"488","hashOfConfig":"445"},{"size":2143,"mtime":1608547913957,"results":"489","hashOfConfig":"445"},{"size":5546,"mtime":1608547913977,"results":"490","hashOfConfig":"445"},{"size":3322,"mtime":1608547913907,"results":"491","hashOfConfig":"445"},{"size":1503,"mtime":1608547913923,"results":"492","hashOfConfig":"445"},{"size":5803,"mtime":1608547913973,"results":"493","hashOfConfig":"445"},{"size":20618,"mtime":1608547913973,"results":"494","hashOfConfig":"445"},{"size":2906,"mtime":1608547913973,"results":"495","hashOfConfig":"445"},{"size":519,"mtime":1608547913977,"results":"496","hashOfConfig":"445"},{"size":1316,"mtime":1608547913907,"results":"497","hashOfConfig":"445"},{"size":103,"mtime":1608547913973,"results":"498","hashOfConfig":"445"},{"size":1317,"mtime":1608547913970,"results":"499","hashOfConfig":"445"},{"size":227,"mtime":1608547913970,"results":"500","hashOfConfig":"445"},{"size":245,"mtime":1608547913977,"results":"501","hashOfConfig":"445"},{"size":2341,"mtime":1608547913977,"results":"502","hashOfConfig":"445"},{"size":1781,"mtime":1608547913917,"results":"503","hashOfConfig":"445"},{"size":3732,"mtime":1608547913977,"results":"504","hashOfConfig":"445"},{"size":487,"mtime":1608547913973,"results":"505","hashOfConfig":"445"},{"size":405,"mtime":1608547913973,"results":"506","hashOfConfig":"445"},{"size":12373,"mtime":1608547913973,"results":"507","hashOfConfig":"445"},{"size":3485,"mtime":1608547913970,"results":"508","hashOfConfig":"445"},{"size":3273,"mtime":1608547913913,"results":"509","hashOfConfig":"445"},{"size":6216,"mtime":1608547913973,"results":"510","hashOfConfig":"445"},{"size":476,"mtime":1608547913970,"results":"511","hashOfConfig":"445"},{"size":1372,"mtime":1608547913977,"results":"512","hashOfConfig":"445"},{"size":1336,"mtime":1608547913923,"results":"513","hashOfConfig":"445"},{"size":569,"mtime":1608547913923,"results":"514","hashOfConfig":"445"},{"size":865,"mtime":1608547913923,"results":"515","hashOfConfig":"445"},{"size":6164,"mtime":1608547913923,"results":"516","hashOfConfig":"445"},{"size":137,"mtime":1608547913977,"results":"517","hashOfConfig":"445"},{"size":499,"mtime":1608547913973,"results":"518","hashOfConfig":"445"},{"size":2073,"mtime":1608547913973,"results":"519","hashOfConfig":"445"},{"size":534,"mtime":1608547913973,"results":"520","hashOfConfig":"445"},{"size":1668,"mtime":1608547913970,"results":"521","hashOfConfig":"445"},{"size":6528,"mtime":1608547913977,"results":"522","hashOfConfig":"445"},{"size":533,"mtime":1608547913977,"results":"523","hashOfConfig":"445"},{"size":38,"mtime":1608547913950,"results":"524","hashOfConfig":"445"},{"size":5125,"mtime":1608547913973,"results":"525","hashOfConfig":"445"},{"size":7364,"mtime":1608582785431,"results":"526","hashOfConfig":"445"},{"size":1518,"mtime":1608547913977,"results":"527","hashOfConfig":"445"},{"size":102,"mtime":1608547913963,"results":"528","hashOfConfig":"445"},{"size":165,"mtime":1608547913977,"results":"529","hashOfConfig":"445"},{"size":1545,"mtime":1608547913977,"results":"530","hashOfConfig":"445"},{"size":4709,"mtime":1608547913970,"results":"531","hashOfConfig":"445"},{"size":4734,"mtime":1608547913970,"results":"532","hashOfConfig":"445"},{"size":920,"mtime":1608547913970,"results":"533","hashOfConfig":"445"},{"size":2535,"mtime":1608547913970,"results":"534","hashOfConfig":"445"},{"size":74,"mtime":1608547913930,"results":"535","hashOfConfig":"445"},{"size":2784,"mtime":1608547913977,"results":"536","hashOfConfig":"445"},{"size":940,"mtime":1608547913973,"results":"537","hashOfConfig":"445"},{"size":553,"mtime":1608547913920,"results":"538","hashOfConfig":"445"},{"size":2010,"mtime":1608547913917,"results":"539","hashOfConfig":"445"},{"size":396,"mtime":1608547913977,"results":"540","hashOfConfig":"445"},{"size":17596,"mtime":1608547913973,"results":"541","hashOfConfig":"445"},{"size":1185,"mtime":1608547913970,"results":"542","hashOfConfig":"445"},{"size":2301,"mtime":1608547913973,"results":"543","hashOfConfig":"445"},{"size":2080,"mtime":1608547913963,"results":"544","hashOfConfig":"445"},{"size":2949,"mtime":1608547913963,"results":"545","hashOfConfig":"445"},{"size":1948,"mtime":1608547913973,"results":"546","hashOfConfig":"445"},{"size":1115,"mtime":1608547913950,"results":"547","hashOfConfig":"445"},{"size":1052,"mtime":1608547913973,"results":"548","hashOfConfig":"445"},{"size":1046,"mtime":1608547913973,"results":"549","hashOfConfig":"445"},{"size":1390,"mtime":1608547913963,"results":"550","hashOfConfig":"445"},{"size":1707,"mtime":1608547913963,"results":"551","hashOfConfig":"445"},{"size":294,"mtime":1608547913977,"results":"552","hashOfConfig":"445"},{"size":4620,"mtime":1608547913960,"results":"553","hashOfConfig":"445"},{"size":14324,"mtime":1608547913960,"results":"554","hashOfConfig":"445"},{"size":474,"mtime":1608547913930,"results":"555","hashOfConfig":"445"},{"size":712,"mtime":1608547913930,"results":"556","hashOfConfig":"445"},{"size":1775,"mtime":1608547913960,"results":"557","hashOfConfig":"445"},{"size":585,"mtime":1608547913930,"results":"558","hashOfConfig":"445"},{"size":627,"mtime":1608547913950,"results":"559","hashOfConfig":"445"},{"size":493,"mtime":1608547913947,"results":"560","hashOfConfig":"445"},{"size":2764,"mtime":1608547913947,"results":"561","hashOfConfig":"445"},{"size":7266,"mtime":1608547913960,"results":"562","hashOfConfig":"445"},{"size":1282,"mtime":1608547913963,"results":"563","hashOfConfig":"445"},{"size":276,"mtime":1608547913963,"results":"564","hashOfConfig":"445"},{"size":180,"mtime":1608547913960,"results":"565","hashOfConfig":"445"},{"size":579,"mtime":1608547913947,"results":"566","hashOfConfig":"445"},{"size":964,"mtime":1608547913950,"results":"567","hashOfConfig":"445"},{"size":2807,"mtime":1608547913950,"results":"568","hashOfConfig":"445"},{"size":2329,"mtime":1608547913950,"results":"569","hashOfConfig":"445"},{"size":831,"mtime":1608547913960,"results":"570","hashOfConfig":"445"},{"size":2372,"mtime":1608547913960,"results":"571","hashOfConfig":"445"},{"size":497,"mtime":1608547913960,"results":"572","hashOfConfig":"445"},{"size":711,"mtime":1608547913960,"results":"573","hashOfConfig":"445"},{"size":381,"mtime":1608547913947,"results":"574","hashOfConfig":"445"},{"size":85,"mtime":1608547913930,"results":"575","hashOfConfig":"445"},{"size":151,"mtime":1608547913950,"results":"576","hashOfConfig":"445"},{"size":16127,"mtime":1608547913960,"results":"577","hashOfConfig":"445"},{"size":756,"mtime":1608547913960,"results":"578","hashOfConfig":"445"},{"size":6761,"mtime":1608547913960,"results":"579","hashOfConfig":"445"},{"size":2892,"mtime":1608547913960,"results":"580","hashOfConfig":"445"},{"size":1009,"mtime":1608547913963,"results":"581","hashOfConfig":"445"},{"size":566,"mtime":1608547913930,"results":"582","hashOfConfig":"445"},{"size":6401,"mtime":1608547913963,"results":"583","hashOfConfig":"445"},{"size":640,"mtime":1608547913907,"results":"584","hashOfConfig":"445"},{"size":36,"mtime":1608547913950,"results":"585","hashOfConfig":"445"},{"size":90,"mtime":1608547913963,"results":"586","hashOfConfig":"445"},{"size":63,"mtime":1608547913937,"results":"587","hashOfConfig":"445"},{"size":256,"mtime":1608547913927,"results":"588","hashOfConfig":"445"},{"size":2188,"mtime":1608547913923,"results":"589","hashOfConfig":"445"},{"size":1604,"mtime":1608547913950,"results":"590","hashOfConfig":"445"},{"size":549,"mtime":1608547913923,"results":"591","hashOfConfig":"445"},{"size":200,"mtime":1608547913963,"results":"592","hashOfConfig":"445"},{"size":1439,"mtime":1608547913963,"results":"593","hashOfConfig":"445"},{"size":62,"mtime":1608547913963,"results":"594","hashOfConfig":"445"},{"size":2035,"mtime":1608547913937,"results":"595","hashOfConfig":"445"},{"size":922,"mtime":1608547913937,"results":"596","hashOfConfig":"445"},{"size":41,"mtime":1608547913933,"results":"597","hashOfConfig":"445"},{"size":2041,"mtime":1608547913950,"results":"598","hashOfConfig":"445"},{"size":1455,"mtime":1608547913943,"results":"599","hashOfConfig":"445"},{"size":1012,"mtime":1608547913947,"results":"600","hashOfConfig":"445"},{"size":651,"mtime":1608547913947,"results":"601","hashOfConfig":"445"},{"size":205,"mtime":1608547913960,"results":"602","hashOfConfig":"445"},{"size":647,"mtime":1608547913937,"results":"603","hashOfConfig":"445"},{"size":137,"mtime":1608547913917,"results":"604","hashOfConfig":"445"},{"size":45,"mtime":1608547913910,"results":"605","hashOfConfig":"445"},{"size":47,"mtime":1608547913933,"results":"606","hashOfConfig":"445"},{"size":30,"mtime":1608547913937,"results":"607","hashOfConfig":"445"},{"size":147,"mtime":1608547913927,"results":"608","hashOfConfig":"445"},{"size":95,"mtime":1608547913913,"results":"609","hashOfConfig":"445"},{"size":1333,"mtime":1608547913963,"results":"610","hashOfConfig":"445"},{"size":1617,"mtime":1608547913933,"results":"611","hashOfConfig":"445"},{"size":1372,"mtime":1608547913923,"results":"612","hashOfConfig":"445"},{"size":1925,"mtime":1608547913923,"results":"613","hashOfConfig":"445"},{"size":1794,"mtime":1608547913923,"results":"614","hashOfConfig":"445"},{"size":2569,"mtime":1608547913923,"results":"615","hashOfConfig":"445"},{"size":2470,"mtime":1608547913923,"results":"616","hashOfConfig":"445"},{"size":1082,"mtime":1608547913923,"results":"617","hashOfConfig":"445"},{"size":2960,"mtime":1608547913923,"results":"618","hashOfConfig":"445"},{"size":995,"mtime":1608547913923,"results":"619","hashOfConfig":"445"},{"size":1276,"mtime":1608547913923,"results":"620","hashOfConfig":"445"},{"size":1106,"mtime":1608547913927,"results":"621","hashOfConfig":"445"},{"size":1221,"mtime":1608547913927,"results":"622","hashOfConfig":"445"},{"size":1234,"mtime":1608547913923,"results":"623","hashOfConfig":"445"},{"size":941,"mtime":1608547913923,"results":"624","hashOfConfig":"445"},{"size":829,"mtime":1608547913923,"results":"625","hashOfConfig":"445"},{"size":1354,"mtime":1608547913923,"results":"626","hashOfConfig":"445"},{"size":880,"mtime":1608547913923,"results":"627","hashOfConfig":"445"},{"size":603,"mtime":1608547913920,"results":"628","hashOfConfig":"445"},{"size":265,"mtime":1608547913920,"results":"629","hashOfConfig":"445"},{"size":750,"mtime":1608547913920,"results":"630","hashOfConfig":"445"},{"size":1417,"mtime":1608547913920,"results":"631","hashOfConfig":"445"},{"size":56006,"mtime":1608547913973,"results":"632","hashOfConfig":"445"},{"size":1116,"mtime":1608547913973,"results":"633","hashOfConfig":"445"},{"size":4116,"mtime":1608547913973,"results":"634","hashOfConfig":"445"},{"size":1058,"mtime":1608547913977,"results":"635","hashOfConfig":"445"},{"size":53,"mtime":1608547913947,"results":"636","hashOfConfig":"445"},{"size":51,"mtime":1608547913947,"results":"637","hashOfConfig":"445"},{"size":1989,"mtime":1608547913920,"results":"638","hashOfConfig":"445"},{"size":2276,"mtime":1608547913923,"results":"639","hashOfConfig":"445"},{"size":1158,"mtime":1608547913927,"results":"640","hashOfConfig":"445"},{"size":1404,"mtime":1608547913923,"results":"641","hashOfConfig":"445"},{"size":1336,"mtime":1608547913923,"results":"642","hashOfConfig":"445"},{"size":1034,"mtime":1608547913923,"results":"643","hashOfConfig":"445"},{"size":1787,"mtime":1608547913923,"results":"644","hashOfConfig":"445"},{"size":1318,"mtime":1608547913907,"results":"645","hashOfConfig":"445"},{"size":880,"mtime":1608547913947,"results":"646","hashOfConfig":"445"},{"size":1689,"mtime":1608547913947,"results":"647","hashOfConfig":"445"},{"size":636,"mtime":1608547913963,"results":"648","hashOfConfig":"445"},{"size":1551,"mtime":1608547913910,"results":"649","hashOfConfig":"445"},{"size":1132,"mtime":1608547913933,"results":"650","hashOfConfig":"445"},{"size":406,"mtime":1608547913937,"results":"651","hashOfConfig":"445"},{"size":2215,"mtime":1608547913927,"results":"652","hashOfConfig":"445"},{"size":1853,"mtime":1608547913933,"results":"653","hashOfConfig":"445"},{"size":3471,"mtime":1608547913927,"results":"654","hashOfConfig":"445"},{"size":1536,"mtime":1608547913933,"results":"655","hashOfConfig":"445"},{"size":144,"mtime":1608547913957,"results":"656","hashOfConfig":"445"},{"size":3272,"mtime":1608547913927,"results":"657","hashOfConfig":"445"},{"size":4391,"mtime":1608547913927,"results":"658","hashOfConfig":"445"},{"size":2510,"mtime":1608547913973,"results":"659","hashOfConfig":"445"},{"size":12851,"mtime":1608547913970,"results":"660","hashOfConfig":"445"},{"size":88,"mtime":1608547913940,"results":"661","hashOfConfig":"445"},{"size":42,"mtime":1608547913947,"results":"662","hashOfConfig":"445"},{"size":1803,"mtime":1608547913947,"results":"663","hashOfConfig":"445"},{"size":1019,"mtime":1608547913947,"results":"664","hashOfConfig":"445"},{"size":30,"mtime":1608547913943,"results":"665","hashOfConfig":"445"},{"size":36,"mtime":1608547913913,"results":"666","hashOfConfig":"445"},{"size":67,"mtime":1608547913913,"results":"667","hashOfConfig":"445"},{"size":33,"mtime":1608547913917,"results":"668","hashOfConfig":"445"},{"size":31,"mtime":1608547913910,"results":"669","hashOfConfig":"445"},{"size":51,"mtime":1608547913910,"results":"670","hashOfConfig":"445"},{"size":36,"mtime":1608547913930,"results":"671","hashOfConfig":"445"},{"size":47,"mtime":1608547913910,"results":"672","hashOfConfig":"445"},{"size":1113,"mtime":1608547913910,"results":"673","hashOfConfig":"445"},{"size":43,"mtime":1608547913913,"results":"674","hashOfConfig":"445"},{"size":1647,"mtime":1608547913933,"results":"675","hashOfConfig":"445"},{"size":578,"mtime":1608547913933,"results":"676","hashOfConfig":"445"},{"size":744,"mtime":1608547913970,"results":"677","hashOfConfig":"445"},{"size":3206,"mtime":1608547913927,"results":"678","hashOfConfig":"445"},{"size":5798,"mtime":1608547913927,"results":"679","hashOfConfig":"445"},{"size":1072,"mtime":1608547913957,"results":"680","hashOfConfig":"445"},{"size":2004,"mtime":1608547913927,"results":"681","hashOfConfig":"445"},{"size":294,"mtime":1608547913947,"results":"682","hashOfConfig":"445"},{"size":350,"mtime":1608547913947,"results":"683","hashOfConfig":"445"},{"size":1230,"mtime":1608547913947,"results":"684","hashOfConfig":"445"},{"size":525,"mtime":1608547913943,"results":"685","hashOfConfig":"445"},{"size":361,"mtime":1608547913913,"results":"686","hashOfConfig":"445"},{"size":1416,"mtime":1608547913913,"results":"687","hashOfConfig":"445"},{"size":1818,"mtime":1608568268094,"results":"688","hashOfConfig":"445"},{"size":3078,"mtime":1608547913917,"results":"689","hashOfConfig":"445"},{"size":532,"mtime":1608547913910,"results":"690","hashOfConfig":"445"},{"size":1003,"mtime":1608547913910,"results":"691","hashOfConfig":"445"},{"size":861,"mtime":1608547913930,"results":"692","hashOfConfig":"445"},{"size":971,"mtime":1608547913910,"results":"693","hashOfConfig":"445"},{"size":1867,"mtime":1608547913913,"results":"694","hashOfConfig":"445"},{"size":2595,"mtime":1608547913963,"results":"695","hashOfConfig":"445"},{"size":66,"mtime":1608547913967,"results":"696","hashOfConfig":"445"},{"size":55,"mtime":1608547913967,"results":"697","hashOfConfig":"445"},{"size":4069,"mtime":1608547913963,"results":"698","hashOfConfig":"445"},{"size":49,"mtime":1608547913943,"results":"699","hashOfConfig":"445"},{"size":67,"mtime":1608547913943,"results":"700","hashOfConfig":"445"},{"size":58,"mtime":1608547913943,"results":"701","hashOfConfig":"445"},{"size":353,"mtime":1608547913943,"results":"702","hashOfConfig":"445"},{"size":214,"mtime":1608547913913,"results":"703","hashOfConfig":"445"},{"size":271,"mtime":1608547913910,"results":"704","hashOfConfig":"445"},{"size":1018,"mtime":1608547913910,"results":"705","hashOfConfig":"445"},{"size":653,"mtime":1608547913913,"results":"706","hashOfConfig":"445"},{"size":1906,"mtime":1608547913917,"results":"707","hashOfConfig":"445"},{"size":506,"mtime":1608547913930,"results":"708","hashOfConfig":"445"},{"size":922,"mtime":1608547913910,"results":"709","hashOfConfig":"445"},{"size":814,"mtime":1608547913913,"results":"710","hashOfConfig":"445"},{"size":1460,"mtime":1608547913913,"results":"711","hashOfConfig":"445"},{"size":349,"mtime":1608547913943,"results":"712","hashOfConfig":"445"},{"size":211,"mtime":1608547913910,"results":"713","hashOfConfig":"445"},{"size":1706,"mtime":1608547913967,"results":"714","hashOfConfig":"445"},{"size":7046,"mtime":1608547913967,"results":"715","hashOfConfig":"445"},{"size":643,"mtime":1608547913947,"results":"716","hashOfConfig":"445"},{"size":2195,"mtime":1608547913943,"results":"717","hashOfConfig":"445"},{"size":1650,"mtime":1608547913943,"results":"718","hashOfConfig":"445"},{"size":32,"mtime":1608547913920,"results":"719","hashOfConfig":"445"},{"size":393,"mtime":1608547913913,"results":"720","hashOfConfig":"445"},{"size":835,"mtime":1608547913943,"results":"721","hashOfConfig":"445"},{"size":1261,"mtime":1608547913967,"results":"722","hashOfConfig":"445"},{"size":699,"mtime":1608547913943,"results":"723","hashOfConfig":"445"},{"size":1955,"mtime":1608547913943,"results":"724","hashOfConfig":"445"},{"size":5497,"mtime":1608547913940,"results":"725","hashOfConfig":"445"},{"size":1069,"mtime":1608547913940,"results":"726","hashOfConfig":"445"},{"size":368,"mtime":1608547913943,"results":"727","hashOfConfig":"445"},{"size":821,"mtime":1608547913943,"results":"728","hashOfConfig":"445"},{"size":1302,"mtime":1608547913940,"results":"729","hashOfConfig":"445"},{"size":830,"mtime":1608547913947,"results":"730","hashOfConfig":"445"},{"size":668,"mtime":1608547913943,"results":"731","hashOfConfig":"445"},{"size":588,"mtime":1608547913970,"results":"732","hashOfConfig":"445"},{"size":1796,"mtime":1608547913967,"results":"733","hashOfConfig":"445"},{"size":1307,"mtime":1608547913967,"results":"734","hashOfConfig":"445"},{"size":2302,"mtime":1608547913967,"results":"735","hashOfConfig":"445"},{"size":5061,"mtime":1608547913967,"results":"736","hashOfConfig":"445"},{"size":658,"mtime":1608547913970,"results":"737","hashOfConfig":"445"},{"size":1200,"mtime":1608547913943,"results":"738","hashOfConfig":"445"},{"size":104,"mtime":1608547913943,"results":"739","hashOfConfig":"445"},{"size":1972,"mtime":1608547913920,"results":"740","hashOfConfig":"445"},{"size":3527,"mtime":1608547913943,"results":"741","hashOfConfig":"445"},{"size":31,"mtime":1608547913967,"results":"742","hashOfConfig":"445"},{"size":63,"mtime":1608547913967,"results":"743","hashOfConfig":"445"},{"size":49,"mtime":1608547913937,"results":"744","hashOfConfig":"445"},{"size":58,"mtime":1608547913967,"results":"745","hashOfConfig":"445"},{"size":2285,"mtime":1608547913967,"results":"746","hashOfConfig":"445"},{"size":334,"mtime":1608547913967,"results":"747","hashOfConfig":"445"},{"size":903,"mtime":1608547913920,"results":"748","hashOfConfig":"445"},{"size":238,"mtime":1608547913967,"results":"749","hashOfConfig":"445"},{"size":109,"mtime":1608547913967,"results":"750","hashOfConfig":"445"},{"size":5183,"mtime":1608547913967,"results":"751","hashOfConfig":"445"},{"size":4066,"mtime":1608547913967,"results":"752","hashOfConfig":"445"},{"size":1219,"mtime":1608547913937,"results":"753","hashOfConfig":"445"},{"size":914,"mtime":1608547913967,"results":"754","hashOfConfig":"445"},{"size":1096,"mtime":1608547913937,"results":"755","hashOfConfig":"445"},{"size":54,"mtime":1608547913910,"results":"756","hashOfConfig":"445"},{"size":413,"mtime":1608547913967,"results":"757","hashOfConfig":"445"},{"size":890,"mtime":1608547913977,"results":"758","hashOfConfig":"445"},{"size":1174,"mtime":1608547913967,"results":"759","hashOfConfig":"445"},{"size":3463,"mtime":1608547913967,"results":"760","hashOfConfig":"445"},{"size":765,"mtime":1608547913930,"results":"761","hashOfConfig":"445"},{"size":1166,"mtime":1608547913967,"results":"762","hashOfConfig":"445"},{"size":715,"mtime":1608547913967,"results":"763","hashOfConfig":"445"},{"size":546,"mtime":1608547913910,"results":"764","hashOfConfig":"445"},{"size":62,"mtime":1608547913920,"results":"765","hashOfConfig":"445"},{"size":295,"mtime":1608547913930,"results":"766","hashOfConfig":"445"},{"size":374,"mtime":1608547913967,"results":"767","hashOfConfig":"445"},{"size":924,"mtime":1608547913967,"results":"768","hashOfConfig":"445"},{"size":551,"mtime":1608547913910,"results":"769","hashOfConfig":"445"},{"size":257,"mtime":1608547913920,"results":"770","hashOfConfig":"445"},{"size":1630,"mtime":1608547913920,"results":"771","hashOfConfig":"445"},{"size":5944,"mtime":1608547913957,"results":"772","hashOfConfig":"445"},{"size":2936,"mtime":1608547913957,"results":"773","hashOfConfig":"445"},{"size":1680,"mtime":1608547913953,"results":"774","hashOfConfig":"445"},{"size":3459,"mtime":1608547913970,"results":"775","hashOfConfig":"445"},{"size":4145,"mtime":1608547913950,"results":"776","hashOfConfig":"445"},{"size":2660,"mtime":1608547913953,"results":"777","hashOfConfig":"445"},{"size":2571,"mtime":1608547913940,"results":"778","hashOfConfig":"445"},{"size":1504,"mtime":1608547913957,"results":"779","hashOfConfig":"445"},{"size":392,"mtime":1608547913967,"results":"780","hashOfConfig":"445"},{"size":4359,"mtime":1608547913957,"results":"781","hashOfConfig":"445"},{"size":2362,"mtime":1608547913957,"results":"782","hashOfConfig":"445"},{"size":4632,"mtime":1608547913957,"results":"783","hashOfConfig":"445"},{"size":2125,"mtime":1608547913963,"results":"784","hashOfConfig":"445"},{"size":714,"mtime":1608547913977,"results":"785","hashOfConfig":"445"},{"size":2540,"mtime":1608547913963,"results":"786","hashOfConfig":"445"},{"size":3228,"mtime":1608547913963,"results":"787","hashOfConfig":"445"},{"size":3895,"mtime":1608547913963,"results":"788","hashOfConfig":"445"},{"size":4106,"mtime":1608547913957,"results":"789","hashOfConfig":"445"},{"size":171,"mtime":1608547913953,"results":"790","hashOfConfig":"445"},{"size":517,"mtime":1608547913953,"results":"791","hashOfConfig":"445"},{"size":4641,"mtime":1608582785431,"results":"792","hashOfConfig":"445"},{"size":53,"mtime":1608547913967,"results":"793","hashOfConfig":"445"},{"size":55,"mtime":1608547913937,"results":"794","hashOfConfig":"445"},{"size":59,"mtime":1608547913967,"results":"795","hashOfConfig":"445"},{"size":7905,"mtime":1608582785431,"results":"796","hashOfConfig":"445"},{"size":6484,"mtime":1608547913963,"results":"797","hashOfConfig":"445"},{"size":2820,"mtime":1608547913963,"results":"798","hashOfConfig":"445"},{"size":7779,"mtime":1608547913957,"results":"799","hashOfConfig":"445"},{"size":8552,"mtime":1608582785427,"results":"800","hashOfConfig":"445"},{"size":1536,"mtime":1608582785427,"results":"801","hashOfConfig":"445"},{"size":1687,"mtime":1608547913953,"results":"802","hashOfConfig":"445"},{"size":1275,"mtime":1608547913967,"results":"803","hashOfConfig":"445"},{"size":4297,"mtime":1608547913937,"results":"804","hashOfConfig":"445"},{"size":779,"mtime":1608547913967,"results":"805","hashOfConfig":"445"},{"size":2079,"mtime":1608547913950,"results":"806","hashOfConfig":"445"},{"size":1876,"mtime":1608547913953,"results":"807","hashOfConfig":"445"},{"size":2084,"mtime":1608547913963,"results":"808","hashOfConfig":"445"},{"size":2688,"mtime":1608547913963,"results":"809","hashOfConfig":"445"},{"size":4646,"mtime":1608547913963,"results":"810","hashOfConfig":"445"},{"size":1258,"mtime":1608547913957,"results":"811","hashOfConfig":"445"},{"size":1636,"mtime":1608547913967,"results":"812","hashOfConfig":"445"},{"size":3294,"mtime":1608547913953,"results":"813","hashOfConfig":"445"},{"size":1504,"mtime":1608547913953,"results":"814","hashOfConfig":"445"},{"size":555,"mtime":1608547913967,"results":"815","hashOfConfig":"445"},{"size":9031,"mtime":1608547913970,"results":"816","hashOfConfig":"445"},{"size":926,"mtime":1608547913973,"results":"817","hashOfConfig":"445"},{"size":455,"mtime":1608547913940,"results":"818","hashOfConfig":"445"},{"size":550,"mtime":1608547913953,"results":"819","hashOfConfig":"445"},{"size":2013,"mtime":1608547913953,"results":"820","hashOfConfig":"445"},{"size":1920,"mtime":1608547913953,"results":"821","hashOfConfig":"445"},{"size":3776,"mtime":1608547913953,"results":"822","hashOfConfig":"445"},{"size":2561,"mtime":1608547913937,"results":"823","hashOfConfig":"445"},{"size":395,"mtime":1608547913967,"results":"824","hashOfConfig":"445"},{"size":3008,"mtime":1608547913970,"results":"825","hashOfConfig":"445"},{"size":3173,"mtime":1608547913967,"results":"826","hashOfConfig":"445"},{"size":356,"mtime":1608582785427,"results":"827","hashOfConfig":"445"},{"size":1045,"mtime":1608547913950,"results":"828","hashOfConfig":"445"},{"size":950,"mtime":1608547913960,"results":"829","hashOfConfig":"445"},{"size":2834,"mtime":1608547913963,"results":"830","hashOfConfig":"445"},{"size":3160,"mtime":1608547913960,"results":"831","hashOfConfig":"445"},{"size":50,"mtime":1608547913927,"results":"832","hashOfConfig":"445"},{"size":103,"mtime":1608547913940,"results":"833","hashOfConfig":"445"},{"size":60,"mtime":1608547913953,"results":"834","hashOfConfig":"445"},{"size":72,"mtime":1608547913910,"results":"835","hashOfConfig":"445"},{"size":45,"mtime":1608547913933,"results":"836","hashOfConfig":"445"},{"size":54,"mtime":1608547913930,"results":"837","hashOfConfig":"445"},{"size":43,"mtime":1608547913930,"results":"838","hashOfConfig":"445"},{"size":238,"mtime":1608547913967,"results":"839","hashOfConfig":"445"},{"size":49,"mtime":1608547913933,"results":"840","hashOfConfig":"445"},{"size":43,"mtime":1608547913937,"results":"841","hashOfConfig":"445"},{"size":1758,"mtime":1608547913950,"results":"842","hashOfConfig":"445"},{"size":36,"mtime":1608547913957,"results":"843","hashOfConfig":"445"},{"size":1770,"mtime":1608547913963,"results":"844","hashOfConfig":"445"},{"size":5515,"mtime":1608547913960,"results":"845","hashOfConfig":"445"},{"size":162,"mtime":1608547913910,"results":"846","hashOfConfig":"445"},{"size":1026,"mtime":1608547913930,"results":"847","hashOfConfig":"445"},{"size":2437,"mtime":1608547913940,"results":"848","hashOfConfig":"445"},{"size":1232,"mtime":1608547913953,"results":"849","hashOfConfig":"445"},{"size":911,"mtime":1608547913910,"results":"850","hashOfConfig":"445"},{"size":7712,"mtime":1608547913940,"results":"851","hashOfConfig":"445"},{"size":2592,"mtime":1608547913933,"results":"852","hashOfConfig":"445"},{"size":400,"mtime":1608547913930,"results":"853","hashOfConfig":"445"},{"size":375,"mtime":1608547913930,"results":"854","hashOfConfig":"445"},{"size":590,"mtime":1608547913933,"results":"855","hashOfConfig":"445"},{"size":662,"mtime":1608547913937,"results":"856","hashOfConfig":"445"},{"size":1098,"mtime":1608547913957,"results":"857","hashOfConfig":"445"},{"size":10685,"mtime":1608547913963,"results":"858","hashOfConfig":"445"},{"size":1205,"mtime":1608547913930,"results":"859","hashOfConfig":"445"},{"size":3278,"mtime":1608547913940,"results":"860","hashOfConfig":"445"},{"size":634,"mtime":1608547913953,"results":"861","hashOfConfig":"445"},{"size":1487,"mtime":1608547913910,"results":"862","hashOfConfig":"445"},{"size":874,"mtime":1608547913940,"results":"863","hashOfConfig":"445"},{"size":1954,"mtime":1608547913940,"results":"864","hashOfConfig":"445"},{"size":997,"mtime":1608547913933,"results":"865","hashOfConfig":"445"},{"size":389,"mtime":1608547913930,"results":"866","hashOfConfig":"445"},{"size":921,"mtime":1608547913927,"results":"867","hashOfConfig":"445"},{"size":426,"mtime":1608547913930,"results":"868","hashOfConfig":"445"},{"size":749,"mtime":1608547913933,"results":"869","hashOfConfig":"445"},{"size":580,"mtime":1608547913937,"results":"870","hashOfConfig":"445"},{"size":2567,"mtime":1608547913960,"results":"871","hashOfConfig":"445"},{"size":2016,"mtime":1608547913977,"results":"872","hashOfConfig":"445"},{"size":2549,"mtime":1608547913957,"results":"873","hashOfConfig":"445"},{"size":36,"mtime":1608547913937,"results":"874","hashOfConfig":"445"},{"size":38,"mtime":1608547913913,"results":"875","hashOfConfig":"445"},{"size":1170,"mtime":1608547913957,"results":"876","hashOfConfig":"445"},{"size":2559,"mtime":1608547913960,"results":"877","hashOfConfig":"445"},{"size":544,"mtime":1608547913913,"results":"878","hashOfConfig":"445"},{"size":923,"mtime":1608547913937,"results":"879","hashOfConfig":"445"},{"size":68,"mtime":1608547913920,"results":"880","hashOfConfig":"445"},{"size":839,"mtime":1608547913960,"results":"881","hashOfConfig":"445"},{"size":1347,"mtime":1608547913957,"results":"882","hashOfConfig":"445"},{"size":1371,"mtime":1608547913957,"results":"883","hashOfConfig":"445"},{"size":805,"mtime":1608547913937,"results":"884","hashOfConfig":"445"},{"size":195,"mtime":1608547913913,"results":"885","hashOfConfig":"445"},{"size":1097,"mtime":1608547913920,"results":"886","hashOfConfig":"445"},{"size":495,"mtime":1608547913920,"results":"887","hashOfConfig":"445"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},"3cu6u1",{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"898","messages":"899","errorCount":5,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"900","usedDeprecatedRules":"893"},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"903","messages":"904","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"893"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"908","messages":"909","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"910","usedDeprecatedRules":"893"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"917","messages":"918","errorCount":10,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"919","usedDeprecatedRules":"890"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"924","messages":"925","errorCount":6,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"926","usedDeprecatedRules":"893"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"931","messages":"932","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"933","usedDeprecatedRules":"893"},{"filePath":"934","messages":"935","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"944","messages":"945","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946","usedDeprecatedRules":"893"},{"filePath":"947","messages":"948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"952","messages":"953","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"954","usedDeprecatedRules":"893"},{"filePath":"955","messages":"956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"961","messages":"962","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"967","messages":"968","errorCount":8,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"969","usedDeprecatedRules":"893"},{"filePath":"970","messages":"971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"976","messages":"977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"978","messages":"979","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"980","usedDeprecatedRules":"890"},{"filePath":"981","messages":"982","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"983","messages":"984","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"985","usedDeprecatedRules":"893"},{"filePath":"986","messages":"987","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"988","usedDeprecatedRules":"893"},{"filePath":"989","messages":"990","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"991","messages":"992","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"993","messages":"994","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"995","usedDeprecatedRules":"893"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1000","messages":"1001","errorCount":7,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1002","usedDeprecatedRules":"893"},{"filePath":"1003","messages":"1004","errorCount":24,"warningCount":0,"fixableErrorCount":24,"fixableWarningCount":0,"source":"1005","usedDeprecatedRules":"893"},{"filePath":"1006","messages":"1007","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1008","usedDeprecatedRules":"893"},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1021","messages":"1022","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1023","usedDeprecatedRules":"893"},{"filePath":"1024","messages":"1025","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1026","usedDeprecatedRules":"949"},{"filePath":"1027","messages":"1028","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1029","usedDeprecatedRules":"893"},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1032","messages":"1033","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1036","messages":"1037","errorCount":5,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"1038","usedDeprecatedRules":"893"},{"filePath":"1039","messages":"1040","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1041","usedDeprecatedRules":"890"},{"filePath":"1042","messages":"1043","errorCount":7,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"1044","usedDeprecatedRules":"893"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1047","messages":"1048","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1049","usedDeprecatedRules":"893"},{"filePath":"1050","messages":"1051","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1066","messages":"1067","errorCount":6,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"1068","usedDeprecatedRules":"893"},{"filePath":"1069","messages":"1070","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1071","usedDeprecatedRules":"893"},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1074","messages":"1075","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1076","messages":"1077","errorCount":12,"warningCount":0,"fixableErrorCount":12,"fixableWarningCount":0,"source":"1078","usedDeprecatedRules":"893"},{"filePath":"1079","messages":"1080","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1081","usedDeprecatedRules":"893"},{"filePath":"1082","messages":"1083","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1084","usedDeprecatedRules":"893"},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1089","messages":"1090","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1091","messages":"1092","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1093","usedDeprecatedRules":"893"},{"filePath":"1094","messages":"1095","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1096","usedDeprecatedRules":"893"},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1099","messages":"1100","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1101","usedDeprecatedRules":"893"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1114","messages":"1115","errorCount":24,"warningCount":0,"fixableErrorCount":24,"fixableWarningCount":0,"source":"1116","usedDeprecatedRules":"893"},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1119","messages":"1120","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1121","usedDeprecatedRules":"893"},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1128","messages":"1129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1130","messages":"1131","errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1132","usedDeprecatedRules":"893"},{"filePath":"1133","messages":"1134","errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1135","usedDeprecatedRules":"893"},{"filePath":"1136","messages":"1137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1144","messages":"1145","errorCount":7,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"1146","usedDeprecatedRules":"893"},{"filePath":"1147","messages":"1148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1149","messages":"1150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1151","messages":"1152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1153","messages":"1154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1155","messages":"1156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1157","messages":"1158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1159","messages":"1160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1161","messages":"1162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1163","messages":"1164","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1165","usedDeprecatedRules":"949"},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1176","messages":"1177","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1178","usedDeprecatedRules":"890"},{"filePath":"1179","messages":"1180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1181","messages":"1182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1183","messages":"1184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1185","messages":"1186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1191","messages":"1192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1193","messages":"1194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1197","messages":"1198","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1199","usedDeprecatedRules":"890"},{"filePath":"1200","messages":"1201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1202","messages":"1203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1206","messages":"1207","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1208","usedDeprecatedRules":"890"},{"filePath":"1209","messages":"1210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1211","messages":"1212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1213","messages":"1214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1215","messages":"1216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1217","messages":"1218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1221","messages":"1222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1223","messages":"1224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1225","messages":"1226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1227","messages":"1228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1229","messages":"1230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1231","messages":"1232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1233","messages":"1234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1235","messages":"1236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1237","messages":"1238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1239","messages":"1240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1241","messages":"1242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1243","messages":"1244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1247","messages":"1248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1249","messages":"1250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1259","messages":"1260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1263","messages":"1264","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1265","usedDeprecatedRules":"890"},{"filePath":"1266","messages":"1267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1268","messages":"1269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1270","messages":"1271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1272","messages":"1273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1274","messages":"1275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1276","messages":"1277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1278","messages":"1279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1280","messages":"1281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1282","messages":"1283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1284","messages":"1285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1286","messages":"1287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1288","messages":"1289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1290","messages":"1291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1292","messages":"1293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1294","messages":"1295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1296","messages":"1297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1298","messages":"1299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1302","messages":"1303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1304","messages":"1305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1306","messages":"1307","errorCount":81,"warningCount":0,"fixableErrorCount":81,"fixableWarningCount":0,"source":"1308","usedDeprecatedRules":"893"},{"filePath":"1309","messages":"1310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1311","messages":"1312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1313","messages":"1314","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1315","usedDeprecatedRules":"893"},{"filePath":"1316","messages":"1317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1318","messages":"1319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1320","messages":"1321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1322","messages":"1323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1326","messages":"1327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1328","messages":"1329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1330","messages":"1331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1332","messages":"1333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1334","messages":"1335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1336","messages":"1337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1338","messages":"1339","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1340","usedDeprecatedRules":"890"},{"filePath":"1341","messages":"1342","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1343","usedDeprecatedRules":"949"},{"filePath":"1344","messages":"1345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1346","messages":"1347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1348","messages":"1349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1350","messages":"1351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1352","messages":"1353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1354","messages":"1355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1356","messages":"1357","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1358","usedDeprecatedRules":"890"},{"filePath":"1359","messages":"1360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1361","messages":"1362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1363","messages":"1364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1365","messages":"1366","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1367","usedDeprecatedRules":"893"},{"filePath":"1368","messages":"1369","errorCount":18,"warningCount":0,"fixableErrorCount":18,"fixableWarningCount":0,"source":"1370","usedDeprecatedRules":"893"},{"filePath":"1371","messages":"1372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1373","messages":"1374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1375","messages":"1376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1377","messages":"1378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1379","messages":"1380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1381","messages":"1382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1383","messages":"1384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1385","messages":"1386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1387","messages":"1388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1389","messages":"1390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1391","messages":"1392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1393","messages":"1394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1395","messages":"1396","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1397","usedDeprecatedRules":"949"},{"filePath":"1398","messages":"1399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1400","messages":"1401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1402","messages":"1403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1404","messages":"1405","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1406","usedDeprecatedRules":"893"},{"filePath":"1407","messages":"1408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1409","messages":"1410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1411","messages":"1412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1413","messages":"1414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1415","messages":"1416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1417","messages":"1418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1419","messages":"1420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1421","messages":"1422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1423","messages":"1424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1425","messages":"1426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1427","messages":"1428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1429","messages":"1430","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1431","usedDeprecatedRules":"890"},{"filePath":"1432","messages":"1433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1434","messages":"1435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1436","messages":"1437","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1438","usedDeprecatedRules":"890"},{"filePath":"1439","messages":"1440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1441","messages":"1442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1443","messages":"1444","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1445","usedDeprecatedRules":"893"},{"filePath":"1446","messages":"1447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1448","messages":"1449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1450","messages":"1451","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1452","usedDeprecatedRules":"949"},{"filePath":"1453","messages":"1454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1455","messages":"1456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1457","messages":"1458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1459","messages":"1460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1461","messages":"1462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1463","messages":"1464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1465","messages":"1466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1467","messages":"1468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1469","messages":"1470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1471","messages":"1472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1473","messages":"1474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1475","messages":"1476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1477","messages":"1478","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1479","usedDeprecatedRules":"949"},{"filePath":"1480","messages":"1481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1482","messages":"1483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1484","messages":"1485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1486","messages":"1487","errorCount":11,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1488","usedDeprecatedRules":"890"},{"filePath":"1489","messages":"1490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1491","messages":"1492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1493","messages":"1494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1495","messages":"1496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1497","messages":"1498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1499","messages":"1500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1501","messages":"1502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1503","messages":"1504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1505","messages":"1506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1507","messages":"1508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1509","messages":"1510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1511","messages":"1512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1513","messages":"1514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1515","messages":"1516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1517","messages":"1518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1519","messages":"1520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1521","messages":"1522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1523","messages":"1524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1525","messages":"1526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1527","messages":"1528","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1529","usedDeprecatedRules":"890"},{"filePath":"1530","messages":"1531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1532","messages":"1533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1534","messages":"1535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1536","messages":"1537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1538","messages":"1539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1540","messages":"1541","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1542","usedDeprecatedRules":"949"},{"filePath":"1543","messages":"1544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1545","messages":"1546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1547","messages":"1548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1549","messages":"1550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1551","messages":"1552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1553","messages":"1554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1555","messages":"1556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1557","messages":"1558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1559","messages":"1560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1561","messages":"1562","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1563","usedDeprecatedRules":"890"},{"filePath":"1564","messages":"1565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1566","messages":"1567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1568","messages":"1569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1570","messages":"1571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1572","messages":"1573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1574","messages":"1575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1576","messages":"1577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1578","messages":"1579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1580","messages":"1581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1582","messages":"1583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1584","messages":"1585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1586","messages":"1587","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1588","usedDeprecatedRules":"949"},{"filePath":"1589","messages":"1590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1591","messages":"1592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1593","messages":"1594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1595","messages":"1596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1597","messages":"1598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1599","messages":"1600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1601","messages":"1602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1603","messages":"1604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1605","messages":"1606","errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1607","usedDeprecatedRules":"890"},{"filePath":"1608","messages":"1609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1610","messages":"1611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1612","messages":"1613","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1614","usedDeprecatedRules":"893"},{"filePath":"1615","messages":"1616","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1617","usedDeprecatedRules":"890"},{"filePath":"1618","messages":"1619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1620","messages":"1621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1622","messages":"1623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1624","messages":"1625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1626","messages":"1627","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1628","usedDeprecatedRules":"890"},{"filePath":"1629","messages":"1630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1631","messages":"1632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1633","messages":"1634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1635","messages":"1636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1637","messages":"1638","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1639","usedDeprecatedRules":"890"},{"filePath":"1640","messages":"1641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1642","messages":"1643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1644","messages":"1645","errorCount":6,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"1646","usedDeprecatedRules":"893"},{"filePath":"1647","messages":"1648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1649","messages":"1650","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1651","usedDeprecatedRules":"890"},{"filePath":"1652","messages":"1653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1654","messages":"1655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1656","messages":"1657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1658","messages":"1659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1660","messages":"1661","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1662","usedDeprecatedRules":"893"},{"filePath":"1663","messages":"1664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1665","messages":"1666","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1667","usedDeprecatedRules":"890"},{"filePath":"1668","messages":"1669","errorCount":6,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"1670","usedDeprecatedRules":"893"},{"filePath":"1671","messages":"1672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1673","messages":"1674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1675","messages":"1676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1677","messages":"1678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1679","messages":"1680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1681","messages":"1682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1683","messages":"1684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1685","messages":"1686","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1687","usedDeprecatedRules":"893"},{"filePath":"1688","messages":"1689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1690","messages":"1691","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1692","usedDeprecatedRules":"890"},{"filePath":"1693","messages":"1694","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1695","usedDeprecatedRules":"890"},{"filePath":"1696","messages":"1697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1698","messages":"1699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1700","messages":"1701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1702","messages":"1703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1704","messages":"1705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1706","messages":"1707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1708","messages":"1709","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1710","usedDeprecatedRules":"893"},{"filePath":"1711","messages":"1712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1713","messages":"1714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1715","messages":"1716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1717","messages":"1718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1719","messages":"1720","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1721","usedDeprecatedRules":"890"},{"filePath":"1722","messages":"1723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1724","messages":"1725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1726","messages":"1727","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1728","usedDeprecatedRules":"890"},{"filePath":"1729","messages":"1730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1731","messages":"1732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1733","messages":"1734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1735","messages":"1736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1737","messages":"1738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1739","messages":"1740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1741","messages":"1742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1743","messages":"1744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1745","messages":"1746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1747","messages":"1748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1749","messages":"1750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1751","messages":"1752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1753","messages":"1754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1755","messages":"1756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1757","messages":"1758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1759","messages":"1760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1761","messages":"1762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1763","messages":"1764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1765","messages":"1766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1767","messages":"1768","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1769","usedDeprecatedRules":"890"},{"filePath":"1770","messages":"1771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1772","messages":"1773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1774","messages":"1775","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1776","usedDeprecatedRules":"890"},{"filePath":"1777","messages":"1778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1779","messages":"1780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1781","messages":"1782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1783","messages":"1784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1785","messages":"1786","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1787","messages":"1788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1789","messages":"1790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1791","messages":"1792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1793","messages":"1794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1795","messages":"1796","errorCount":5,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"1797","usedDeprecatedRules":"893"},{"filePath":"1798","messages":"1799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1800","messages":"1801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1802","messages":"1803","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1804","usedDeprecatedRules":"949"},{"filePath":"1805","messages":"1806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1807","messages":"1808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1809","messages":"1810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1811","messages":"1812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1813","messages":"1814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1815","messages":"1816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1817","messages":"1818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1819","messages":"1820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1821","messages":"1822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1823","messages":"1824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1825","messages":"1826","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1827","usedDeprecatedRules":"893"},{"filePath":"1828","messages":"1829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1830","messages":"1831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1832","messages":"1833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1834","messages":"1835","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1836","usedDeprecatedRules":"890"},{"filePath":"1837","messages":"1838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1839","messages":"1840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1841","messages":"1842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1843","messages":"1844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1845","messages":"1846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"893"},{"filePath":"1847","messages":"1848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1849","messages":"1850","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1851","usedDeprecatedRules":"890"},{"filePath":"1852","messages":"1853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1854","messages":"1855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"949"},{"filePath":"1856","messages":"1857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"890"},{"filePath":"1858","messages":"1859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/index.tsx",[],["1860","1861"],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/constants.ts",[],["1862","1863"],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/auth_utils.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/app.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/axios_interceptor.ts",["1864","1865","1866","1867","1868"],"/* eslint-disable @typescript-eslint/promise-function-async */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable promise/prefer-await-to-then */\n/* eslint-disable promise/no-promise-in-callback */\nimport { AxiosError, AxiosRequestConfig, AxiosInstance, AxiosResponse } from 'axios'\nimport { NetworkError } from '../constants'\n/* eslint-disable max-lines-per-function */\n\nconst shouldIntercept = (error: AxiosError): boolean => {\n  try {\n    return error.response?.status === 401\n  } catch {\n    return false\n  }\n}\n\nconst attachTokenToRequest = (\n  request: AxiosRequestConfig,\n  token: string | undefined\n): void => {\n  if (token === undefined){\n    throw NetworkError.ERR_UNAUTHORIZED\n  }\n  request.headers.Authorization = `Bearer ${token}`\n}\n\nexport const applyInterceptor = (\n  axiosInstance: AxiosInstance,\n  handleTokenRefresh: () => Promise<string | undefined>\n): void => {\n  let isRefreshing: boolean = false\n  let failedQueue: { resolve: Function, reject: Function }[] = []\n\n  const options = {\n    attachTokenToRequest,\n    handleTokenRefresh,\n    shouldIntercept,\n  }\n  const processQueue = (error: any, token: string | undefined | null): void => {\n    failedQueue.forEach((prom: {\n      resolve: Function\n      reject: Function\n  }) => {\n      if (error) {\n        prom.reject(error)\n      } else {\n        prom.resolve(token)\n      }\n    })\n    failedQueue = []\n  }\n\n  const interceptor = async (error: any): Promise<AxiosResponse<any>> => {\n    if (!options.shouldIntercept(error)) {\n      return Promise.reject(error)\n    }\n\n    if (error.config._retry || error.config._queued) {\n      return Promise.reject(error)\n    }\n\n    const originalRequest = error.config\n\n    if (isRefreshing) {\n      return new Promise(function (resolve: (value?: unknown) => void, reject: (reason?: any) => void) {\n        failedQueue.push({resolve, reject})\n      }).then((token: unknown) => {\n        originalRequest._queued = true\n        options.attachTokenToRequest(originalRequest, <string> token)\n\n        return axiosInstance.request(originalRequest)\n      }).catch((_err: any) =>\n        Promise.reject(error)\n      )\n    }\n\n    originalRequest._retry = true\n    isRefreshing = true\n    try {\n      const tokenData: string | undefined = await options.handleTokenRefresh.call(options.handleTokenRefresh)\n\n      options.attachTokenToRequest(originalRequest, tokenData)\n      processQueue(null, tokenData)\n\n      return axiosInstance.request(originalRequest)\n    }\n    catch (err) {\n      processQueue(err, null)\n      throw err\n    }\n    finally {\n      isRefreshing = false\n    }\n  }\n\n  axiosInstance.interceptors.response.use(undefined, interceptor)\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/init.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/router_utils.ts",["1869"],"import { History } from 'history'\nimport { generateCodeChallenge } from '../components/auth'\nimport { ProfilePageTarget } from './interfaces'\nimport {\n  APP_PUBLIC_URL,\n  BASE_MESSAGES_URL,\n  CODE_CHALLENGE_METHOD,\n  WEB_CLIENT_LOGIN_URL,\n  CLIENT_ID,\n  REDIRECT_URI,\n  RESPONSE_TYPE_CODE,\n  SCOPE,\n} from '../constants'\nimport { GidName, LastVisitedFolderState } from '../store/interfaces'\nimport { MessagesType } from '../components/messages/interfaces'\nimport { deviceKeyManager } from '../init'\nimport { DeviceKeyPair } from '../services/device_key_manager/interfaces'\n\nexport const pushTo = (history: History, path: string): void => {\n  history.push(path)\n}\n\nexport const openInNewTab = (uri: string): void => {\n  window.open(uri, '_blank')\n}\n\nexport const redirectTo = (uri: string): void => {\n  window.location.href = uri\n}\n\nexport const redirectToLadningPage = (): void => {\n  redirectTo('/')\n}\n\nexport const prepareAndStoreAuthCredentials = async (): Promise<string> => {\n  const codeChallenge: string = await generateCodeChallenge()\n\n  const { publicKey }: DeviceKeyPair = await deviceKeyManager.generateKeyPair()\n\n  return (\n    `?client_id=${CLIENT_ID}` +\n    `&response_type=${RESPONSE_TYPE_CODE}` +\n    `&scope=${SCOPE}` +\n    `&redirect_uri=${REDIRECT_URI}` +\n    `&code_challenge=${codeChallenge}` +\n    `&code_challenge_method=${CODE_CHALLENGE_METHOD}` +\n    `&device_public_key=${window.encodeURIComponent(publicKey)}`\n  )\n}\n\nexport const redirectToLogin = async (): Promise<void> => {\n  const authParams: string = await prepareAndStoreAuthCredentials()\n\n  redirectTo(`${WEB_CLIENT_LOGIN_URL}${authParams}&login=true`)\n}\n\nexport const redirectToSignUp = async (): Promise<void> => {\n  const authParams: string = await prepareAndStoreAuthCredentials()\n\n  redirectTo(`${WEB_CLIENT_LOGIN_URL}${authParams}&login=false`)\n}\n\nexport const redirectToGroups = (): void => {\n  window.open('https://groups.global.id/', '_blank')\n}\n\nexport const getUrlParts = (url: string): string[] => {\n  const protoParts = url.split('://')\n  let uriWithoutProtocol = protoParts.length === 1 ? protoParts[0] : protoParts[1]\n\n  uriWithoutProtocol = removeConsecutiveSlashes(uriWithoutProtocol)\n  const uriParts = uriWithoutProtocol.split('/')\n\n  if (uriParts[0] === '') {\n    return uriParts.slice(1)\n  }\n\n  return uriParts\n}\n\nconst getAppropriateRegEx = (url: string): RegExp => {\n  const withProtocol = /([^:\\s])\\/+/g\n  const standalonePath = /([\\w\\s]|.?)\\/\\/+/g\n\n  return url.startsWith('/') ? standalonePath : withProtocol\n}\n\nconst removeConsecutiveSlashes = (url: string): string => {\n  const slashRegEx = getAppropriateRegEx(url)\n\n  const withoutTrailingSlashes = url.replace(slashRegEx, '$1/')\n\n  // Remove any trailing slash, even if there are parameters.\n  return withoutTrailingSlashes.replace(/\\/(\\?|&|#[^!]|$)/g, '$1')\n}\n\nexport const getBaseUrlFromEnv = (): string => APP_PUBLIC_URL ? `/${getUrlParts(APP_PUBLIC_URL).slice(1).join('/')}` : '/'\n\nexport const navigateToProfilePage = (\n  history: History,\n  gidName: GidName,\n  profilePageTarget?: ProfilePageTarget\n): void => {\n  const profileUri: string = `/${gidName}`\n\n  if (profilePageTarget === undefined || profilePageTarget === ProfilePageTarget.SELF) {\n    pushTo(history, profileUri)\n  } else {\n    window.open(profileUri, ProfilePageTarget.BLANK)\n  }\n}\n\nexport const navigateToChannelPage = (\n  history: History,\n  type: MessagesType,\n  channelId: string,\n): void => {\n  history.push(`${BASE_MESSAGES_URL}/${type}/${channelId}`)\n}\n\nexport const getUuidFromURL = (url: string): string | null => {\n  const reg: RegExp = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/g\n  const result: RegExpExecArray | null = reg.exec(url)\n\n  return result !== null ? result[0] : null\n}\n\nexport const getLastVisitedMessagesUrl = ({ folderType, groupUuid, channelId }: LastVisitedFolderState): string => (\n  `${BASE_MESSAGES_URL}/${folderType}${groupUuid ? `/${groupUuid}`: ''}${channelId ? `/${channelId}`: ''}`\n)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/general_utils.ts",["1870","1871","1872","1873"],"import { NetworkErrorType, MatchingStrings } from './interfaces'\nimport { differenceInMilliseconds, isAfter, addSeconds, isThisYear, format } from 'date-fns'\nimport { API_BASE_URL, NetworkError } from '../constants'\n\nimport data from '../assets/json/static_strings.json'\nimport { Dispatch, SetStateAction } from 'react'\nimport Jimp from 'jimp'\nimport _, { isEmpty, isNil } from 'lodash'\nimport { FileToken, PaginationMetaParams } from '@globalid/messaging-service-sdk'\nimport { ToastContent } from 'globalid-react-ui'\nimport { getArrayBuffer } from './file_reader_utils'\nimport axios, { CancelTokenSource, CancelTokenStatic, AxiosError } from 'axios'\n\nexport type StaticStringKey = keyof typeof data\n\nexport const asStringKey = (staticStringKey: string): StaticStringKey => <StaticStringKey> staticStringKey\n\nexport const getString = (key: StaticStringKey): string => {\n  if (key in data) {\n    return data[key]\n  }\n\n  return key\n}\n\nexport const getStringWithText = (key: StaticStringKey, matchingStrings: MatchingStrings[]): string => {\n  const re = new RegExp(\n    `{${matchingStrings.map((matchingString: MatchingStrings) => matchingString.match).join('}|{')}}`,\n    'gi',\n  )\n\n  return getString(key).replace(re, (matched: string) => (\n    matchingStrings.find((matchingString: MatchingStrings) => `{${matchingString.match}}` === matched)?.replace ?? ''\n  ))\n}\n\nexport const loadFile = async (file: File): Promise<string> => new Promise((resolve: Function, reject: Function) => {\n\n  const reader = new FileReader()\n\n  reader.readAsDataURL(file)\n\n  reader.onloadend = () => {\n    const base64data: string = <string>reader.result\n\n    resolve(base64data)\n  }\n\n  reader.onerror = () => {\n    reject()\n  }\n})\n\nexport const handleChangeState = <T> (\n  newState: Partial<T>,\n  setState: Dispatch<SetStateAction<T>>\n): void => {\n  setState((prev: T) => ({\n    ...prev,\n    ...newState,\n  }))\n}\n\nexport const getAvatarUrl = (uuid: string): string => `${API_BASE_URL}/v1/avatar/${uuid}`\n\nenum Compare {\n  GreaterThan = -1,\n  SmallerThan = 1,\n  None = 1\n}\n\nexport const sortByDateDesc\n  = (firstDateString?: string, secondDateString?: string): Compare => firstDateString && secondDateString ?\n    (differenceInMilliseconds(new Date(secondDateString), new Date(firstDateString)) < 0 ?\n      Compare.GreaterThan : Compare.SmallerThan)\n    : Compare.None\n\nexport const resizeImage = async (imageBase64: string, width: number, height: number): Promise<string> => {\n  const containsMime: boolean = imageBase64.includes('base64')\n\n  const dataString: string | undefined = containsMime ?\n    imageBase64.split(',').length > 1 ?\n      imageBase64.split(',')[1] : undefined\n    : imageBase64\n\n  if (!dataString) {\n    throw new Error(getString('image-data-format-error'))\n  }\n\n  const image = await Jimp.read(Buffer.from(dataString, 'base64'))\n\n  image.resize(width, height)\n\n  return image.getBase64Async('image/jpeg')\n}\n\nconst scaleToFitJimp = (jimpImage: Jimp, maxWidth: number, maxHeight: number): Jimp | undefined => {\n  const height: number = jimpImage.getHeight()\n  const width: number = jimpImage.getWidth()\n\n  if (height > maxHeight || width > maxWidth) {\n\n    return jimpImage.scaleToFit(\n      width > maxWidth ? maxWidth : width,\n      height > maxHeight ? maxHeight : height,\n    )\n  }\n}\n\nexport const scaleToFitImage = async (image: File, maxWidth: number, maxHeight: number): Promise<File> => {\n  const jimpImage: Jimp = await FileToJimp(image)\n\n  const scaledJimp: Jimp | undefined = scaleToFitJimp(jimpImage, maxWidth, maxHeight)\n\n  return scaledJimp ? JimpToFile(scaledJimp, image) : image\n}\n\nexport const cropAndScaleImage = async (image: File, imageSize: number): Promise<File> => {\n  let jimpImage: Jimp = await FileToJimp(image)\n\n  const height: number = jimpImage.getHeight()\n  const width: number = jimpImage.getWidth()\n\n  if (height !== width) {\n    const shorterSideLength: number = height > width ? width : height\n\n    jimpImage = jimpImage.crop(0, 0, shorterSideLength, shorterSideLength)\n  }\n\n  const processedJimp: Jimp = scaleToFitJimp(jimpImage, imageSize, imageSize) ?? jimpImage\n\n  return JimpToFile(processedJimp, image)\n}\n\nexport const setConsentUuid = (consent: string): void => {\n  localStorage.setItem('consent', consent)\n}\n\nexport const getConsentUuid = (): string | null => (\n  localStorage.getItem('consent')\n)\n\nexport const removeConsentUuid = (): void => {\n  localStorage.removeItem('consent')\n}\n\nexport const hasExpired = (date?: string): boolean => {\n  if (date === undefined) {\n    return false\n  }\n\n  return isAfter(addSeconds(Date.now(), 30), new Date(date))\n}\n\nexport const getImageFromAws = (url: string, fileToken: FileToken): string => {\n  const keyPairId: string = fileToken.token['CloudFront-Key-Pair-Id']\n  const policy: string = fileToken.token['CloudFront-Policy']\n  const signature: string = fileToken.token['CloudFront-Signature']\n\n  return `${url}?Key-Pair-Id=${keyPairId}&Policy=${policy}&Signature=${signature}`\n}\n\nexport const areArraysEqual\n  = <T> (arr1: Array<T>, arr2: Array<T>): boolean => (arr1.length === arr2.length) && _.xor(arr1, arr2).length === 0\n\nexport const addToCurrentTime = (secondsToAdd: number): number => {\n  const expiresAtDate: Date = addToCurrentDate(secondsToAdd)\n\n  return expiresAtDate.getTime()\n}\n\nexport const getPrettyTimestamp = (timestamp: string): string => {\n  const timestampFormat: string = isThisYear(new Date(timestamp)) ?\n    'MMMM d, h:mm aaaaa'\n    :\n    'MMMM d y, h:mm aaaaa'\n\n  return `${format(new Date(timestamp), timestampFormat)}m`\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isNetworkErrorType = (value: NetworkErrorType | undefined | any): value is NetworkErrorType => !isNil(value) && Object.getOwnPropertyNames(value).includes('error_id')\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isAxiosError = (value: AxiosError | Error | undefined | any): value is AxiosError => !isNil(value) && Object.getOwnPropertyNames(value).includes('isAxiosError') && value.isAxiosError === true\n\nconst networkErrorExceptionMap = new Map<NetworkError, ToastContent>([\n  [NetworkError.ERR_CHANNEL_BLOCKED, {\n    title: getString('sending-failed'),\n    message: getString('blocked-user-send-error'),\n  }],\n  [NetworkError.DEFAULT, { title: getString('sending-failed'), message: getString('something-went-wrong') }],\n])\n\nexport const getToastContentForNetworkException\n  = (networkError: NetworkError): ToastContent =>\n    networkErrorExceptionMap.get(networkError) ?? <ToastContent> networkErrorExceptionMap.get(NetworkError.DEFAULT)\n\nconst JimpToFile = async (jimpImage: Jimp, image: File): Promise<File> => {\n  const imageBuffer: Buffer = await jimpImage.getBufferAsync(image.type)\n\n  return new File([imageBuffer], image.name, { type: image.type })\n}\n\nconst FileToJimp = async (image: File): Promise<Jimp> => {\n  const buffer: ArrayBuffer = await getArrayBuffer(image)\n  const jimpImage: Jimp = await Jimp.read(Buffer.from(buffer))\n\n  return jimpImage\n}\n\nexport const toDataURL = async (\n  url: string\n): Promise<string | ArrayBuffer | null> =>\n  new Promise<string | ArrayBuffer | null>((resolve: Function, reject: Function): void => {\n    const xhr = new XMLHttpRequest()\n\n    xhr.open('get', url)\n    xhr.responseType = 'blob'\n    xhr.onload = function (): void {\n      const fr = new FileReader()\n\n      fr.onload = function (): void {\n        resolve(this.result)\n      }\n      fr.onerror = (ev: ProgressEvent<FileReader>): void => {\n        reject(ev)\n      }\n      fr.readAsDataURL(xhr.response)\n    }\n    xhr.onerror = (ev: ProgressEvent<EventTarget>): void => {\n      reject(ev)\n    }\n\n    xhr.send()\n  })\n\nexport const addToCurrentDate = (secondsToAdd: number): Date => {\n  const currentTime: Date = new Date()\n\n  const expiresAtDate: Date = new Date(currentTime.getTime() + (secondsToAdd * 1000))\n\n  return expiresAtDate\n}\n\nexport const getAllCookies = (cname: string): string[] => {\n  const name: string = `${cname}=`\n  const cookieStrings: string[] = document.cookie.split(';')\n  const cookieValues: string []\n    = cookieStrings.reduce<string[]>((array: string[], cookieString: string) => {\n      const trimmed: string = cookieString.trimStart()\n\n      if (trimmed.startsWith(name)) {\n        return [...array, trimmed.slice(name.length, trimmed.length)]\n      }\n\n      return array\n    }, [])\n\n  return cookieValues\n}\n\nexport const getCancelTokenSource = (): CancelTokenSource => {\n  const cancelToken: CancelTokenStatic = axios.CancelToken\n\n  return cancelToken.source()\n}\n\nexport const defaultOnAxiosError = (error: Error): void => {\n  if (!axios.isCancel(error)) {\n    throw error\n  }\n}\n\nexport const executeCancellabeAxiosCallback = async <T = void> (\n  callback: () => Promise<T>,\n  onError: (error: Error) => void = defaultOnAxiosError\n): Promise<void> => {\n  try {\n    await callback()\n  } catch (error) {\n    onError(error)\n  }\n}\n\nexport const validateObjectKeys = <T> (value: T, whitelistedKeys: string[]): void => {\n  Object.keys(value).forEach((key: string) => {\n    if (!whitelistedKeys.includes(key)) {\n      throw new Error('ERR_WRONG_PARSED_CONTENT')\n    }\n  })\n}\n\nexport const handleAddItemMetaUpdate = (\n  meta: PaginationMetaParams,\n  perPageDefault: number\n): PaginationMetaParams => {\n  const pageLimit: number | undefined = meta.page !== undefined\n    ? meta.page * (meta.per_page ?? perPageDefault)\n    : undefined\n\n  const newTotal: number = meta.total + 1\n\n  const isOnNewPage: boolean = pageLimit !== undefined\n    ? pageLimit < newTotal\n    : false\n\n  const newPage: number | undefined = isOnNewPage && meta.page !== undefined\n    ? meta.page + 1\n    : meta.page\n\n  return {\n    page: newPage ?? 1,\n    per_page: meta.per_page,\n    total: newTotal,\n  }\n}\n\nexport const hasParsedText = (text?: string | null): text is string => !isNil(text) && !isEmpty(text.trim())\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/identity_slice.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/authentication_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/game_quiz_dialog/game_quiz_dialog.tsx",["1874","1875","1876","1877","1878","1879","1880","1881","1882","1883"],"import { Button } from '@material-ui/core'\nimport { TextInput, Checkbox, PrimaryButton, ButtonState, updateMultipleValidators, partiallyUpdateValueObject } from 'globalid-react-ui'\nimport { isEmpty } from 'lodash'\nimport React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport styled from 'styled-components'\nimport { CreateAnswerDto, createGame, CreateGameDto, CreateQuestionDto } from '../../../../services/api/game_api'\nimport { closeGameForm } from '../../../../store/ui_slice'\nimport { CustomFieldDefinition } from '../../../interfaces'\nimport { CheckboxOffIcon, CheckboxOnIcon } from '../../icons'\nimport { FormDialog } from '../form_dialog'\nimport { submitGameForm } from './helper'\nimport { useStyles } from './styles'\n\nconst quiz: CustomFieldDefinition<{}> = {\n  question_0: ['is_required'],\n  option_0_0: [],\n  option_0_1: [],\n  option_0_2: [],\n  check_0_0: [],\n  check_0_1: [],\n  check_0_2: [],\n}\n\nconst Option = styled.div`\n  margin-left: 16px;\n  margin-top: 24px;\n  display: flex;\n\n  .MuiFormControl-root {\n    width: 100%;\n  }\n`\n\ninterface QuizFormQuestionSectionProps {\n  questionNumber: number\n}\n\ninterface QuizFormAnswersSectionProps {\n  questionNumber: number\n  answerNumber: number\n  numberOfAnswers: number\n}\n\nconst range = (length: number): number[] => Array.from({ length }, (_, i: number) => i)\n\ninterface QuestionState {\n  numberOfAnswers: number\n}\n\ninterface QuestionsState {\n  [key: number]: QuestionState | undefined\n}\n\nexport const GameQuizDialog: React.FC = () => {\n  const formOpen = useSelector((root: RootState) => root.ui.gameFormOpen)\n  const dispatch = useDispatch()\n  const classes = useStyles()\n  const entries = Object.entries(formOpen)\n  const isFormOpen = !isEmpty(entries)\n\n  const formId: string = 'quiz-form'\n  const channelId: string = isFormOpen ? entries[0][0]: ''\n  const channel = useSelector((root: RootState) => root.channels.channels[channelId]?.channel)\n\n  const [numberOfQuestions, setNumberOfQuestions] = useState<number>(1)\n\n  const addQuestion = () => {\n    const nextQuestionNumber: number = numberOfQuestions\n\n    const validators = range(3).reduce((o: object, answerNumber: number) => {\n      const optionKey: string = `option_${nextQuestionNumber}_${answerNumber}`\n      const checkboxKey: string = `check_${nextQuestionNumber}_${answerNumber}`\n\n      partiallyUpdateValueObject(formId, optionKey, {\n        failed_validators: [],\n        has_changed: false,\n        messages: [],\n        value: '',\n      })\n      partiallyUpdateValueObject(formId, checkboxKey, {\n        failed_validators: [],\n        has_changed: false,\n        messages: [],\n        value: false,\n      })\n\n      return {\n        ...o,\n        [optionKey]: [],\n        [checkboxKey]: [],\n      }\n    }, {})\n\n    const questionKey: string = `question_${nextQuestionNumber}`\n\n    updateMultipleValidators(formId, {\n      ...validators,\n      [questionKey]: ['is_required'],\n    })\n\n    partiallyUpdateValueObject(formId, questionKey, {\n      failed_validators: [],\n      has_changed: false,\n      messages: [],\n      value: '',\n    })\n\n    setNumberOfQuestions((prev: number) => prev + 1)\n  }\n\n  const getQuizFormQuestionSection = ({\n    questionNumber,\n  }: QuizFormQuestionSectionProps): JSX.Element => {\n\n    const getAnswers = () => range(3).map((i: number) => <Option key={`${questionNumber}_${i}`}>\n      <Checkbox\n        fieldId={`check_${questionNumber}_${i}`}\n        checkedIcon={<CheckboxOnIcon/>}\n        icon={<CheckboxOffIcon/>}\n      />\n      <TextInput\n        fieldId={`option_${questionNumber}_${i}`}\n        label={`${i + 1}. Option`}\n      />\n    </Option>)\n\n    return <>\n      <TextInput\n        className={questionNumber !== 0 ? classes.question: ''}\n        fieldId={`question_${questionNumber}`}\n        label={`${questionNumber+1}. Question`}\n        fullWidth\n      />\n      {getAnswers()}\n    </>\n  }\n\n  return <FormDialog\n    className={classes.quiz}\n    title={'Quiz Setup'}\n    formSubtitle={'Setup your question and answers for the hackathon quiz!'}\n    formId={formId}\n    open={isFormOpen}\n    onFormSubmit={submitGameForm(channel, dispatch)}\n    fieldDefinition={quiz}\n    onExit={() => dispatch(closeGameForm())}\n    fullScreenOnMobile={true}\n  >\n    {range(numberOfQuestions).map((questionNumber: number) => getQuizFormQuestionSection({ questionNumber }))}\n    <Button\n      onClick={() => addQuestion()}\n    >\n      Add question\n    </Button>\n  </FormDialog>\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/initialize/initialize.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/file_reader_utils.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/device_key_manager/device_key_manager.ts",["1884","1885","1886","1887","1888","1889"],"import PQueue from 'p-queue'\nimport { PENDING_DEVICE_ID } from './../../constants'\n/* eslint-disable no-restricted-syntax */\nimport {\n  ChannelSecret,\n  ParticipantChannelDeviceSecret,\n  MessageTemplateEncryptedText,\n} from '@globalid/messaging-service-sdk'\nimport {\n  setDeviceKey,\n  getDeviceKey,\n  DeviceStoreData,\n  clearDeviceKey,\n  KeyStatus,\n  enableEncryptionDBData,\n  getDeviceId, setDeviceId, clearDeviceId,\n} from '../index_db'\nimport {\n  toUnextractable,\n  hexToBytes,\n  importChannelSecret,\n  randomBytes,\n  bytesToHex,\n  bytesToBase64,\n  getDecodedData,\n  encryptRSAWithPublicKey,\n} from './helpers'\nimport {\n  AES_SECRET_SIZE,\n  RSA_OAEP_ALGORITHM,\n  AES_CBC_ALGORITHM,\n  AES_CBC_ALGORITHM_WITH_LENGTH,\n  AES_CBC_LENGTH, BASE64_ENCODING,\n  UTF8_ENCODING,\n  RSA_KEY_SIZE,\n} from '../../constants'\nimport { DevicesInfoResponse as DeviceInfo, MyDevicesInfoResponse } from '@globalid/keystore-service-sdk'\nimport { DeviceKeyPair, IDeviceKeyManager, DeviceKeyManagerErrors } from './interfaces'\nimport { rsa, util } from 'globalid-crypto'\n\nconst subtleCrypto: SubtleCrypto = window.crypto.subtle\n\nconst DEVICE_ID_KEY: string = 'deviceId'\n\nexport class DeviceKeyManager implements IDeviceKeyManager {\n\n  private deviceId: string | undefined\n  private isInitialized: boolean = false\n  private queue: PQueue\n\n  constructor (){\n    this.queue = new PQueue({ concurrency: 1 })\n  }\n\n  init = async (): Promise<void> => {\n    const deviceId: string | undefined = await getDeviceId(DEVICE_ID_KEY)\n\n    this.setDeviceId(deviceId)\n    this.setIsInitialized()\n  }\n\n  generateKeyPair = async (): Promise<DeviceKeyPair> => this.queue.add(async () => {\n    try {\n      if (!this.isInitialized){\n        await this.init()\n      }\n\n      if (this.deviceId){\n        const keyPair: DeviceStoreData | undefined = await getDeviceKey(this.deviceId)\n\n        if (keyPair){\n          return keyPair\n        }\n      }\n\n      const { publicKey, privateKey } = await rsa.generateKeyPair(RSA_KEY_SIZE)\n\n      const unextractablePrivateKey: CryptoKey = await toUnextractable(privateKey)\n\n      await this.storeKey(PENDING_DEVICE_ID, unextractablePrivateKey, publicKey)\n\n      return {\n        privateKey: unextractablePrivateKey,\n        publicKey: publicKey,\n      }\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_GENERATE_KEY_PAIR_FAILURE)\n    }\n  })\n\n  encryptChannelSecret = async (\n    channelSecret: string,\n    keyPairUuid: string,\n    messagingPublicKey: string\n  ): Promise<ChannelSecret> => {\n    try {\n      const encrypted_secret: string = await encryptRSAWithPublicKey(messagingPublicKey, channelSecret)\n\n      return {\n        encrypted_secret,\n        header: {\n          alg: RSA_OAEP_ALGORITHM,\n          kid: keyPairUuid,\n        },\n      }\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_CHANNEL_SECRET_ENCRYPT_FAILURE)\n    }\n  }\n\n  decryptChannelSecret = async (encryptedChannelSecret: string): Promise<string> => {\n    try {\n      const cryptoKey: CryptoKey = await this.getDevicePrivateKey()\n      const decrypted: ArrayBuffer = await subtleCrypto.decrypt(\n        {\n          name: RSA_OAEP_ALGORITHM,\n        },\n        cryptoKey,\n        util.base64StringToArrayBuffer(encryptedChannelSecret)\n      )\n\n      return util.bufferToString(decrypted)\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_CHANNEL_SECRET_DECRYPT_FAILURE)\n    }\n  }\n\n  encrypt = async (encryptedChannelSecret: string, content: string): Promise<MessageTemplateEncryptedText> => {\n    try {\n      const encodedContent: ArrayBuffer = Buffer.from(content, UTF8_ENCODING)\n\n      const channelSecret: string = await this.decryptChannelSecret(encryptedChannelSecret)\n      const channelSecretKey: CryptoKey = await importChannelSecret(channelSecret)\n\n      const iv: Uint8Array = window.crypto.getRandomValues(new Uint8Array(16))\n\n      const ciphertextBuffer: ArrayBuffer = await subtleCrypto.encrypt(\n        {\n          name: AES_CBC_ALGORITHM,\n          length: AES_CBC_LENGTH,\n          iv,\n        },\n        channelSecretKey,\n        encodedContent\n      )\n\n      const ciphertext: string = bytesToBase64(ciphertextBuffer)\n\n      return {\n        ciphertext,\n        encryption_header: {\n          enc: AES_CBC_ALGORITHM_WITH_LENGTH,\n          iv: bytesToHex(iv),\n        },\n      }\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_ENCRYPT_FAILURE)\n    }\n  }\n\n  decrypt = async (encryptedChannelSecret: string, encryptedContent: MessageTemplateEncryptedText): Promise<string> => {\n    try {\n      const encodedEncryptedContent: ArrayBuffer = Buffer.from(encryptedContent.ciphertext, BASE64_ENCODING)\n\n      const channelSecret: string = await this.decryptChannelSecret(encryptedChannelSecret)\n      const channelSecretKey: CryptoKey = await importChannelSecret(channelSecret)\n\n      const decodedTextBuffer: ArrayBuffer = await subtleCrypto.decrypt(\n        {\n          name: AES_CBC_ALGORITHM,\n          iv: hexToBytes(encryptedContent.encryption_header.iv),\n        },\n        channelSecretKey,\n        encodedEncryptedContent\n      )\n\n      const decodedText: string = getDecodedData(decodedTextBuffer)\n\n      return decodedText\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DECRYPT_FAILURE)\n    }\n  }\n\n  getDevicePrivateKey = async (): Promise<CryptoKey> => {\n    if (this.deviceId === undefined) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DEVICE_NOT_E2E_ENABLED)\n    }\n\n    try {\n      const deviceStoreData: DeviceStoreData = <DeviceStoreData> await getDeviceKey(this.deviceId)\n\n      return deviceStoreData.privateKey\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DEVICE_PRIVATE_KEY_NOT_FOUND)\n    }\n  }\n\n  storeKey = async (deviceId: string, privateKey: CryptoKey, publicKey: string): Promise<void> => {\n    try {\n      await setDeviceKey(deviceId, {\n        privateKey,\n        publicKey,\n        encryption: KeyStatus.DISABLED,\n      })\n\n      await setDeviceId(DEVICE_ID_KEY, deviceId)\n\n      this.setDeviceId(deviceId)\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_STORE_DEVICE_PRIVATE_KEY_FAILURE)\n    }\n  }\n\n  enableEncryption = async (): Promise<void> => {\n    if (this.deviceId === undefined) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DEVICE_NOT_E2E_ENABLED)\n    }\n\n    try {\n      await enableEncryptionDBData(this.deviceId)\n\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DEVICE_PRIVATE_KEY_NOT_FOUND)\n    }\n  }\n\n  isEncryptionEnabled = async (devices: MyDevicesInfoResponse[]): Promise<boolean> => {\n    if (this.deviceId === undefined) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DEVICE_NOT_E2E_ENABLED)\n    }\n\n    try {\n      const deviceStoreData: DeviceStoreData = <DeviceStoreData> await getDeviceKey(this.deviceId)\n\n      const encryptionStatusEnabled: boolean = deviceStoreData.encryption === KeyStatus.ENABLED &&\n        devices.some((device: MyDevicesInfoResponse) => device.device_id === this.deviceId)\n\n      return encryptionStatusEnabled\n    } catch (error) {\n      throw new Error(DeviceKeyManagerErrors.ERR_DEVICE_PRIVATE_KEY_NOT_FOUND)\n    }\n  }\n\n  flush = async (): Promise<void> => {\n    await clearDeviceKey()\n    await clearDeviceId()\n    this.setDeviceId(undefined)\n  }\n\n  generateRandomSecret = (): string => (\n    bytesToHex(randomBytes(AES_SECRET_SIZE))\n  )\n\n  prepareSecrets = async (keys: DeviceInfo[]): Promise<ParticipantChannelDeviceSecret[]> => {\n\n    const channelSecret: string = this.generateRandomSecret()\n\n    const secrets: ParticipantChannelDeviceSecret[] = await Promise.all(\n      keys.map(async (key: DeviceInfo): Promise<ParticipantChannelDeviceSecret> => {\n        if (key.messaging_keys.algorithm_type !== 'rsa') {\n          throw new Error(DeviceKeyManagerErrors.ERR_PARTICIPANTS_MISSING_E2E_ENCRYPTION)\n        }\n        const encryptedChannelSecret: ChannelSecret = await this.encryptChannelSecret(\n          channelSecret,\n          key.messaging_keys.key_id,\n          key.messaging_keys.public_key\n        )\n\n        return {\n          gid_uuid: key.gid_uuid,\n          device_id: key.device_id,\n          secret: encryptedChannelSecret,\n        }\n      })\n    )\n\n    if (secrets.length !== keys.length) {\n      throw new Error(DeviceKeyManagerErrors.ERR_PARTICIPANTS_MISSING_E2E_ENCRYPTION)\n    }\n\n    return secrets\n  }\n\n  private setDeviceId = (deviceId: string | undefined): void => {\n    this.deviceId = deviceId\n  }\n\n  getDeviceId = (): string | undefined => this.deviceId\n\n  private setIsInitialized = (): void => {\n    this.isInitialized = true\n  }\n\n  getInitialized = (): boolean => this.isInitialized\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/helpers.ts",["1890","1891","1892","1893"],"import { getCodeVerifier } from './../../utils/auth_utils'\nimport { isAxiosError } from './../../utils/general_utils'\nimport { util } from 'globalid-crypto'\nimport { FetchBlockedUsersParameters } from './../../store/interfaces'\nimport { BlockedUsersWithPaginationMeta } from '@globalid/messaging-service-sdk'\nimport { deviceKeyManager } from '../../init'\nimport { store } from './../../store/store'\nimport {\n  getAccessToken,\n  getExpiredAt,\n  getVisited,\n  setCodeVerifier,\n  rotateToken,\n  getRefreshToken,\n  setAccessToken,\n  setExpiresAt,\n  setRefreshToken,\n  cleanupPKCECookies,\n  pushTo,\n  removeConsentUuid,\n  signOut,\n  setVisited,\n} from '../../utils'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { getMyIdentity } from '../../services/api'\nimport { RedirectOnSignOut } from '../../utils/interfaces'\nimport { setHasVisited, setLoggedIn } from '../../store/identity_slice'\nimport { fetchBlockedUsers } from '../../store/messaging_slice'\nimport { createHash, Hash } from 'crypto'\nimport { AsyncThunkAction } from '@reduxjs/toolkit'\nimport PQueue from 'p-queue'\nimport { AccessTokenResponse } from '../../services/api/interfaces'\nimport { fetchAccessToken } from '../../services/api/authentication_api'\nimport { History } from 'history'\nimport { PENDING_DEVICE_ID } from '../../constants'\nimport { DeviceStoreData, getDeviceKey } from '../../services/index_db'\nimport { initializeDeviceKeyManager } from '../messages/helpers'\nimport { AuthQueryParams } from './interfaces'\nimport { isCurrentDeviceMine } from '../../utils/device_helpers'\n\nexport const TOKEN_REGEX: RegExp = /token=(.*)/\nexport const AUTHORIZATION_CODE_REGEX: RegExp = /code=(.*)/\nexport const DEVICE_ID_REGEX: RegExp = /device_id=(.*)/\nexport const EXPIRES_IN_REGEX: RegExp = /expires_in=(.*)/\nexport const MEETING_ID_REGEX: RegExp = /\\/call\\/(.*)/\n\nexport interface TokenData {\n  token: string\n  expiresIn: number\n}\n\nexport const getTokenDataFromHash = (hash: string): TokenData | null => {\n  const paramArray = hash.replace(/#/, '').split(/&/)\n\n  const queryParams: RegExp[] = [TOKEN_REGEX, EXPIRES_IN_REGEX]\n\n  const [token, expiresIn] = queryParams.map((regex: RegExp) => {\n    const paramMatch: string | undefined = paramArray.find((param: string) => regex.test(param))\n\n    if (paramMatch === undefined) {\n      return undefined\n    }\n\n    return paramMatch.replace(regex, (_match: string, capture: string) => capture)\n  })\n\n  if (token === undefined || expiresIn === undefined) {\n    return null\n  }\n\n  return {\n    token,\n    expiresIn: Number(expiresIn),\n  }\n}\n\nlet isRefresing: boolean = false\n\nconst queue = new PQueue({ concurrency: 1 })\n\nconst tryToRotateToken = async (): Promise<boolean> => {\n  try {\n    isRefresing = true\n    const newAccessToken: string | undefined = await rotateToken()\n\n    return newAccessToken !== undefined\n  } catch {\n    return false\n  } finally {\n    isRefresing = false\n  }\n}\n\nexport const validateToken = async (forceRefresh?: boolean): Promise<boolean> => {\n  const validateTokenRegex: RegExp = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/\n\n  const refresh_token: string | null = getRefreshToken()\n  const accessToken: string | null = getAccessToken()\n  const expiredAt: number | null = getExpiredAt()\n\n  if ((accessToken === null || expiredAt === null) && refresh_token === null) {\n    return false\n  }\n\n  const expired: boolean = expiredAt ? new Date().getTime() > expiredAt : true\n  const isValidToken: boolean = accessToken ? validateTokenRegex.test(accessToken) && !expired : false\n\n  if (isRefresing) {\n    return queue.add(async () => Promise.resolve(true))\n  }\n\n  if (!isValidToken || forceRefresh) {\n    return queue.add(tryToRotateToken)\n  }\n\n  return isValidToken\n}\n\nexport const handleAuthentication = async (\n  redirect: RedirectOnSignOut,\n  identity?: PublicIdentity\n): Promise<PublicIdentity | undefined> => {\n  await getValidToken()\n\n  if (identity === undefined) {\n    return retrieveMyIdentity(redirect)\n  }\n}\n\nexport const loadIdentity = async (identity?: PublicIdentity | undefined): Promise<PublicIdentity | undefined> => {\n\n  const hasValidToken: boolean = await validateToken()\n\n  if (hasValidToken && identity === undefined) {\n    store.dispatch(setLoggedIn())\n\n    return retrieveMyIdentity()\n  }\n}\n\nexport const resolveIdentityAndRedirect = async (\n  history: History\n): Promise<void> => {\n  const identity: PublicIdentity | undefined = await handleAuthentication(RedirectOnSignOut.LOGIN)\n\n  if (identity !== undefined) {\n    await handleIdentityVisit(identity)\n    cleanupPKCECookies()\n    pushTo(history, '/app/messages')\n  }\n}\n\nexport const registerDeviceId = async (deviceId: string | undefined): Promise<void> => {\n  await initializeDeviceKeyManager()\n  const currentDeviceId: string | undefined = deviceKeyManager.getDeviceId()\n\n  if (deviceId !== undefined && currentDeviceId === PENDING_DEVICE_ID) {\n    const pendingDeviceStoreData: DeviceStoreData | undefined = await getDeviceKey(PENDING_DEVICE_ID)\n\n    if (pendingDeviceStoreData !== undefined) {\n      await deviceKeyManager.flush()\n\n      await deviceKeyManager.storeKey(deviceId, pendingDeviceStoreData.privateKey, pendingDeviceStoreData.publicKey)\n      await deviceKeyManager.enableEncryption()\n    }\n  }\n}\n\nexport const validateCredentials = async (\n  authorizationCode: string | undefined,\n  codeVerifier: string | undefined,\n): Promise<boolean> => {\n\n  const hasValidToken: boolean = await validateToken(true)\n\n  if (hasValidToken) {\n    return true\n  }\n  if (codeVerifier && authorizationCode !== undefined) {\n    try {\n      await initializeTokens(codeVerifier, authorizationCode)\n\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  return false\n}\n\nexport const retrieveMyIdentity = async (\n  redirect?: RedirectOnSignOut\n): Promise<PublicIdentity | undefined> => {\n  try {\n    const myIdentity: PublicIdentity = await getMyIdentity()\n\n    store.dispatch<AsyncThunkAction<BlockedUsersWithPaginationMeta, FetchBlockedUsersParameters | undefined, {}>>\n    (fetchBlockedUsers())\n\n    return myIdentity\n  } catch (error) {\n    if (isAxiosError(error) && (\n      error.response?.status === 400 ||\n      error.response?.status === 401\n    )) {\n      await signOut(store.dispatch, redirect)\n    }\n  }\n}\n\nexport const handleIdentityVisit = async (identity: PublicIdentity): Promise<void> => {\n  const gidNameHash: string = getIdentityHash(identity)\n\n  if (!isVisitStored(gidNameHash)) {\n    setVisited(gidNameHash)\n    store.dispatch(setHasVisited(false))\n    removeConsentUuid()\n\n    if (!await isCurrentDeviceMine(deviceKeyManager.getDeviceId())) {\n      await deviceKeyManager.flush()\n    }\n  }\n}\n\nconst getIdentityHash = (identity: PublicIdentity): string => {\n  const hash: Hash = createHash('sha256')\n\n  return hash.update(identity.gid_name).digest('hex')\n}\n\nconst isVisitStored = (identityHash: string): boolean => {\n  const visited: string | null = getVisited()\n\n  return visited === identityHash\n}\n\nconst generateCodeVerifier = async (): Promise<string> => {\n  const codeVerifier: Buffer = Buffer.from(await util.randomBytes(32))\n  const codeVerifierBase64: string = base64URLEncode(codeVerifier)\n\n  setCodeVerifier(codeVerifierBase64)\n\n  return codeVerifierBase64\n}\n\nexport const sha256 = (challengeCode: string): Buffer => createHash('sha256')\n  .update(challengeCode)\n  .digest()\n\nconst base64URLEncode = (str: Buffer): string => str.toString('base64')\n  .replace(/\\+/g, '-')\n  .replace(/\\//g, '_')\n  .replace(/=/g, '')\n\nexport const generateCodeChallenge = async (): Promise<string> => {\n  const codeVerifier: string = getCodeVerifier() ?? await generateCodeVerifier()\n\n  const codeChallenge: string = base64URLEncode(sha256(codeVerifier))\n\n  return codeChallenge\n}\n\nexport const getAuthCodeAndDeviceIdFromQueryParameter = (queryParameters: string): AuthQueryParams | null => {\n  const paramArray = queryParameters.replace('?', '').split(/&/)\n\n  const queryParams: RegExp[] = [AUTHORIZATION_CODE_REGEX, DEVICE_ID_REGEX]\n\n  const [authorizationCode, deviceId] = queryParams.map((regex: RegExp) => {\n    const paramMatch: string | undefined = paramArray.find((param: string) => regex.test(param))\n\n    if (paramMatch === undefined) {\n      return undefined\n    }\n\n    return paramMatch.replace(regex, (_match: string, capture: string) => capture)\n  })\n\n  if (authorizationCode === undefined) {\n    return null\n  }\n\n  return {\n    authorizationCode,\n    deviceId,\n  }\n}\n\nexport const getValidToken = async (): Promise<string> => {\n  const isValidToken: boolean = await validateToken()\n\n  if (isValidToken) {\n    const token: string | null = getAccessToken()\n\n    if (token !== null) {\n      return token\n    }\n  }\n  await signOut(store.dispatch, RedirectOnSignOut.LOGIN)\n\n  return ''\n}\n\nexport const initializeTokens = async (\n  codeVerifier: string,\n  authorizationCode: string\n): Promise<void> => {\n  const tokenData: AccessTokenResponse | undefined = await fetchAccessToken(codeVerifier, authorizationCode)\n\n  const currentToken: string | null = getAccessToken()\n\n  if (tokenData !== undefined && tokenData.access_token !== currentToken) {\n    setAccessToken(tokenData.access_token)\n    setExpiresAt(tokenData.expires_in)\n    setRefreshToken(tokenData.refresh_token)\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/routes/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/assets/themes/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/ui_slice.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/game_quiz_dialog/helper.ts",["1894","1895"],"import { ThunkDispatch } from 'RootType'\nimport { ChannelWithParticipantsAndParsedMessage } from './../../../../store/interfaces'\nimport { InternalFormData, OnSubmit, setToastError, setToastSuccess } from 'globalid-react-ui'\nimport { CreateQuestionDto, CreateAnswerDto, CreateGameDto, createGame } from '../../../../services/api/game_api'\n// eslint-disable-next-line unicorn/consistent-function-scoping\nexport const submitGameForm\n= (channel: ChannelWithParticipantsAndParsedMessage | undefined, dispatch: ThunkDispatch): OnSubmit =>\n  async (formData: InternalFormData) => {\n    if (channel){\n      try {\n\n        const questionEntries = Object.entries(formData.values).filter(x => x[0].startsWith('question')).map(x => [...x[0].split('_'), x[1].value as string])\n        const optionEntries = Object.entries(formData.values).filter(x => x[0].startsWith('option')).map(x => [...x[0].split('_'), x[1].value as string])\n        const checkEntries = Object.entries(formData.values).filter(x => x[0].startsWith('check')).map(x => [...x[0].split('_'), x[1].value])\n\n        const questions = questionEntries.map<CreateQuestionDto>(questionEntry => {\n          const index = questionEntry[1]\n          const options = optionEntries.filter(x => x[1] === index)\n          const checks = checkEntries.filter(x => x[1] === index)\n\n          const answers = options.map<CreateAnswerDto>(option => ({\n            answer: option[3],\n            is_correct: checks.find(check => check[2] === option[2] && (<boolean>check[3])) !== undefined,\n          }))\n\n          return {\n            question: questionEntry[2],\n            answers,\n          }\n\n        })\n\n        const game: CreateGameDto = {\n          name: channel.title ?? '',\n          access_token: '',\n          questions,\n        }\n\n        await createGame(game)\n\n        dispatch(setToastSuccess({\n          title: 'New Game Created!',\n        }))\n      } catch (error){\n\n        dispatch(setToastError({\n          title: 'Game Create Failed!',\n          message: error.message,\n        }))\n        throw new Error(error.message)\n      }\n    }\n  }\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/game_quiz_dialog/styles.ts",[],["1896","1897"],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_init_pubnub_events.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/helpers.ts",["1898","1899"],"import { MessageContext } from './messenger_chat/chat_message_cards/interfaces'\nimport { createConversation } from './../../utils/channel_helpers'\nimport {\n  differenceInDays,\n  differenceInHours,\n  differenceInMinutes,\n  format,\n  isToday,\n  isWithinInterval,\n  isYesterday,\n  lastDayOfYear,\n  parseISO,\n  isThisYear,\n  startOfYear,\n} from 'date-fns'\nimport { MessageTemplateText, Folder } from '@globalid/messaging-service-sdk'\nimport {\n  DATE_FORMAT_HOURS,\n  MINS,\n  DATE_FORMAT_WEEK_DAY_SHORT,\n  TIMESTAMP_DATE_FORMAT,\n  TIMESTAMP_FULL_DATE_FORMAT,\n  TIMESTAMP_TIME_FORMAT,\n  DATE_FORMAT_MONTH,\n  DATE_FORMAT_YEAR,\n  NOW,\n  KEEP_POOLING_CONSENT_NOT_APPROVED_YET,\n} from '../../constants'\nimport { getString, removeConsentUuid, getConsentUuid, navigateToChannelPage } from '../../utils'\nimport { EncryptionStatus, MessagesType } from './interfaces'\nimport { ConsentStatus } from '../../services/api/interfaces'\nimport { consentPolling } from '../../services/api/consent_api'\nimport { ConsentRequest } from '@globalid/consent-types'\nimport { deviceKeyManager } from '../../init'\nimport { MyDevicesInfoResponse } from '@globalid/keystore-service-sdk'\nimport { getMyDevices } from '../../services/api/keystore_api'\nimport { setToastError } from 'globalid-react-ui'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport { ThunkDispatch } from '../../store'\nimport { History } from 'history'\nimport { Identity, PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { GroupMemberWithIdentityFields } from '../../store/interfaces'\nimport { GroupResponse, Member } from '@globalid/group-service-sdk'\n\nexport const parseMessageContent = (content: string): MessageTemplateText => JSON.parse(content)\n\nexport const getFormattedDate = (createdDate: string | undefined): string | null => {\n  if (!createdDate) {\n    return null\n  }\n\n  const providedDate: Date = new Date(createdDate)\n  const currentDate: Date = new Date()\n\n  const minutes: number = differenceInMinutes(currentDate, providedDate)\n  const messageHoursTimeDiff: number = differenceInHours(currentDate, providedDate)\n\n  if (minutes < 1) {\n    return NOW\n  }\n\n  if (messageHoursTimeDiff === 0) {\n    return `${minutes}${MINS}`\n  }\n  const today: boolean = isToday(providedDate)\n\n  if (messageHoursTimeDiff <= 12 && today) {\n    return format(providedDate, DATE_FORMAT_HOURS)\n  }\n\n  const lessThenSevenDays: number = differenceInDays(currentDate, providedDate)\n\n  if (lessThenSevenDays <= 7) {\n    return format(providedDate, DATE_FORMAT_WEEK_DAY_SHORT)\n  }\n\n  const monthLastDay: Date = lastDayOfYear(currentDate)\n  const monthFirstDay: Date = startOfYear(currentDate)\n  const isInCurrentYear: boolean = isWithinInterval(providedDate, { start: monthFirstDay, end: monthLastDay })\n\n  if (isInCurrentYear) {\n    return format(providedDate, DATE_FORMAT_MONTH)\n  }\n\n  return format(providedDate, DATE_FORMAT_YEAR)\n}\n\nexport const getTimestampDate = (dateString: string): string => {\n  const date: Date = new Date(dateString)\n\n  const yesterday: boolean = isYesterday(date)\n  const today: boolean = isToday(date)\n\n  if (yesterday) {\n    return getString('yesterday')\n  }\n\n  if (today) {\n    return getString('today')\n  }\n\n  const thisYear: boolean = isThisYear(date)\n\n  if (!thisYear) {\n    return format(parseISO(dateString), TIMESTAMP_FULL_DATE_FORMAT)\n  }\n\n  return format(parseISO(dateString), TIMESTAMP_DATE_FORMAT)\n}\n\nexport const getFormattedFullDateTimestamp = (dateString: string): string => {\n\n  const timestampDate: string = getTimestampDate(dateString)\n  const timestampTime: string = format(parseISO(dateString), TIMESTAMP_TIME_FORMAT).replace('AM', 'am').replace('PM', 'pm')\n\n  return `${timestampDate}, ${timestampTime}`\n}\n\nexport const initializeDeviceKeyManager = async (): Promise<void> => {\n  await deviceKeyManager.init()\n}\n\nexport const statusMatcher = (currentStatus: EncryptionStatus, statusArray: EncryptionStatus[]): boolean =>\n  statusArray.some((status: EncryptionStatus) => status === currentStatus)\n\nconst waitForConsentStatus = async (dispatch: Dispatch): Promise<ConsentStatus | undefined> => {\n  try {\n    return await consentPolling()\n  } catch (error) {\n    if ((<Error>error).message === KEEP_POOLING_CONSENT_NOT_APPROVED_YET) {\n      dispatch(setToastError({\n        title: getString('notification-request-error-title'),\n        message: getString('something-went-wrong'),\n      }))\n    }\n  }\n}\n\nexport const handleConsentFromCookie = async (dispatch: Dispatch): Promise<EncryptionStatus> => {\n  const consentStatus: ConsentStatus | undefined = await waitForConsentStatus(dispatch)\n\n  removeConsentUuid()\n\n  if (consentStatus?.status === ConsentRequest.ConsentStatus.completed) {\n    await deviceKeyManager.enableEncryption()\n\n    return EncryptionStatus.ENABLED\n  }\n\n  return EncryptionStatus.DISABLED\n}\n\nexport const checkEncryptionAllowedDevices = async (): Promise<EncryptionStatus | null> => {\n  const consentUuid: string | null = getConsentUuid()\n\n  if (consentUuid !== null) {\n\n    return EncryptionStatus.POLLING\n  }\n\n  const deviceId: string | undefined = deviceKeyManager.getDeviceId()\n\n  if (deviceId !== undefined) {\n    const myDevices: MyDevicesInfoResponse[] = await getMyDevices()\n\n    const encryptionEnabled: boolean = await deviceKeyManager.isEncryptionEnabled(myDevices)\n\n    if (encryptionEnabled) {\n      return EncryptionStatus.ENABLED\n    }\n  }\n\n  return null\n}\n\nexport const handleClickToSendMessageButton = async (\n  dispatch: ThunkDispatch,\n  history: History,\n  identity: PublicIdentity | Identity,\n  loggedInIdentity: PublicIdentity | Identity,\n  folders: Folder[],\n  isMobileOrTablet: boolean,\n): Promise<void> => {\n\n  const devicesStatus: EncryptionStatus | null = await checkEncryptionAllowedDevices()\n\n  if (devicesStatus === null || devicesStatus !== EncryptionStatus.ENABLED) {\n    if (!isMobileOrTablet) {\n      dispatch(setToastError({\n        title: getString('chat-open-disabled-encryption-error-title'),\n        message: getString('chat-open-disabled-encryption-error-message'),\n      }))\n    }\n\n    return navigateToChannelPage(history, MessagesType.PRIMARY, '')\n  }\n\n  await createConversation(\n    [identity.gid_uuid],\n    loggedInIdentity.gid_uuid,\n    folders,\n    dispatch,\n    history,\n    { currentPath: history.location.pathname }\n  )\n}\n\nexport const disableCreateChannelButton = (\n  group: GroupResponse | undefined,\n  members: GroupMemberWithIdentityFields[] | undefined,\n  isHidden: boolean | undefined,\n  loggedInUser: string | undefined,\n): boolean => {\n\n  const groupNotSelected: boolean = group === undefined\n  const memberVisibilityHidden: boolean =\n    group?.member_visibility === Member.MemberVisibility.hidden && loggedInUser !== group.owner_uuid\n  const loggedInUserOnlyMember: boolean = members?.length === 1\n  const loggedInUserHidden: boolean = isHidden ?? false\n\n  return groupNotSelected || memberVisibilityHidden || loggedInUserOnlyMember || loggedInUserHidden\n}\n\nexport const isMessageAuthor = (\n  identity: PublicIdentity,\n  messageContext: MessageContext\n): boolean => identity.gid_uuid === messageContext.message.author\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/initialize/use_folder_counters.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/initialize/use_browser_notifications_prompt.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/store.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/device_key_manager/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/device_helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/messaging_slice.ts",["1900","1901","1902","1903","1904","1905","1906","1907"],"import { chain } from 'lodash'\n\nimport {\n  PayloadAction,\n  createAsyncThunk,\n  createSlice,\n} from '@reduxjs/toolkit'\nimport {\n  BlockedUser,\n  BlockedUsersWithPaginationMeta,\n} from '@globalid/messaging-service-sdk'\nimport {\n  setToastError,\n  setToastSuccess,\n} from 'globalid-react-ui'\nimport {\n  BlockUserParameters,\n  FetchBlockedUsersParameters,\n  FetchStatus,\n  KeyValuePayload,\n  MessagingState,\n  FulfilledAction,\n  RejectedAction,\n} from './interfaces'\nimport {\n  createKeyFromBlockedUsersParameters,\n  getBlockedUsersFetchStatusByParameters,\n} from './messaging_selectors'\nimport {\n  blockUser as blockUserApi,\n  unblockUser as unblockUserApi,\n  getUserBlocks,\n} from '../services/api/block_users_api'\nimport { getString } from '../utils/general_utils'\nimport { RootState } from 'RootType'\n\nconst initialState: MessagingState = {\n  blockedUsers: {},\n  blockedUsersFetchStatusByParameters: {},\n}\n\nexport const blockUser = createAsyncThunk(\n  'messaging/blockUser',\n  async (parameters: BlockUserParameters, { dispatch }): Promise<BlockedUser> => {\n    try {\n      const blockedUser: BlockedUser = await blockUserApi(parameters.gidUuid)\n\n      dispatch(setToastSuccess({\n        title: getString('user-blocked-title'),\n        message: getString('user-blocked-description').replace('{user}', parameters.gidName),\n      }))\n\n      return blockedUser\n    } catch (error) {\n      dispatch(setToastError({\n        title: getString('user-blocked-title-failed'),\n        message: getString('user-blocked-description-failed').replace('{user}', parameters.gidName),\n      }))\n\n      throw error\n    }\n  }\n)\n\nexport const unblockUser = createAsyncThunk(\n  'messaging/unblockUser',\n  async (parameters: BlockUserParameters, { dispatch }): Promise<void> => {\n    try {\n      await unblockUserApi(parameters.gidUuid)\n\n      dispatch(setToastSuccess({\n        title: getString('user-unblocked-title'),\n        message: getString('user-unblocked-description').replace('{user}', parameters.gidName),\n      }))\n\n    } catch (error) {\n      dispatch(setToastError({\n        title: getString('user-unblocked-title-failed'),\n        message: getString('user-unblocked-description-failed').replace('{user}', parameters.gidName),\n      }))\n\n      throw error\n    }\n  }\n)\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'messaging/fetchBlockedUsers',\n  async (parameters: FetchBlockedUsersParameters = {}, { dispatch }): Promise<BlockedUsersWithPaginationMeta> => {\n    dispatch(setBlockedUsersFetchStatusByParameters({\n      key: createKeyFromBlockedUsersParameters(parameters),\n      value: FetchStatus.PENDING,\n    }))\n\n    return getUserBlocks({\n      ...parameters,\n      per_page: 1000,\n    })\n  },\n  {\n    condition: (parameters: FetchBlockedUsersParameters = {}, { getState }): boolean => {\n      const state: RootState = <RootState>getState()\n\n      const fetchStatus: FetchStatus | undefined = getBlockedUsersFetchStatusByParameters(state, parameters)\n\n      if (fetchStatus === FetchStatus.PENDING || fetchStatus === FetchStatus.SUCCESS) {\n        return false\n      }\n\n      return true\n    },\n  }\n)\n\nconst messagingSlice = createSlice({\n  name: 'messaging',\n  initialState,\n  reducers: {\n    setBlockedUsersFetchStatusByParameters (\n      state: MessagingState,\n      action: PayloadAction<KeyValuePayload<FetchStatus>>\n    ): void {\n      state.blockedUsersFetchStatusByParameters[action.payload.key] = action.payload.value\n    },\n  },\n  extraReducers: {\n    [blockUser.fulfilled.type]: (\n      state: MessagingState,\n      action: FulfilledAction<BlockedUser, BlockUserParameters>\n    ): void => {\n      const parameters: BlockUserParameters = action.meta.arg\n\n      state.blockedUsers[parameters.gidUuid] = action.payload\n    },\n    [unblockUser.fulfilled.type]: (\n      state: MessagingState,\n      action: FulfilledAction<BlockedUser, BlockUserParameters>\n    ): void => {\n      const parameters: BlockUserParameters = action.meta.arg\n\n      delete state.blockedUsers[parameters.gidUuid]\n    },\n    [fetchBlockedUsers.fulfilled.type]: (\n      state: MessagingState,\n      action: FulfilledAction<BlockedUsersWithPaginationMeta, FetchBlockedUsersParameters | undefined>\n    ): void => {\n      const parameters: FetchBlockedUsersParameters = action.meta.arg ?? {}\n\n      state.blockedUsers = {\n        ...state.blockedUsers,\n        ...chain(action.payload.data.blocked_users).keyBy('user_id').mapValues(blockedUser => blockedUser).value(),\n      }\n      const key: string = createKeyFromBlockedUsersParameters(parameters)\n\n      state.blockedUsersFetchStatusByParameters[key] = FetchStatus.SUCCESS\n    },\n    [fetchBlockedUsers.rejected.type]: (\n      state: MessagingState,\n      action: RejectedAction<FetchBlockedUsersParameters | undefined>\n    ): void => {\n      const parameters: FetchBlockedUsersParameters = action.meta.arg ?? {}\n      const key: string = createKeyFromBlockedUsersParameters(parameters)\n\n      state.blockedUsersFetchStatusByParameters[key] = FetchStatus.ERROR\n    },\n  },\n})\n\nexport const {\n  setBlockedUsersFetchStatusByParameters,\n} = messagingSlice.actions\n\nexport default messagingSlice.reducer\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/routes/routes.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/game_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/form_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/full_image_dialog.tsx",["1908"],"import { setToastError } from 'globalid-react-ui'\nimport React, { useState } from 'react'\nimport { Dialog } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport CloseIconLink from '../../../../assets/icons/close-white-icon.svg'\nimport { getString } from '../../../../utils'\nimport { GlobalidLoader } from '../../../global/loading'\nimport { FullImageDialogProps } from './interfaces'\nimport { useStyles } from './styles'\nimport clsx from 'clsx'\n\nexport const FullImageDialog: React.FC<FullImageDialogProps> = (\n  { open, title, thumbnail, original, onExit }: FullImageDialogProps) => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const [isOriginalImageLoaded, setOriginalImageLoaded] = useState<boolean>(false)\n\n  const closeDialogAndTriggerErrorToaster = (): void => {\n    onExit()\n    dispatch(setToastError({\n      title: getString('messages-full-image-toast-error-title'),\n      message: getString('messages-full-image-toast-error-message'),\n    }))\n  }\n\n  const handleOriginalImageLoad = (): void => {\n    setOriginalImageLoaded(true)\n  }\n\n  return (\n    <Dialog\n      open={open}\n      classes={{ paper: classes.dialogPaper }}\n      className={classes.imageDialog}\n      fullScreen={true}\n      fullWidth={true}\n      onClose={onExit}\n    >\n      <div className={classes.imageHeader}>\n        <span className={classes.imageTitle}>{title}</span>\n        <img\n          className={classes.icon}\n          src={CloseIconLink}\n          onClick={onExit}\n          alt={'close'}\n        />\n      </div>\n      <div className={classes.imageContainer} onClick={onExit}>\n        <div className={classes.imageBackground} onClick={(event: React.MouseEvent<HTMLDivElement, MouseEvent>) => event.stopPropagation()}\n          data-testid={'image-background'}>\n          {!isOriginalImageLoaded && <img\n            className={clsx(classes.image, classes.imageThumbnail)}\n            src={thumbnail}\n            alt={'thumbnail'}\n            onError={closeDialogAndTriggerErrorToaster}\n          />}\n          <img\n            className={clsx(\n              classes.image,\n              isOriginalImageLoaded ? classes.noOpacity : classes.displayNone\n            )}\n            src={original}\n            alt={'original'}\n            onLoad={handleOriginalImageLoad}\n            onError={closeDialogAndTriggerErrorToaster}\n          />\n          {!isOriginalImageLoaded && <div className={classes.imageLoader}>\n            <GlobalidLoader/>\n          </div>}\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/keystore_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/pubnub/notification_events.ts",["1909","1910"],"import { MessagesType, ChannelFoldersType } from '../../components/messages/interfaces'\nimport { ThunkDispatch, store } from '../../store'\nimport {\n  prepareAndFetchFolderCounter,\n  decrementChannelCounter,\n  incrementChannelCounter,\n  fetchFoldersCounters,\n} from '../../store/counters_slice'\nimport { initNotificationSdk } from './notifications'\nimport {\n  ServiceNotification,\n  NotificationAction,\n  NotificationClientService, JoinMemberPayload,\n} from './interfaces'\nimport { getAccessToken, getString, getUuidFromURL } from '../../utils'\nimport { getValidToken } from './../../components/auth'\nimport { isArray, isFunction } from 'lodash'\nimport {\n  upsertAndParseChannelMessages,\n  upsertAndParseChannelMessage,\n  setChannelMessageDelivered,\n  setDelieveredMessage,\n  setSeenMessage,\n  setTyping,\n} from '../../store/messages_slice'\nimport {\n  setChannel,\n  setChannelLastMessage,\n  fetchChannelsCounters,\n  fetchMembers,\n} from '../../store/channels_slice/channels_slice'\nimport {\n  setGroup,\n  fetchGroupMembers,\n  removeGroupFromStore,\n  updateGroupMessagingList,\n  removeMyGroupAndMessagingChannel,\n} from '../../store/groups_slice'\nimport {\n  Message,\n  ChannelWithParticipants,\n  MessageDelivered as MessageDeliveredSdk,\n  MessageSeen,\n  Typing,\n  Folder,\n} from '@globalid/messaging-service-sdk'\nimport { ChannelWithMembers, GidUUID, ChannelType, MemberByUUID } from '../../store/interfaces'\nimport PQueue, { DefaultAddOptions } from 'p-queue'\nimport PriorityQueue from 'p-queue/dist/priority-queue'\nimport { GroupResponse } from '@globalid/group-service-sdk'\nimport { setToastSuccess } from 'globalid-react-ui'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { newMessageNotificationHandler, handleBrowserNotification } from '../../utils/notification_handlers'\n\nexport let client: NotificationClientService | undefined\n\nconst mapChannelToFolder = {\n  'PRIMARY': MessagesType.PRIMARY,\n  'GROUP': MessagesType.GROUPS,\n  'UNKNOWN': MessagesType.OTHER,\n}\n\nconst dispatch: ThunkDispatch = store.dispatch\n\nexport const initNotificationClient = async (): Promise<void> => {\n  await getValidToken()\n\n  if (client === undefined) {\n    client = await initNotificationSdk()\n  }\n}\n\ntype Callback = (channel: string, notification: ServiceNotification) => Promise<void>\n\nexport const subscribe = (callBack: Callback): void => {\n  if (client !== undefined) {\n    client.subscribe(callBack)\n  }\n}\n\nexport const unsubscribe = (): void => {\n  const token: string = <string>getAccessToken()\n\n  if (client !== undefined) {\n    client.unsubscribe(token)\n  }\n}\n\ntype NotificationServiceActions = {\n  [key in NotificationAction]: Callback | Callback[]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst handleNotification = async (_channel: string, _notification: ServiceNotification): Promise<void> => {\n}\n\nconst handleNewMessageNotification = async (_channel: string, notification: ServiceNotification): Promise<void> => {\n  const message: Message = (<Message><unknown>notification.payload)\n\n  await dispatch(upsertAndParseChannelMessage(message))\n  await dispatch(setChannelLastMessage({\n    key: message.channel_id,\n    value: message,\n  }))\n\n  const channel: ChannelWithMembers | undefined = store.getState().channels.channels[message.channel_id]\n  const channelType: string | undefined = mapChannelToFolder[<never>channel?.channel.type]\n  const loggedInIdentityUuid: GidUUID | undefined = getLoggedInIdentityUuid()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (channelType !== undefined &&\n    message.author !== loggedInIdentityUuid &&\n    channel?.channel.unread_count === 0 && // one count per channel\n    !window.location.pathname.includes(channel.channel.id) // do not increment counter if channel is open\n  ) {\n    dispatch(incrementChannelCounter(channelType))\n  }\n\n  const groupUuid: string | undefined = channel?.channel.group_uuid ?? undefined\n\n  await dispatch(fetchMembers({\n    channel_id: message.channel_id,\n    member_ids: [message.author],\n  }))\n  await dispatch(fetchChannelsCounters({ channel_id: message.channel_id, group_uuid: groupUuid }))\n  await dispatch(setChannelMessageDelivered(message))\n  await dispatch(prepareAndFetchFolderCounter())\n\n  await dispatch(updateGroupMessagingList(message.channel_id))\n}\n\nconst handleNewChannelCreatedNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const channelWithParticipants: ChannelWithParticipants = (<ChannelWithParticipants><unknown>notification.payload)\n\n  await dispatch(setChannel(channelWithParticipants))\n}\n\nconst handleDeletedStatusReceivedNotification = async (channel: string, notification: ServiceNotification):\n  Promise<void> => {\n  const updatedMessages: Message[] = (<Message[]><unknown>notification.payload)\n\n  const channel_id: string | undefined = updatedMessages[0]?.channel_id\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (channel_id !== undefined) {\n    await dispatch(upsertAndParseChannelMessages({\n      key: channel_id,\n      value: updatedMessages,\n    }))\n    await dispatch(setChannelLastMessage({\n      key: channel_id,\n      value: updatedMessages[0],\n    }))\n  }\n}\n\nconst handleChannelUpdatedNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const channelWithParticipants: ChannelWithParticipants = (<ChannelWithParticipants><unknown>notification.payload)\n\n  await dispatch(setChannel(channelWithParticipants))\n}\n\ninterface MessageDelivered extends MessageDeliveredSdk {\n  message_uuid: string\n}\n\nconst handleDeliveryStatusNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const messageDelivered: MessageDelivered = (<MessageDelivered><unknown>notification.payload)\n\n  await Promise.resolve(dispatch(setDelieveredMessage({\n    key: messageDelivered.channel_id,\n    value: { uuid: messageDelivered.message_uuid },\n  })))\n}\n\nconst handleSeenStatusNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const messageSeen: MessageSeen = (<MessageSeen><unknown>notification.payload)\n  const loggedInIdentityUuid: GidUUID | undefined = getLoggedInIdentityUuid()\n\n  if (messageSeen.gid_uuid === loggedInIdentityUuid) {\n    const channelWithMemebers: ChannelWithMembers | undefined = store.getState().channels.channels[messageSeen.channel_id]\n    const channelType: string | undefined = mapChannelToFolder[<never>channelWithMemebers?.channel.type]\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (channelType !== undefined) {\n      dispatch(decrementChannelCounter(channelType))\n    }\n\n    const uuid: string | null = getUuidFromURL(window.location.pathname)\n    const groupUuid: string | undefined = uuid !== null ? uuid : undefined\n\n    await dispatch(fetchChannelsCounters({ channel_id: messageSeen.channel_id, group_uuid: groupUuid }))\n    await dispatch(prepareAndFetchFolderCounter())\n  }\n\n  await Promise.resolve(dispatch(setSeenMessage({\n    key: messageSeen.channel_id,\n    value: messageSeen,\n  })))\n}\n\nconst handleTypingNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const typing: Typing = (<Typing><unknown>notification.payload)\n  const loggedInIdentityUuid: GidUUID | undefined = getLoggedInIdentityUuid()\n\n  await dispatch(fetchMembers({\n    channel_id: typing.channel_id,\n    member_ids: [typing.author],\n  }))\n\n  if (typing.author !== loggedInIdentityUuid) {\n    await Promise.resolve(dispatch(setTyping(typing)))\n  }\n}\n\nconst handleGroupJoinedNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const joinedGroup: GroupResponse = <GroupResponse><unknown>notification.payload\n\n  await Promise.resolve(store.dispatch(setGroup(joinedGroup)))\n}\n\nconst handleGroupMemberJoinedOrLeftNotification = async (\n  channel: string, notification: ServiceNotification\n): Promise<void> => {\n  const joinedMember: JoinMemberPayload = <JoinMemberPayload><unknown>notification.payload\n\n  await Promise.resolve(store.dispatch(fetchGroupMembers({\n    group_uuid: joinedMember.uuid,\n    page: 1,\n  })))\n}\n\nconst handleGroupUpdatedNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const groupResponse: GroupResponse = <GroupResponse><unknown>notification.payload\n\n  await Promise.resolve(store.dispatch(setGroup({\n    key: groupResponse.uuid,\n    value: groupResponse,\n  })))\n}\n\nconst handleGroupDeleteNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const deleteGroupResponse: GroupResponse = <GroupResponse><unknown>notification.payload\n\n  await Promise.resolve(store.dispatch(removeGroupFromStore(deleteGroupResponse.uuid)))\n}\n\nconst handleGroupLeftNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const leftGroupResponse: GroupResponse = <GroupResponse><unknown>notification.payload\n\n  await Promise.resolve(store.dispatch(removeMyGroupAndMessagingChannel(leftGroupResponse.uuid)))\n}\n\nconst handleFolderChangeNotification = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const channelWithParticipants: ChannelWithParticipants = <ChannelWithParticipants><unknown>notification.payload\n  const isMulti: boolean = channelWithParticipants.type === ChannelType.MULTI\n  const loggedInIdentityUuid: GidUUID | undefined = getLoggedInIdentityUuid()\n  const folders: Folder[] = store.getState().channels.folders\n  const primaryFolderId: string | undefined =\n    folders.find((folder: Folder) => folder.type === ChannelFoldersType.GENERAL)?.id\n  const otherFolderId: string | undefined =\n    folders.find((folder: Folder) => folder.type === ChannelFoldersType.UNKNOWN)?.id\n  const displayName: string | undefined = channelWithParticipants.title && isMulti\n    ? channelWithParticipants.title\n    : undefined\n\n  await dispatch(setChannel(channelWithParticipants))\n\n  const chatNames: string = getMembers(\n    channelWithParticipants.participants,\n    loggedInIdentityUuid,\n    displayName,\n  )\n\n  const folderName: string = channelWithParticipants.folder_id === primaryFolderId ? getString('button-group-primary') : getString('button-group-other')\n\n  if (primaryFolderId !== undefined && otherFolderId !== undefined) {\n    await dispatch(fetchFoldersCounters({\n      [MessagesType.PRIMARY]: primaryFolderId,\n      [MessagesType.OTHER]: otherFolderId,\n    }))\n  }\n\n  const toastMessage: string = channelWithParticipants.type === ChannelType.MULTI\n    ? getString('folder-changed-notification-multi-description')\n    : getString('folder-changed-notification-description')\n\n  dispatch(setToastSuccess({\n    title: getString('folder-changed-notification-title').replace('{folder}', folderName),\n    message: toastMessage.replace('{folder}', folderName).replace('{name}', chatNames),\n  }))\n}\n\nconst notificationServiceActions: NotificationServiceActions = {\n  [NotificationAction.NewChannelCreated]: handleNewChannelCreatedNotification,\n  [NotificationAction.NewMessage]: [\n    handleNewMessageNotification,\n    handleBrowserNotification(newMessageNotificationHandler),\n  ],\n  [NotificationAction.UserBlocked]: handleNotification,\n  [NotificationAction.UserUnblocked]: handleNotification,\n  [NotificationAction.SeenStatus]: handleSeenStatusNotification,\n  [NotificationAction.DeliveryStatus]: handleDeliveryStatusNotification,\n  [NotificationAction.ChannelUpdated]: handleChannelUpdatedNotification,\n  [NotificationAction.DeletedStatusReceived]: handleDeletedStatusReceivedNotification,\n  [NotificationAction.TypingNotificationReceived]: handleTypingNotification,\n  [NotificationAction.FolderChanged]: handleFolderChangeNotification,\n  [NotificationAction.GroupJoined]: handleGroupJoinedNotification,\n  [NotificationAction.GroupLeft]: handleGroupLeftNotification,\n  [NotificationAction.GroupMemberJoined]: handleGroupMemberJoinedOrLeftNotification,\n  [NotificationAction.GroupMemberLeft]: handleGroupMemberJoinedOrLeftNotification,\n  [NotificationAction.GroupUpdated]: handleGroupUpdatedNotification,\n  [NotificationAction.GroupDeleted]: handleGroupDeleteNotification,\n}\n\nconst callbackQueue: PQueue<PriorityQueue, DefaultAddOptions> = new PQueue({ concurrency: 1 })\n\nexport const subscribeCallback = async (channel: string, notification: ServiceNotification): Promise<void> => {\n  const notificationServiceAction: Callback | Callback[] = notificationServiceActions[notification.action]\n\n  if (isFunction(notificationServiceAction)) {\n    await callbackQueue.add(async () => notificationServiceAction(channel, notification))\n  } else if (isArray(notificationServiceAction)) {\n    await callbackQueue.addAll(notificationServiceAction.map((actionCallback: Callback) => (\n      async () => actionCallback(channel, notification)\n    )))\n  }\n}\n\nconst getLoggedInIdentityUuid = (): string | undefined => store.getState().identity.identity?.gid_uuid\n\nconst getMembersNamesString = (firstMember?: PublicIdentity, secondMember?: PublicIdentity): string => (\n  `${firstMember?.gid_name ?? ''}${secondMember !== undefined ? `, ${secondMember.gid_name}` : ''}`\n)\n\nconst getMembers = (\n  participants: GidUUID[],\n  gidUuid: GidUUID | undefined,\n  displayName: string | undefined\n): string => {\n  if (displayName !== undefined) {\n    return displayName\n  }\n\n  const membersWithoutUser: string[] = participants.filter((participantUuid: GidUUID) => participantUuid !== gidUuid)\n  const members: MemberByUUID = store.getState().channels.members\n\n  const firstMember: PublicIdentity | undefined = members[membersWithoutUser[0]]\n  const secondMember: PublicIdentity | undefined = members[membersWithoutUser[1]]\n\n  return getMembersNamesString(firstMember, secondMember)\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/consent_api.ts",["1911"],"import pRetry from 'p-retry'\n\nimport axios, { AxiosResponse } from 'axios'\nimport { getValidToken } from '../../components/auth'\nimport { ConsentStatus } from './interfaces'\nimport { API_BASE_URL, KEEP_POOLING_CONSENT_NOT_APPROVED_YET } from '../../constants'\nimport { delay, getConsentUuid } from '../../utils'\nimport { ConsentRequest } from '@globalid/consent-types'\n\nexport const getConsentStatus = async (): Promise<ConsentStatus> => {\n  await getValidToken()\n  const consent: string | null = getConsentUuid()\n\n  if (consent === null) {\n    throw new pRetry.AbortError('ERR_UNAUTHORIZED')\n  }\n\n  const response: AxiosResponse = await axios.get(\n    `${API_BASE_URL}/v1/consent/${consent}/status`\n  )\n\n  if ([ConsentRequest.ConsentStatus.completed, ConsentRequest.ConsentStatus.declined, ConsentRequest.ConsentStatus.expired]\n    .every((status: string) => status !== response.data.status)) {\n    throw new Error(KEEP_POOLING_CONSENT_NOT_APPROVED_YET)\n  }\n\n  return response.data\n}\n\nexport const consentPolling = async (): Promise<ConsentStatus> => pRetry(async () => getConsentStatus(), {\n  retries: 100,\n  factor: 1,\n  onFailedAttempt: async () => {\n    await delay(3000)\n  },\n})\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/full_image_handler.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/channel_helpers.ts",["1912","1913"],"import { DevicesInfoResponse } from '@globalid/keystore-service-sdk'\nimport {\n  AddChannelBody,\n  ChannelWithParticipants,\n  Folder,\n  ParticipantChannelDeviceSecret,\n} from '@globalid/messaging-service-sdk'\nimport { History } from 'history'\nimport * as UUID from 'uuid'\nimport { ChannelFoldersType, MessagesType } from '../components/messages/interfaces'\nimport { BASE_MESSAGES_URL } from '../constants'\nimport { getString } from './general_utils'\nimport { setToastError } from 'globalid-react-ui'\nimport {\n  fetchExistingChannel,\n  setChannel,\n} from './../store/channels_slice/channels_slice'\nimport { ThunkDispatch } from './../store/store'\nimport { isEmpty, uniq } from 'lodash'\nimport { deviceKeyManager } from '../init'\nimport {\n  createChannel,\n  createChannelE2EE,\n} from '../services/api/channels_api'\nimport { getUsersDevices } from '../services/api/keystore_api'\nimport {\n  ChannelType,\n  GidUUID,\n  ChannelWithParticipantsAndParsedMessage,\n} from '../store/interfaces'\nimport { GoToChannelParams } from './interfaces'\n\nexport const createChannelWithUserDeviceSecrets = async (\n  participants: GidUUID[],\n  ownerUuid: GidUUID,\n  type: 'MULTI' | 'PERSONAL',\n  groupUuid?: string,\n): Promise<ChannelWithParticipants> => {\n  const allParticipants: GidUUID[] = uniq([...participants, ownerUuid])\n  const devices: DevicesInfoResponse[] = await getUsersDevices(allParticipants)\n  const primaryDevices: DevicesInfoResponse[] = devices.filter((x: DevicesInfoResponse) => x.is_primary)\n  const deviceOwners: string[] = primaryDevices.map((x: DevicesInfoResponse) => x.gid_uuid)\n\n  const secrets: ParticipantChannelDeviceSecret[] = await deviceKeyManager.prepareSecrets(devices)\n\n  const everyParticipantHasPrimaryDevice: boolean = allParticipants.every((x: string) => deviceOwners.includes(x))\n\n  const addChannelBodyParams: AddChannelBody = {\n    uuid: UUID.v4(),\n    participants,\n    exposed: true,\n    type,\n    group_uuid: groupUuid,\n  }\n\n  if (everyParticipantHasPrimaryDevice) {\n    return createChannelE2EE({\n      ...addChannelBodyParams,\n      secrets,\n    })\n  } else {\n    return createChannel({\n      ...addChannelBodyParams,\n    })\n  }\n}\n\nexport const createConversation = async (\n  selectedIdentities: string[],\n  loggedInIdentityUuid: string,\n  folders: Folder[],\n  dispatch: ThunkDispatch,\n  history: History,\n  params?: GoToChannelParams,\n): Promise<void> => {\n  try {\n    if (isEmpty(selectedIdentities)) {\n      throw new Error('PARTICIPANTS_EMPTY')\n    }\n    const channelType: ChannelType = selectedIdentities.length > 1 ? ChannelType.MULTI : ChannelType.PERSONAL\n\n    let existingChannel: ChannelWithParticipants | undefined = <ChannelWithParticipants | undefined>(\n      await dispatch(fetchExistingChannel({\n        participants: [...selectedIdentities, loggedInIdentityUuid],\n        groupUuid: params?.groupUuid,\n      }))\n    ).payload\n\n    if (!existingChannel) {\n      existingChannel = <ChannelWithParticipants> (\n        await createNewChannel(selectedIdentities, loggedInIdentityUuid, channelType, dispatch, params?.groupUuid)\n      )\n    }\n    goToChannel(\n      history,\n      existingChannel.id,\n      getRouteFolderType(folders, existingChannel.folder_id, params?.groupUuid),\n      params\n    )\n  } catch (error) {\n    dispatch(setToastError({\n      title: getString('chat-creation-error-title'),\n      message: getString('chat-creation-error-description'),\n    }))\n  }\n}\n\nconst createNewChannel = async (\n  finalParticipants: string[],\n  loggedInIdentityUuid: string,\n  channelType: ChannelType,\n  dispatch: ThunkDispatch,\n  groupUuid?: string,\n): Promise<ChannelWithParticipantsAndParsedMessage> => {\n  if (!(channelType === ChannelType.MULTI || channelType === ChannelType.PERSONAL))\n  {\n    throw new Error('INCORRECT_CHANNEL_TYPE')\n  }\n  const participantsWithAuthor: GidUUID[]\n      = channelType === ChannelType.MULTI ? [...finalParticipants, loggedInIdentityUuid] : finalParticipants\n  const createdChannel: ChannelWithParticipants\n     = await createChannelWithUserDeviceSecrets(participantsWithAuthor, loggedInIdentityUuid, channelType, groupUuid)\n\n  return <ChannelWithParticipantsAndParsedMessage>(await dispatch(setChannel(createdChannel))).payload\n}\n\nexport const getRouteFolderType = (\n  folders: Folder[],\n  folderId?: string | null,\n  groupUuid?: string,\n): MessagesType => {\n  if (groupUuid !== undefined) {\n    return MessagesType.GROUPS\n  }\n  if (!folderId) {\n    return MessagesType.PRIMARY\n  } else {\n    const channelFolder: Folder | undefined = folders.find((folder: Folder) => folder.id === folderId)\n\n    if (channelFolder !== undefined) {\n      if (channelFolder.type === ChannelFoldersType.GENERAL) {\n        return MessagesType.PRIMARY\n      } else if (channelFolder.type === ChannelFoldersType.UNKNOWN) {\n        return MessagesType.OTHER\n      }\n    }\n  }\n\n  return MessagesType.PRIMARY\n}\n\nexport const goToChannel = (\n  history: History,\n  channelId: string,\n  folderType: MessagesType,\n  params?: GoToChannelParams\n): void => {\n  const route: string = params?.groupUuid ?\n    `${BASE_MESSAGES_URL}/${folderType}/${params.groupUuid}/${channelId}` :\n    `${BASE_MESSAGES_URL}/${folderType}/${channelId}`\n\n  if (params?.currentPath !== undefined && route !== params.currentPath) {\n    if (params.actionBeforeRedirect !== undefined) {\n      params.actionBeforeRedirect()\n    }\n    history.push(route)\n  } else if (params?.currentPath === undefined) {\n    if (params?.actionBeforeRedirect !== undefined) {\n      params.actionBeforeRedirect()\n    }\n    history.push(route)\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/assets/themes/main_theme.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/counters_slice.ts",["1914","1915","1916","1917","1918","1919","1920"],"import { CountersWithPaginationMeta, Folder, GroupCountersWithPaginationMeta, GroupCounter } from '@globalid/messaging-service-sdk'\nimport { createAsyncThunk, createSlice, PayloadAction, Slice, unwrapResult } from '@reduxjs/toolkit'\nimport { RootState } from 'RootType'\nimport {\n  ChannelFoldersCounters,\n  ChannelFoldersIds,\n  ChannelFoldersType,\n  MessagesType,\n} from '../components/messages/interfaces'\nimport { fetchCounters } from '../services/api'\nimport { ChannelType, CountersSlice, FulfilledAction, KeyValueObject, ThunkAPI } from './interfaces'\n\nconst initialState: CountersSlice = {\n  isFetchingAll: false,\n  isFetchingPrimaryCounter: false,\n  isFetchingGroupsCounter: false,\n  isFetchingOtherCounter: false,\n  counters: {},\n  groupUnreadChannelCounters: {},\n}\n\nexport const prepareAndFetchFolderCounter = createAsyncThunk<void, undefined, ThunkAPI>(\n  'counters/prepareAndFetchFolderCounter',\n  async (_, { getState, dispatch }) => {\n    const folders: Folder[] = getState().channels.folders\n    const primaryFolderId: string | undefined = folders.find(folder => folder.type === ChannelFoldersType.GENERAL)?.id\n    const otherFolderId: string | undefined = folders.find(folder => folder.type === ChannelFoldersType.UNKNOWN)?.id\n\n    if (primaryFolderId !== undefined && otherFolderId !== undefined) {\n      const fetchFoldersCountersPayload: ChannelFoldersIds = {\n        [MessagesType.PRIMARY]: primaryFolderId,\n        [MessagesType.OTHER]: otherFolderId,\n      }\n\n      await dispatch(fetchFoldersCounters(fetchFoldersCountersPayload))\n    }\n  }\n)\n\nexport const fetchFoldersCounters = createAsyncThunk<void, ChannelFoldersIds,ThunkAPI>(\n  'counters/fetchFoldersCounters',\n  async (folderIds: ChannelFoldersIds, { dispatch }) => {\n    await dispatch(fetchPrimaryFolderCounter(folderIds[MessagesType.PRIMARY]))\n    await dispatch(fetchOtherFolderCounter(folderIds[MessagesType.OTHER]))\n\n  }, {\n    condition: (_arg: ChannelFoldersIds, thunkAPI) => {\n      const {\n        counters: countersState,\n      }: RootState = thunkAPI.getState()\n\n      return !countersState.isFetchingAll\n    },\n  }\n)\nexport const fetchPrimaryFolderCounter = createAsyncThunk(\n  'counters/fetchPrimaryFolderCounter',\n  async (primaryFolderId: string) => {\n    const primaryCounter: CountersWithPaginationMeta = await fetchCounters({\n      folder_ids: [primaryFolderId],\n      channelTypes: [ChannelType.PERSONAL, ChannelType.MULTI],\n    })\n\n    return primaryCounter.meta.total\n  }, {\n    condition: (arg: string, thunkAPI) => {\n      const {\n        counters: countersState,\n      }: RootState = <RootState> thunkAPI.getState()\n\n      return !countersState.isFetchingPrimaryCounter\n    },\n  }\n)\n\nexport const filterGroupsTotalUnread = (\n  fetchedGroupCounters: GroupCounter[],\n  fetchedGroupUuids: string[],\n  totalUnread: number,\n): number => fetchedGroupCounters.reduce<number>((count: number, groupCounter: GroupCounter) => {\n  if (!fetchedGroupUuids.includes(groupCounter.group_uuid)) {\n    return count - groupCounter.unread_channel_count\n  }\n\n  return count\n}, totalUnread)\n\nexport const filterGroupCounters = (\n  fetchedGroupCounters: GroupCounter[],\n  fetchedGroupUuids: string[],\n): GroupCounter[] => fetchedGroupCounters.filter((counter: GroupCounter) => (\n  fetchedGroupUuids.includes(counter.group_uuid)\n))\n\nexport const fetchOtherFolderCounter = createAsyncThunk(\n  'counters/fetchOtherFolderCounter',\n  async (otherFolderId: string) => {\n\n    const otherCounter: CountersWithPaginationMeta = await fetchCounters({\n      folder_ids: [otherFolderId],\n      channelTypes: [ChannelType.PERSONAL, ChannelType.MULTI],\n    })\n\n    return otherCounter.meta.total\n  }, {\n    condition: (arg: string, thunkAPI) => {\n      const {\n        counters: countersState,\n      }: RootState = <RootState> thunkAPI.getState()\n\n      return !countersState.isFetchingOtherCounter\n    },\n  }\n)\nconst countersSlice: Slice<CountersSlice> = createSlice({\n  name: 'counters',\n  initialState,\n  reducers: {\n    setIsFetchingAll (state: CountersSlice, action: PayloadAction<boolean>) {\n      state.isFetchingAll = action.payload\n    },\n    incrementChannelCounter (state: CountersSlice, action: PayloadAction<MessagesType>) {\n      state.counters[action.payload] += 1\n    },\n    decrementChannelCounter (state: CountersSlice, action: PayloadAction<MessagesType>) {\n      if (state.counters[action.payload] > 0) {\n        state.counters[action.payload] -= 1\n      }\n    },\n  },\n  extraReducers: {\n    [fetchFoldersCounters.fulfilled.type]: state => {\n      state.isFetchingAll = false\n    },\n    [fetchFoldersCounters.rejected.type]: state => {\n      state.counters = {}\n      state.isFetchingAll = false\n    },\n    [fetchPrimaryFolderCounter.fulfilled.type]: (state, action:\n      FulfilledAction<number, ChannelFoldersCounters>) => {\n      state.counters[MessagesType.PRIMARY] = action.payload\n      state.isFetchingPrimaryCounter = false\n    },\n    [fetchPrimaryFolderCounter.rejected.type]: state => {\n      state.counters[MessagesType.PRIMARY] = 0\n      state.isFetchingPrimaryCounter = false\n    },\n    [fetchOtherFolderCounter.fulfilled.type]: (state, action:\n      FulfilledAction<number, ChannelFoldersCounters>) => {\n      state.counters[MessagesType.OTHER] = action.payload\n      state.isFetchingOtherCounter = false\n    },\n    [fetchOtherFolderCounter.rejected.type]: state => {\n      state.counters[MessagesType.OTHER] = 0\n      state.isFetchingOtherCounter = false\n    },\n  },\n})\n\nexport const {\n  setIsFetching,\n  incrementChannelCounter,\n  decrementChannelCounter,\n  setMembers,\n  setMemberIds,\n  setChannelUnreadCount,\n  setChannelUnreadCounts,\n  setIsFetchingAll,\n  setMeta,\n  removeChannel,\n  addChannel,\n  setFetchingFileToken,\n  setFileToken,\n} = countersSlice.actions\n\nexport default countersSlice.reducer\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/channels_slice/channels_slice.ts",["1921","1922","1923","1924","1925","1926","1927","1928","1929","1930","1931","1932","1933","1934","1935","1936","1937","1938","1939","1940","1941","1942","1943","1944"],"import { getEncryptedChannelSecret } from '../selectors'\nimport { createSlice, PayloadAction, createAsyncThunk, Slice, unwrapResult } from '@reduxjs/toolkit'\nimport {\n  ChannelWithParticipants,\n  Message,\n  CountersWithPaginationMeta,\n  Counter,\n  Folder,\n  GetFoldersQuery,\n  FoldersWithPaginationMeta,\n  PaginationMetaParams,\n  FileToken,\n  GetChannelFileTokenParam,\n} from '@globalid/messaging-service-sdk'\nimport { RootState, ThunkAPI, ThunkDispatch } from 'RootType'\nimport {\n  ChannelType,\n  FulfilledAction,\n  RejectedAction,\n  KeyValuePayload,\n  MessageData,\n  ChannelsSlice,\n  ChannelWithMembers,\n  ChannelWithParticipantsAndParsedMessage,\n  FetchChannelsParams,\n  ChannelMembers,\n  FetchChannelProps,\n  FetchExistingChannelParams,\n  LastVisitedFolderState,\n} from '../interfaces'\nimport { Identity, PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { isNil, chain, uniq } from 'lodash'\nimport { getAvatar } from '../../services/api/avatar_api'\nimport {\n  getChannels,\n  getChannelMembers,\n  getChannelCounters,\n  getFolders,\n  getFileToken,\n  searchChannels,\n  getChannel,\n} from '../../services/api/channels_api'\nimport { areArraysEqual } from '../../utils/general_utils'\nimport { RESET_STORE_ACTION } from '../../constants'\nimport { MessagesType } from '../../components/messages/interfaces'\nimport {\n  getChannelStoreKeyFromQueryParam,\n  updateChannelUnreadCount,\n  shouldFetchFileToken,\n  shouldFetchChannel,\n  shouldFetchChannels,\n  shouldFetchFolders,\n  channelToRedux,\n  getChannelArray,\n  getChannelByParticipants,\n  getChannelTitle,\n  filterOutFetchedMembers,\n  getMemberIdentitesFromStore,\n} from './helpers'\nimport { FetchCountersParams, NonServiceChannelTypes } from './interfaces'\nimport { getMessageCardContent } from '../../utils'\nimport { GetChannelParams } from '../../services/api/interfaces'\n\nexport const initialState: ChannelsSlice = {\n  isFetching: {},\n  errors: {},\n  channels: {},\n  members: {},\n  folders: [],\n  isFetchingAll: true,\n  meta: {},\n  fileTokens: {},\n  fileTokensFetching: {},\n  lastVisitedFolder: {\n    folderType: MessagesType.PRIMARY,\n    groupUuid: undefined,\n    channelId: undefined,\n  },\n}\n\nexport const messageToRedux = async (message: Message, encryptedChannelSecret?: string): Promise<MessageData> => ({\n  ...message,\n  errored: false,\n  parsedContent: await getMessageCardContent(message, encryptedChannelSecret),\n})\n\nexport const fetchExistingChannel = createAsyncThunk(\n  'channels/fetchExistingChannel',\n  async ({\n    participants,\n    groupUuid,\n  }: FetchExistingChannelParams, { getState, dispatch }): Promise<ChannelWithParticipants | undefined> => {\n    const type = participants.length > 2 ? ChannelType.MULTI : ChannelType.PERSONAL\n    const channelFromStore: ChannelWithParticipants | undefined\n      = getChannelByParticipants(<RootState>getState(), participants, type, groupUuid)\n\n    const existingChannels: ChannelWithParticipants[] = channelFromStore ?\n      [channelFromStore] :\n      (await searchChannels({}, {\n        participants,\n        channelTypes: [\n          type,\n        ],\n        group_uuid: groupUuid,\n      })).data.channels\n\n    const foundChannel: ChannelWithParticipants | undefined =\n      existingChannels.find((channel: ChannelWithParticipants) =>\n        !channel.deleted &&\n        areArraysEqual(channel.participants, participants)\n      )\n\n    if (foundChannel !== undefined && channelFromStore === undefined) {\n      const members: Identity[] = unwrapResult(await dispatch(fetchMembers({\n        channel_id: foundChannel.id,\n        member_ids: foundChannel.participants.splice(0, 3),\n      })))\n\n      const identityGidUuid: string | undefined = (<RootState> getState()).identity.identity?.gid_uuid\n\n      return { ...foundChannel, title: getChannelTitle(foundChannel, identityGidUuid, members) }\n    }\n\n    return foundChannel\n  })\n\nexport const removeChannelIfExistsForParticipants = createAsyncThunk(\n  'channels/removeChannelIfExistsForParticipants',\n  async ({\n    participants,\n    groupUuid,\n  }: FetchExistingChannelParams, { dispatch }) => {\n    const existingChannel: ChannelWithParticipants | undefined\n      = <ChannelWithParticipants | undefined>(\n        await dispatch(fetchExistingChannel({ participants, groupUuid }))).payload\n\n    if (existingChannel) {\n      dispatch(removeChannel(existingChannel))\n    }\n  })\n\nexport const addChannelIfExistsForParticipants = createAsyncThunk(\n  'channels/addChannelIfExistsForParticipants',\n  async ({\n    participants,\n    groupUuid,\n  }: FetchExistingChannelParams, { dispatch }) => {\n    const existingChannel: ChannelWithParticipants | undefined\n      = <ChannelWithParticipants | undefined>(\n        await dispatch(fetchExistingChannel({ participants, groupUuid }))).payload\n\n    if (existingChannel) {\n      dispatch(addChannel(await channelToRedux(existingChannel)))\n    }\n  })\n\nexport const fetchFileToken = createAsyncThunk(\n  'channels/fetchFileToken',\n  async (props: GetChannelFileTokenParam, thunkAPI): Promise<FileToken> => {\n    thunkAPI.dispatch(setFetchingFileToken({\n      key: props.channel_id,\n      value: true,\n    }))\n\n    return getFileToken(props.channel_id)\n  }, {\n    condition: (props: GetChannelFileTokenParam, thunkAPI) => {\n      const { channels }: RootState = <RootState>thunkAPI.getState()\n\n      return shouldFetchFileToken(props.channel_id, channels)\n    },\n  }\n)\n\nexport const fetchChannelsCounters = createAsyncThunk(\n  'channels/fetchChannelsCounters',\n  async (params: FetchCountersParams, thunkAPI) => {\n    let page: number = 1\n\n    const allChannelTypes: ChannelType[] = [\n      ChannelType.PERSONAL,\n      ChannelType.GROUP,\n      ChannelType.MULTI,\n    ]\n\n    const countersWithMeta: CountersWithPaginationMeta = await getChannelCounters({\n      page,\n      channelTypes: allChannelTypes,\n      group_uuid: params.group_uuid,\n    })\n\n    const totalPages: number = countersWithMeta.meta.total / (countersWithMeta.meta.per_page ?? 100)\n\n    let counters: Counter[] = countersWithMeta.data.counters\n\n    page += 1\n\n    while (page <= totalPages) {\n      const countersWithMetaPage: CountersWithPaginationMeta = await getChannelCounters({\n        page,\n        channelTypes: allChannelTypes,\n        group_uuid: params.group_uuid,\n      })\n\n      counters = [...counters, ...countersWithMetaPage.data.counters]\n      page += 1\n    }\n\n    thunkAPI.dispatch(setChannelUnreadCounts(counters))\n  }\n)\n\nexport const prepareAndStoreChannel = async (\n  channel: ChannelWithParticipants,\n  dispatch: ThunkDispatch,\n  state: RootState,\n): Promise<ChannelWithParticipantsAndParsedMessage> => {\n  const members: Identity[] = unwrapResult(await dispatch(fetchMembers({\n    channel_id: channel.uuid,\n    member_ids: channel.participants.slice(0, 3),\n  })))\n  const identityGidUuid: string | undefined = state.identity.identity?.gid_uuid\n\n  return channelToRedux({ ...channel, title: getChannelTitle(channel, identityGidUuid, members)})\n}\n\nexport const retrieveChannel = async (\n  channel_id: string,\n  dispatch: ThunkDispatch,\n  state: RootState,\n  params?: GetChannelParams | undefined\n): Promise<ChannelWithParticipantsAndParsedMessage> => {\n  const channel: ChannelWithParticipants = await getChannel(channel_id, params)\n\n  return prepareAndStoreChannel(channel, dispatch, state)\n}\n\nexport const fetchChannel = createAsyncThunk(\n  'channels/fetchChannel',\n  async (props: FetchChannelProps, { dispatch, getState }): Promise<ChannelWithParticipantsAndParsedMessage> => {\n    dispatch(setIsFetching({\n      key: props.channelId,\n      value: true,\n    }))\n    try {\n      const channel: ChannelWithParticipantsAndParsedMessage = await retrieveChannel(\n        props.channelId,\n        dispatch,\n        <RootState> getState(),\n        { encrypted: true}\n      )\n\n      return channel\n    } catch (error) {\n      return retrieveChannel(props.channelId, dispatch, <RootState> getState())\n    }\n  }, {\n    condition: ({ channelId, force }: FetchChannelProps, { getState }) => {\n      const { channels }: RootState = <RootState> getState()\n\n      return shouldFetchChannel(channelId, force, channels)\n    },\n  }\n)\n\nexport const fetchChannels\n  = createAsyncThunk<ChannelWithParticipantsAndParsedMessage[], FetchChannelsParams, { state: RootState }>(\n    'channels/fetchChannels',\n    async (\n      queryParams: FetchChannelsParams,\n      { dispatch, getState }\n    ): Promise<ChannelWithParticipantsAndParsedMessage[]> => {\n      const channelStoreKey: string = getChannelStoreKeyFromQueryParam(queryParams)\n\n      const meta: PaginationMetaParams | undefined = getState().channels.meta[channelStoreKey]\n      const hasFetchedBefore: boolean = !isNil(meta?.total)\n\n      if (!hasFetchedBefore) {\n        dispatch(setIsFetchingAll(true))\n      }\n      dispatch(setIsFetching({\n        key: channelStoreKey,\n        value: true,\n      }))\n\n      const response = await getChannels({\n        channelTypes: queryParams.channelTypes,\n        device_id: queryParams.device_id,\n        per_page: queryParams.per_page,\n        page: queryParams.page,\n        folder_ids: queryParams.folder_id ? [queryParams.folder_id] : undefined,\n        group_uuid: queryParams.groupUuid,\n      })\n\n      dispatch(setMeta({\n        key: channelStoreKey,\n        value: response.meta,\n      }))\n\n      const state: RootState = getState()\n\n      return Promise.all(response.data.channels.map(async (channel: ChannelWithParticipants) =>\n        prepareAndStoreChannel(channel, dispatch, state)\n      ))\n    }, {\n      condition: (queryParams: FetchChannelsParams, thunkAPI) => {\n        const { channels }: RootState = thunkAPI.getState()\n\n        return shouldFetchChannels(queryParams, channels)\n      },\n    }\n  )\n\nexport const isFetchingMembersKey = (channelId: string): string =>\n  `members-${channelId}`\n\nexport const fetchMembers = createAsyncThunk<Identity[], ChannelMembers, ThunkAPI>(\n  'channels/fetchMembers',\n  async ({ channel_id, member_ids }: ChannelMembers, { getState, dispatch }): Promise<Identity[]> => {\n    dispatch(setIsFetching({\n      key: isFetchingMembersKey(channel_id),\n      value: true,\n    }))\n\n    const membersInStore: string[] | undefined = (<RootState> getState()).channels.channels[channel_id]?.members\n\n    const unFetchedMemberIds: string[] = filterOutFetchedMembers(membersInStore, member_ids)\n\n    if (unFetchedMemberIds.length === 0) {\n      return getMemberIdentitesFromStore((<RootState> getState()).channels.members, member_ids)\n    }\n\n    const identities: Identity[] = await getChannelMembers(unFetchedMemberIds)\n\n    await Promise.all(identities.map(async (identity: Identity) => {\n      if (isNil(identity.display_image_url)) {\n        await dispatch(fetchMemberAvatar(identity.gid_uuid))\n      }\n    }))\n\n    return identities\n  },\n)\n\nexport const fetchFolders = createAsyncThunk(\n  'channels/folders',\n  async (queryParams: GetFoldersQuery) => {\n    const folders: FoldersWithPaginationMeta = await getFolders(queryParams)\n\n    return folders.data.folders\n  }, {\n    condition: (_queryParams: GetFoldersQuery, thunkAPI) => {\n      const { channels }: RootState = <RootState>thunkAPI.getState()\n\n      return shouldFetchFolders(channels)\n    },\n  }\n)\n\nexport const fetchMemberAvatar = createAsyncThunk(\n  'channels/fetchMemberAvatar',\n  async (gid_uuid: string) => getAvatar(gid_uuid)\n)\n\nexport const setChannels = createAsyncThunk(\n  'channels/setChannels',\n  async (\n    channels: ChannelWithParticipants[], { dispatch, getState }\n  ): Promise<ChannelWithParticipantsAndParsedMessage[]> =>\n    Promise.all(\n      channels.map(async (channel: ChannelWithParticipants): Promise<ChannelWithParticipantsAndParsedMessage> => (\n        prepareAndStoreChannel(channel, dispatch, <RootState> getState()))\n      )\n    )\n)\n\nexport const setChannel = createAsyncThunk(\n  'channels/setChannel',\n  async (channel: ChannelWithParticipants, { dispatch, getState }): Promise<ChannelWithParticipantsAndParsedMessage> =>\n    prepareAndStoreChannel(channel, dispatch, <RootState> getState())\n)\n\nexport const setChannelLastMessage = createAsyncThunk(\n  'channels/setChannelLastMessage',\n  async (payload: KeyValuePayload<Message>, thunkAPI) => {\n\n    const encryptedSecret: string | undefined = getEncryptedChannelSecret(\n      payload.value.channel_id\n    )(<RootState>thunkAPI.getState())\n\n    return messageToRedux(payload.value, encryptedSecret)\n  }\n)\n\nexport const channelsSlice: Slice<ChannelsSlice> = createSlice({\n  name: 'channels',\n  initialState,\n  reducers: {\n    setMeta (state: ChannelsSlice, action: PayloadAction<KeyValuePayload<PaginationMetaParams>>) {\n      state.meta[action.payload.key] = action.payload.value\n    },\n    setIsFetchingAll (state: ChannelsSlice, action: PayloadAction<boolean>) {\n      state.isFetchingAll = action.payload\n    },\n    setIsFetching (state: ChannelsSlice, action: PayloadAction<KeyValuePayload<boolean>>) {\n      state.isFetching[action.payload.key] = action.payload.value\n    },\n    setMembers (state: ChannelsSlice, action: PayloadAction<Identity[]>) {\n      action.payload.map((identity: Identity) => (\n        state.members[identity.gid_uuid] = <PublicIdentity>identity\n      ))\n    },\n    setChannelUnreadCount (state: ChannelsSlice, action: PayloadAction<Counter>) {\n      if (state.channels[action.payload.id] !== undefined) {\n        (<ChannelWithMembers>state.channels[action.payload.id]).channel.unread_count = action.payload.unread_count\n      }\n    },\n    setChannelUnreadCounts (state: ChannelsSlice, action: PayloadAction<Counter[]>) {\n      const counters = action.payload\n      const channelArray = getChannelArray(state.channels)\n\n      state.channels = {\n        ...state.channels,\n        ...chain(channelArray).keyBy('channel.id').mapValues(channel =>\n          updateChannelUnreadCount(channel, counters.find(c => c.id === channel.channel.id)?.unread_count)).value(),\n      }\n    },\n    setMemberIds (state: ChannelsSlice, action: PayloadAction<ChannelMembers>) {\n      const channel = state.channels[action.payload.channel_id]\n\n      if (channel) {\n        channel.members = uniq([...action.payload.member_ids, ...channel.members])\n      }\n    },\n    setFetchingFileToken (state: ChannelsSlice, action: PayloadAction<KeyValuePayload<boolean>>) {\n      state.fileTokensFetching[action.payload.key] = action.payload.value\n    },\n    setFileToken (state: ChannelsSlice, action: PayloadAction<KeyValuePayload<FileToken>>) {\n      state.fileTokens[action.payload.key] = action.payload.value\n    },\n    removeChannel (state: ChannelsSlice, action: PayloadAction<ChannelWithParticipants>) {\n      const channel = state.channels[action.payload.id]?.channel\n\n      if (channel) {\n        delete state.channels[channel.id]\n        const key: string = getChannelStoreKeyFromQueryParam({\n          channelTypes: [<NonServiceChannelTypes>channel.type],\n          folder_id: channel.folder_id,\n        })\n        const meta = state.meta[key]\n\n        if (meta) {\n          state.meta = {\n            ...state.meta,\n            [key]: {\n              ...meta,\n              total: meta.total - 1,\n            },\n          }\n        }\n      }\n    },\n    addChannel (state: ChannelsSlice, action: PayloadAction<ChannelWithParticipantsAndParsedMessage>) {\n      const channel = action.payload\n\n      state.channels[channel.id] = { channel, members: [] }\n      const key = getChannelStoreKeyFromQueryParam({\n        channelTypes: [<NonServiceChannelTypes>channel.type],\n        folder_id: channel.folder_id,\n      })\n      const meta = state.meta[key]\n\n      if (meta) {\n        state.meta = {\n          ...state.meta,\n          [key]: {\n            ...meta,\n            total: meta.total + 1,\n          },\n        }\n      }\n    },\n    setLastVisitedFolder (state: ChannelsSlice, action: PayloadAction<LastVisitedFolderState>) {\n      state.lastVisitedFolder = action.payload\n    },\n  },\n  extraReducers: {\n    [RESET_STORE_ACTION]: (\n      state: ChannelsSlice\n    ) => {\n      Object.assign(state, initialState)\n    },\n    [fetchChannels.fulfilled.type]: (\n      state,\n      action: FulfilledAction<ChannelWithParticipantsAndParsedMessage[], FetchChannelsParams>\n    ) => {\n      state.channels = {\n        ...state.channels,\n        ...chain(action.payload).keyBy('id').mapValues(channel => ({ channel, members: [] })).value(),\n      }\n      const channelStoreKey: string = getChannelStoreKeyFromQueryParam(action.meta.arg)\n\n      state.isFetching[channelStoreKey] = false\n      state.isFetchingAll = false\n    },\n    [fetchChannels.rejected.type]: (state, action: RejectedAction<FetchChannelsParams>) => {\n      const channelStoreKey: string = getChannelStoreKeyFromQueryParam(action.meta.arg)\n\n      state.isFetching[channelStoreKey] = false\n      state.isFetchingAll = false\n    },\n    [fetchChannel.fulfilled.type]: (\n      state,\n      action: FulfilledAction<ChannelWithParticipantsAndParsedMessage, FetchChannelProps>\n    ) => {\n      state.channels[action.meta.arg.channelId] = { channel: action.payload, members: [] }\n      state.isFetching[action.meta.arg.channelId] = false\n      state.errors[action.meta.arg.channelId] = false\n    },\n    [fetchChannel.rejected.type]: (state, action: RejectedAction<FetchChannelProps>) => {\n      state.isFetching[action.meta.arg.channelId] = false\n      state.errors[action.meta.arg.channelId] = true\n    },\n    [fetchMembers.fulfilled.type]: (state, action: FulfilledAction<Identity[], ChannelMembers>) => {\n      const channelId: string = action.meta.arg.channel_id\n\n      action.payload.map((identity: Identity) => (\n        state.members[identity.gid_uuid] = <PublicIdentity>identity\n      ))\n      const channelState: ChannelWithMembers | undefined = state.channels[channelId]\n\n      if (channelState !== undefined) {\n        channelState.members = uniq([\n          ...channelState.members,\n          ...action.payload.map((identity: Identity) => identity.gid_uuid),\n        ])\n      }\n      state.isFetching[isFetchingMembersKey(channelId)] = false\n    },\n    [fetchMembers.rejected.type]: (state, action: RejectedAction<ChannelMembers>) => {\n      const channelId: string = action.meta.arg.channel_id\n      const channel: ChannelWithMembers | undefined = state.channels[channelId]\n\n      if (channel) {\n        channel.members = []\n      }\n      state.isFetching[isFetchingMembersKey(channelId)] = false\n    },\n    [fetchFolders.fulfilled.type]: (state, action: FulfilledAction<Folder[], GetFoldersQuery>) => {\n      state.folders = action.payload\n    },\n    [fetchFolders.rejected.type]: state => {\n      state.folders = []\n    },\n    [fetchMemberAvatar.fulfilled.type]: (state, action: FulfilledAction<string, string>) => {\n      const identity: PublicIdentity | undefined = state.members[action.meta.arg]\n\n      if (identity){\n        state.members[action.meta.arg] = {\n          ...identity,\n          display_image_url: action.payload,\n        }\n      }\n    },\n    [setChannelLastMessage.fulfilled.type]: (state, action: FulfilledAction<MessageData, KeyValuePayload<Message>>) => {\n      const channel_id: string = action.meta.arg.key\n\n      if (state.channels[channel_id] !== undefined) {\n        (<ChannelWithMembers>state.channels[channel_id]).channel.message = action.payload\n      }\n    },\n    [setChannels.fulfilled.type]: (\n      state,\n      action: FulfilledAction<ChannelWithParticipantsAndParsedMessage[], ChannelWithParticipants[]>\n    ) => {\n      state.channels = {\n        ...state.channels,\n        ...chain(action.payload).keyBy('id').mapValues(channel => ({ channel, members: [] })).value(),\n      }\n    },\n    [setChannel.fulfilled.type]: (\n      state,\n      action: FulfilledAction<ChannelWithParticipantsAndParsedMessage, ChannelWithParticipants>\n    ) => {\n      const newChannel: ChannelWithParticipantsAndParsedMessage = action.payload\n\n      state.channels[action.payload.id] = { channel: newChannel, members: [] }\n    },\n    [fetchFileToken.fulfilled.type]: (\n      state,\n      action: FulfilledAction<FileToken, GetChannelFileTokenParam>\n    ) => {\n      state.fileTokens[action.meta.arg.channel_id] = action.payload\n      state.isFetching[action.meta.arg.channel_id] = false\n    },\n    [fetchFileToken.rejected.type]: (state, action: RejectedAction<GetChannelFileTokenParam>) => {\n      state.isFetching[action.meta.arg.channel_id] = false\n    },\n  },\n})\n\nexport const {\n  setIsFetching,\n  setMembers,\n  setMemberIds,\n  setChannelUnreadCount,\n  setChannelUnreadCounts,\n  setIsFetchingAll,\n  setMeta,\n  removeChannel,\n  addChannel,\n  setFetchingFileToken,\n  setFileToken,\n  setLastVisitedFolder,\n} = channelsSlice.actions\n\nexport default channelsSlice.reducer\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/device_key_manager/helpers.ts",["1945","1946","1947","1948"],"import { DeviceKeyManagerErrors } from './interfaces'\nimport {\n  AES_CBC_ALGORITHM,\n  AES_CBC_LENGTH,\n  BASE64_ENCODING,\n  RAW_CRPYTO_KEY_FORMAT,\n  UTF8_ENCODING,\n  HEX_LENGTH,\n  PKCS8_CRPYTO_KEY_FORMAT,\n  RSA_OAEP_ALGORITHM,\n  SHA_1_HASH,\n  SPKI_CRPYTO_KEY_FORMAT,\n} from '../../constants'\n\nimport { util } from 'globalid-crypto'\n\nconst subtleCrypto: SubtleCrypto = window.crypto.subtle\n\nexport const textDecoderUtf8: TextDecoder = new TextDecoder(UTF8_ENCODING)\nexport const textEncoder: TextEncoder = new TextEncoder()\n\nexport const bytesToHex = (bytesArray: Uint8Array): string => {\n  const hex: string[] = []\n\n  bytesArray.forEach((byte: number): void => {\n    hex.push(byte.toString(HEX_LENGTH).padStart(2, '0'))\n  })\n\n  return hex.join('')\n}\nexport const hexToBytes = (hexString: string): Uint8Array => (\n  Uint8Array.from(Buffer.from(hexString, 'hex'))\n)\n\nexport const base64ToBytes = (base64: string): Uint8Array => (\n  Uint8Array.from(Buffer.from(base64))\n)\n\nexport const bytesToBase64 = (bytes: ArrayBuffer): string => (\n  Buffer.from(bytes).toString(BASE64_ENCODING)\n)\n\nexport const randomBytes = (bytes: number): Uint8Array => (\n  Uint8Array.from(window.crypto.getRandomValues(new Uint8Array(bytes)))\n)\n\nexport const getEncodedData = (data: string): Uint8Array => textEncoder.encode(data)\n\nexport const getDecodedData = (data: ArrayBuffer): string => textDecoderUtf8.decode(data)\n\nexport const importChannelSecret = async (channelSecret: string): Promise<CryptoKey> => {\n\n  const channelSecretBuffer: Uint8Array = hexToBytes(channelSecret)\n\n  return subtleCrypto.importKey(\n    RAW_CRPYTO_KEY_FORMAT,\n    channelSecretBuffer,\n    {\n      name: AES_CBC_ALGORITHM,\n      length: AES_CBC_LENGTH,\n    },\n    false,\n    ['encrypt', 'decrypt']\n  )\n}\n\nexport const toUnextractable = async (key: string): Promise<CryptoKey> => {\n  if (!util.isPemKey(key)) {\n    throw new Error(DeviceKeyManagerErrors.INVALID_KEY)\n  }\n  const privateKey: ArrayBufferLike = util.convertPemToBinary(key)\n\n  const cryptoKey: CryptoKey = await subtleCrypto.importKey(\n    PKCS8_CRPYTO_KEY_FORMAT,\n    privateKey,\n    {\n      hash: {\n        name: SHA_1_HASH,\n      },\n      name: RSA_OAEP_ALGORITHM,\n    },\n    false,\n    ['decrypt']\n  )\n\n  return cryptoKey\n}\n\nexport const encryptRSAWithPublicKey = async (key: string, data: string): Promise<string> => {\n  if (!util.isPemKey(key)) {\n    throw new Error(DeviceKeyManagerErrors.INVALID_KEY)\n  }\n\n  const publicKey: ArrayBufferLike = util.convertPemToBinary(key)\n\n  const cryptoKey: CryptoKey = await subtleCrypto.importKey(\n    SPKI_CRPYTO_KEY_FORMAT,\n    publicKey,\n    {\n      name: RSA_OAEP_ALGORITHM,\n      hash: SHA_1_HASH,\n    } ,\n    false,\n    ['encrypt']\n  )\n\n  const encrypted: ArrayBuffer = await subtleCrypto.encrypt(\n    {\n      name: RSA_OAEP_ALGORITHM,\n    },\n    cryptoKey,\n    util.stringToBuffer(data)\n  )\n\n  return util.arrayBufferToBase64(encrypted)\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/counter_helpers.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/use_user_authentication.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/block_users_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/meeting_utils.ts",["1949","1950"],"import { AsyncThunkReturnAction, GetMeetingParams } from './../store/interfaces'\nimport { Identity } from '@globalid/identity-namespace-service-sdk'\nimport { AttendeeResponse } from 'amazon-chime-sdk-component-library-react/lib/providers/MeetingProvider/types'\nimport { ThunkAPI} from 'RootType'\nimport { JoinInfo } from '../components/meetings/interfaces'\nimport { MeetingResponse } from '../services/api/interfaces'\nimport { fetchIdentityByGidUUID } from '../store/identities_slice'\nimport { fetchMeeting as fetchMeetingThunk } from '../store/meetings_slice'\nimport { TIME_TILL_REDIRECT } from '../constants'\n\nexport const fetchMeeting = ({ getState, dispatch }: ThunkAPI) => async (\n  meetingId: string,\n  channelId: string\n): Promise<JoinInfo> => {\n  let meeting: MeetingResponse | undefined = getState().meetings.meetings[meetingId]\n\n  if (meeting === undefined) {\n    const result: AsyncThunkReturnAction<MeetingResponse, GetMeetingParams> =\n        await dispatch(fetchMeetingThunk({ meetingId, channelId }))\n\n    if (result.type !== fetchMeetingThunk.fulfilled.type) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      throw new Error((<any>result).error.message)\n    }\n\n    meeting = <MeetingResponse> result.payload\n  }\n\n  if (meeting.mediaPlacement === null) {\n    throw new Error('MEETING_ERROR')\n  }\n\n  return {\n    meeting: {\n      ExternalMeetingId: null,\n      MediaPlacement: Object.assign(meeting.mediaPlacement),\n      MediaRegion: meeting.mediaRegion,\n      MeetingId: meetingId,\n      Title: meetingId,\n    },\n    attendee: meeting.attendee,\n  }\n}\n\nexport const getAttendee = ({\n  getState,\n  dispatch,\n}: ThunkAPI) => async (\n  _chimeAttendeeId: string,\n  externalUserId?: string\n): Promise<AttendeeResponse> => {\n  const attendeeId: string = externalUserId ? externalUserId : ''\n\n  const attendeeName: string | undefined = getState().identities.identities[attendeeId]?.gid_name\n\n  if (attendeeName === undefined) {\n    const result: Identity = <Identity>(await dispatch(fetchIdentityByGidUUID(attendeeId))).payload\n\n    return {\n      name: result.gid_name,\n    }\n  }\n\n  return {\n    name: attendeeName,\n  }\n}\n\nexport const handleMeetingEnd = (): void => {\n  window.open('','_self')?.close()\n}\n\nexport const handleNoMeeting = (): void => {\n  setTimeout(handleMeetingEnd, TIME_TILL_REDIRECT)\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/full_image_dialog/styles.ts",["1951"],"import { makeStyles, Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  dialogPaper: {\n    borderRadius: 0,\n    backgroundColor: 'transparent',\n  },\n  imageDialog: {\n    padding: 0,\n    margin: 0,\n  },\n  imageTitle: {\n    fontFamily: 'Averta-Semibold',\n    fontSize: '14px',\n    lineHeight: '16px',\n    textAlign: 'center',\n    color: theme.palette.customColors.white,\n  },\n  imageHeader: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '30px',\n  },\n  icon: {\n    cursor: 'pointer',\n    position: 'absolute',\n    right: '30px',\n  },\n  imageContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n    height: '100vh',\n  },\n  image: {\n    opacity: 0.5,\n    width: 'auto',\n    height: 'auto',\n    maxWidth: 'calc(100vw - 156px)',\n    maxHeight: 'calc(100vh - 156px)',\n  },\n  imageBackground: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: theme.palette.customColors.white,\n    maxWidth: '100vw',\n    maxHeight: 'calc(100vh - 156px)',\n    boxShadow: `0px 5px 10px ${theme.palette.customColors.shadowGrey}`,\n  },\n  noOpacity: {\n    opacity: 1,\n    display: 'flex',\n  },\n  displayNone: {\n    display: 'none',\n  },\n  imageThumbnail: {\n    width: 'auto',\n    height: 'auto',\n    maxWidth: 'calc(100vw - 156px)',\n    maxHeight: 'calc(100vh - 156px)',\n  },\n  imageLoader: {\n    position: 'absolute',\n    width: '100%',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n})\n)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/notification_handlers.ts",["1952","1953"],"import { Message } from '@globalid/messaging-service-sdk'\nimport { isNil } from 'lodash'\nimport { RootState } from 'RootType'\nimport { ServiceNotification } from '../services/pubnub/interfaces'\nimport { store } from '../store'\nimport { ChannelWithParticipantsAndParsedMessage } from '../store/interfaces'\nimport { getMessageTypeFormatString, getNotificationTitle } from './notification_utils'\nimport { NotificationPermissionType } from '../store/browser_notifications_slice/interfaces'\nimport { setRedirectToUrl } from '../store/route_slice'\nimport { BASE_MESSAGES_URL } from '../constants'\nimport { MessagesType } from '../components/messages/interfaces'\nimport { getRouteFolderType } from './channel_helpers'\nimport {\n  areBrowserNotificationsDisabledInLocalStorage,\n  isNotificationApiSupported,\n} from '../store/browser_notifications_slice/helpers'\n\ntype NotificationCallback = (\n  channel: string,\n  notification: ServiceNotification,\n) => Promise<void>\n\nconst isRequestPermissionPromiseSupported = async (): Promise<boolean> => {\n  try {\n    await Notification.requestPermission().then()\n  } catch (error) {\n    return false\n  }\n\n  return true\n}\n\nexport const handleRequestPermission = async (\n  callback: (permission: NotificationPermission) => Promise<void>\n): Promise<void> => {\n  if (await isRequestPermissionPromiseSupported()) {\n    const permission: NotificationPermission = await Notification.requestPermission()\n\n    await callback(permission)\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    await Notification.requestPermission(callback)\n  }\n}\n\nexport const emptyNotificationCallback: NotificationCallback = async () =>\n  new Promise(resolve => resolve())\n\nexport const handleBrowserNotification = (\n  callback: NotificationCallback\n): NotificationCallback => async (\n  channel: string,\n  notification: ServiceNotification,\n): Promise<void> => {\n  if (\n    isNotificationApiSupported() &&\n    Notification.permission === NotificationPermissionType.Granted &&\n    !areBrowserNotificationsDisabledInLocalStorage()\n  ) {\n    await callback(channel, notification)\n  }\n}\n\nexport const newMessageNotificationHandler = async (\n  _channelAlias: string,\n  notification: ServiceNotification,\n  // eslint-disable-next-line @typescript-eslint/require-await\n): Promise<void> => {\n  const message: Message = (<Message><unknown>notification.payload)\n\n  const channelId: string = message.channel_id\n\n  const state: RootState = store.getState()\n\n  const channel: ChannelWithParticipantsAndParsedMessage | undefined =\n    state.channels.channels[channelId]?.channel\n\n  const messageAuthor: string = notification.sender\n\n  const notificationFromLoggedInUser: boolean =\n    state.identity.identity?.gid_name === messageAuthor\n\n  if (\n    channel !== undefined &&\n    !isNil(channel.title) &&\n    !notificationFromLoggedInUser\n  ) {\n    const folderId = channel.folder_id ? channel.folder_id : ''\n    const groupUuid: string | undefined = channel.group_uuid ?? undefined\n\n    const title: string = getNotificationTitle(channel, channel.title, state)\n    const redirectTo: string = groupUuid !== undefined\n      ? `${BASE_MESSAGES_URL}/${MessagesType.GROUPS}/${groupUuid}/${channelId}`\n      : `${BASE_MESSAGES_URL}/${getRouteFolderType(state.channels.folders, folderId)}/${channelId}`\n\n    const browserNotification = new Notification(title, {\n      body: `${messageAuthor} ${getMessageTypeFormatString(message)}`,\n      icon: '/globalid_logo.png',\n      tag: message.uuid,\n    })\n\n    browserNotification.onclick = event => {\n      store.dispatch(setRedirectToUrl(redirectTo))\n      event.preventDefault() // prevent the browser from focusing on Notification's tab\n      window.focus()\n    }\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/image_slice.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/channels_api.ts",["1954","1955","1956","1957","1958"],"import { getValidToken } from '../../components/auth'\nimport {\n  GetChannelsQuery,\n  ChannelsWithPaginationMeta,\n  ChannelWithParticipants,\n  getChannels as getChannelsSdk,\n  getChannel as getChannelSdk,\n  CountersWithPaginationMeta,\n  getCounters,\n  AddChannelWithDevicesBody,\n  createMultiDeviceChannel,\n  getFolders as getFoldersSdk,\n  GetFoldersQuery,\n  FoldersWithPaginationMeta,\n  searchByChannels,\n  SearchByChannelsBody,\n  SearchChannelsQuery,\n  updateChannel as updateChannelSdk,\n  LeaveChannelResponse,\n  leaveChannel,\n  FileToken,\n  getChannelFileToken,\n  GetCountersQuery,\n  createChannel as createChannelSDK,\n  AddChannelBody,\n} from '@globalid/messaging-service-sdk'\nimport { Identity } from '@globalid/identity-namespace-service-sdk'\nimport axios, { AxiosResponse } from 'axios'\nimport { deviceKeyManager } from '../../init'\nimport { EditChannelDetails } from '../../components/global/dialogs/edit_channel_dialog'\nimport { API_BASE_URL } from '../../constants'\nimport { GetChannelParams } from './interfaces'\n\nexport const getFolders = async (\n  queryParams: GetFoldersQuery\n): Promise<FoldersWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return getFoldersSdk(token, queryParams)\n}\n\nexport const getChannels = async (\n  queryParams: GetChannelsQuery\n): Promise<ChannelsWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return getChannelsSdk(token, queryParams)\n}\n\nexport const getChannel = async (channelId: string, params?: GetChannelParams): Promise<ChannelWithParticipants> => {\n  const token: string = await getValidToken()\n\n  const deviceId: string | undefined = params?.encrypted === true ? deviceKeyManager.getDeviceId() : undefined\n\n  return getChannelSdk(token, { channel_id: channelId }, { device_id: deviceId })\n}\n\nexport const getChannelMembers = async (uuids: string[]): Promise<Identity[]> => {\n\n  const response: AxiosResponse<Identity[]> = await axios.post<Identity[]>(\n    `${API_BASE_URL}/v1/identities/list`,\n    { gid_uuid: uuids }\n  )\n\n  return response.data\n}\n\nexport const getChannelCounters = async (\n  query: GetCountersQuery\n): Promise<CountersWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return getCounters(token, query)\n}\n\nexport const createChannelE2EE = async (body: AddChannelWithDevicesBody): Promise<ChannelWithParticipants> => {\n  const token: string = await getValidToken()\n\n  return createMultiDeviceChannel(token, body)\n}\n\nexport const createChannel = async (body: AddChannelBody): Promise<ChannelWithParticipants> => {\n  const token: string = await getValidToken()\n\n  return createChannelSDK(token, body)\n}\n\nexport const searchChannels = async (\n  params: SearchChannelsQuery,\n  body: SearchByChannelsBody\n): Promise<ChannelsWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return searchByChannels(token, params, body)\n}\n\nexport const updateChannel = async (\n  channel_id: string,\n  body: EditChannelDetails,\n): Promise<ChannelWithParticipants> => {\n  const token: string = await getValidToken()\n\n  return updateChannelSdk(token, { channel_id }, body)\n}\n\nexport const leaveFromChannel = async (channel_id: string): Promise<LeaveChannelResponse> => {\n  const token: string = await getValidToken()\n\n  return leaveChannel(token, { channel_id })\n}\n\nexport const getFileToken = async (channel_id: string): Promise<FileToken> => {\n  const token: string = await getValidToken()\n\n  return getChannelFileToken(token, { channel_id })\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/form_dialog/form_dialog.tsx",["1959"],"import React, { useEffect } from 'react'\nimport { DialogActions } from '@material-ui/core'\nimport { useStyles } from './styles'\nimport {\n  ButtonState,\n  DefaultFormButton,\n  Dialog as GlobaliDDialog,\n  Form,\n  FormSubmissionState,\n  SecondaryButton,\n} from 'globalid-react-ui'\nimport { useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { FormDialogProps } from '../interfaces'\nimport { getString } from '../../../../utils'\nimport clsx from 'clsx'\nimport ReactHTMLParser from 'react-html-parser'\nimport { useIsMobileView } from '../../helpers'\n\n// eslint-disable-next-line complexity\nexport const FormDialog: React.FC<FormDialogProps> = (props: FormDialogProps) => {\n  const {\n    title,\n    open,\n    fullScreenOnMobile = false,\n    showCancelButton = false,\n    formCancelButtonText,\n    formSubmitButtonText,\n    children,\n    onExit,\n    formId,\n    fieldId,\n    onFormChange,\n    onFormSubmit,\n    fieldDefinition,\n    formTitle,\n    formSubtitle,\n    formDescription,\n    onFormLoad,\n    adornment,\n    dialog,\n    submitButtonColor,\n    className,\n    TransitionComponent: transition,\n  } = props\n\n  const classes = useStyles()\n\n  const isMobile: boolean = useIsMobileView()\n\n  const formValueIsReset = useSelector((state: RootState) => (\n    state.form.forms[formId]?.has_mounted\n    && fieldId !== undefined\n    && state.form.forms[formId]?.form_data?.values[fieldId]?.has_changed !== true)\n  )\n\n  useEffect(() => {\n    if (formValueIsReset && onFormLoad !== undefined) {\n      onFormLoad()\n    }\n  }, [formValueIsReset])\n\n  const formSubmissionState: FormSubmissionState | undefined = useSelector((state: RootState) => state.form.forms[formId]?.form_submission_state)\n  const cancelButtonState = formSubmissionState === FormSubmissionState.IN_PROGRESS ? ButtonState.DISABLED : ButtonState.DEFAULT\n\n  return (\n    <GlobaliDDialog\n      title={title}\n      open={open}\n      onExit={onExit}\n      className={clsx(className, {\n        [classes.formDialogDrawer]: isMobile && !fullScreenOnMobile,\n      }, dialog)}\n      TransitionComponent={transition}\n    >\n      <Form className={classes.formContainer} formId={formId} onSubmit={onFormSubmit} onChange={onFormChange} fieldDefinition={fieldDefinition}>\n        <div className={classes.formContent}>\n          {formSubtitle && <div className={classes.formSubtitle}>\n            {formSubtitle}\n          </div>}\n          {formTitle && <div className={classes.formTitle}>\n            {formTitle}\n          </div>}\n          {children}\n          {formDescription && <div className={classes.formDescription}>\n            {ReactHTMLParser(formDescription)}\n          </div>}\n        </div>\n        <DialogActions className={clsx('dialog-actions', classes.dialogActions)} disableSpacing={true}>\n          <DefaultFormButton color={submitButtonColor} className={classes.submitButton}>\n            {formSubmitButtonText ?? getString('button-text-save')}\n          </DefaultFormButton>\n          {(showCancelButton || formCancelButtonText) && <SecondaryButton buttonState={cancelButtonState} onClick={onExit}>\n            {formCancelButtonText ?? getString('button-text-cancel')}\n          </SecondaryButton>}\n        </DialogActions>\n        {adornment}\n      </Form>\n    </GlobaliDDialog>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/channels_slice/helpers.ts",["1960","1961","1962","1963","1964","1965","1966"],"import {\n  ChannelType,\n  ChannelWithMembers,\n  ChannelWithParticipantsAndParsedMessage,\n  GidUUID,\n  MessagePreviewData,\n  ChannelsSlice,\n  FetchChannelsParams,\n  ChannelsType,\n  MemberByUUID,\n} from '../interfaces'\nimport { isNil, uniq } from 'lodash'\nimport { ChannelQueryParams } from './interfaces'\nimport {\n  ChannelWithParticipants,\n  MessagePreview,\n} from '@globalid/messaging-service-sdk'\nimport {\n  areArraysEqual,\n  getMessageCardContent,\n  hasExpired,\n} from '../../utils'\nimport { getEncryptedChannelSecretFromChannel } from '../selectors'\nimport { RootState } from 'RootType'\nimport { getObjectValues } from '../../components/global/helpers'\nimport { Identity, PublicIdentity } from '@globalid/identity-namespace-service-sdk'\n\nexport const getChannelTitle = (\n  channel: ChannelWithParticipants,\n  identityGidUuid: string | undefined,\n  members: Identity[]\n): string | null | undefined => {\n  if (channel.title) {\n    return channel.title\n  }\n\n  const membersWithoutUser: string[] = channel.participants.filter(\n    (gid_uuid: string) => identityGidUuid !== gid_uuid\n  )\n  const firstParticipant = membersWithoutUser.length > 0 ? members.find(\n    (member: Identity) => member.gid_uuid === membersWithoutUser[0]\n  ) : undefined\n  const secondParticipant = membersWithoutUser.length > 1 ? members.find(\n    (member: Identity) => member.gid_uuid === membersWithoutUser[1]\n  ) : undefined\n\n  if (channel.type === ChannelType.MULTI && !isNil(firstParticipant)) {\n    const addDotsString: string = membersWithoutUser.length > 1 ? ', ...' : ''\n    const secondParticipantGidName: string = !isNil(secondParticipant) ? `, ${secondParticipant.gid_name}${addDotsString}` : ''\n\n    return `${firstParticipant.gid_name} ${secondParticipantGidName}`\n  }\n\n  if (channel.type === ChannelType.PERSONAL && !isNil(firstParticipant)) {\n    return firstParticipant.gid_name\n  }\n\n  return null\n}\n\nexport const updateChannelUnreadCount = (\n  channelWithMembers: ChannelWithMembers,\n  count?: number,\n): ChannelWithMembers => {\n  const members: string[] = channelWithMembers.members\n  const channel: ChannelWithParticipantsAndParsedMessage = channelWithMembers.channel\n\n  const isChannelOpen: boolean = window.location.pathname.includes(channel.id)\n  const updatedUnreadCount: number = isChannelOpen ? 0 : count ?? 0\n\n  return {\n    members,\n    channel: {\n      ...channel,\n      unread_count: updatedUnreadCount,\n    },\n  }\n}\n\nexport const getChannelStoreKeyFromQueryParam = (\n  queryParams: ChannelQueryParams\n): string => {\n  if (!isNil(queryParams.folder_id)) {\n    return queryParams.folder_id\n  }\n  if (!isNil(queryParams.groupUuid)) {\n    return queryParams.groupUuid\n  }\n\n  return queryParams.channelTypes.length === 1 ? queryParams.channelTypes[0] : ''\n}\n\nconst matchChannelByParticipantsAndGroupUuid = (\n  channel: ChannelWithParticipantsAndParsedMessage,\n  gidUuids: GidUUID[],\n  type: ChannelType,\n  groupUuid?: string,\n): boolean => (\n  channel.type === type && areArraysEqual(gidUuids, channel.participants) && channel.group_uuid === groupUuid\n)\n\nexport const getChannelArray = (channels: ChannelsType): ChannelWithMembers[] =>\n  getObjectValues<ChannelsType, ChannelWithMembers>(channels)\n\nexport const getChannelByParticipants = (\n  state: RootState,\n  gidUuids: GidUUID[],\n  type: ChannelType,\n  groupUuid?: string,\n): ChannelWithParticipants | undefined => (\n  (<ChannelWithParticipants | undefined> getChannelArray(state.channels.channels).find(\n    x => matchChannelByParticipantsAndGroupUuid(x.channel, gidUuids, type, groupUuid))?.channel\n  )\n)\n\nexport const channelToRedux = async (\n  channel: ChannelWithParticipants\n): Promise<ChannelWithParticipantsAndParsedMessage> => {\n\n  if (!channel.message) {\n    return ({\n      ...channel,\n      message: undefined,\n    })\n  }\n\n  const messagePreview:MessagePreviewData = await messagePreviewToRedux(\n    channel.message,\n    getEncryptedChannelSecretFromChannel(channel.id)(channel),\n  )\n\n  return ({\n    ...channel,\n    message: messagePreview,\n  })\n}\n\nexport const messagePreviewToRedux = async (\n  messagePreview: MessagePreview,\n  encryptedChannelSecret?: string\n): Promise<MessagePreviewData> => ({\n  ...messagePreview,\n  parsedContent: await getMessageCardContent(messagePreview, encryptedChannelSecret),\n})\n\nexport const shouldFetchFileToken = (\n  channelId: string,\n  channels: ChannelsSlice,\n): boolean =>\n  !channels.fileTokensFetching[channelId] &&\n  (channels.fileTokens[channelId] === undefined || hasExpired(channels.fileTokens[channelId]?.expires_in))\n\nexport const shouldFetchChannel = (\n  channelId: string,\n  force: boolean | undefined,\n  channels: ChannelsSlice,\n): boolean =>\n  !!(force ||\n  !channels.isFetching[channelId] &&\n  (channels.channels[channelId] === undefined || channels.errors[channelId]))\n\nexport const shouldFetchChannels = (\n  queryParams: FetchChannelsParams,\n  channels: ChannelsSlice,\n): boolean => {\n  const channelStoreKey: string = getChannelStoreKeyFromQueryParam(queryParams)\n  const isFetchingAll: boolean = channels.isFetchingAll\n  const isFetching: boolean = channels.isFetching[channelStoreKey] ?? false\n  const total: number = channels.meta[channelStoreKey]?.total ?? 0\n  const isNotAtTheEndOfItems: boolean = (queryParams.page - 1) * queryParams.per_page < total\n\n  return (!isFetching || !isFetchingAll) && (isNotAtTheEndOfItems || total === 0)\n}\n\nexport const shouldFetchFolders = (\n  channels: ChannelsSlice,\n): boolean => !(channels.folders.length > 0)\n\nexport const filterOutFetchedMembers = (membersInStore: string[] | undefined, membersToFetch: string[]): string[] =>\n  membersInStore !== undefined\n    ? membersToFetch.filter((memberToFetch: string) => !membersInStore.includes(memberToFetch))\n    : membersToFetch\n\nexport const getMemberIdentitesFromStore = (membersStore: MemberByUUID, memberUuids: string[]): PublicIdentity[] => {\n  const membersFromStore: PublicIdentity[] = uniq(memberUuids)\n    .reduce((members: PublicIdentity[], memberUuid: string): PublicIdentity[] => {\n      const member: PublicIdentity | undefined = membersStore[memberUuid]\n\n      if (member !== undefined) {\n        return [...members, member]\n      }\n\n      return members\n    }, [])\n\n  return membersFromStore\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/avatar_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/selectors.ts",["1967"],"import { isNil } from 'lodash'\nimport { deviceKeyManager } from './../init'\nimport { RootState } from 'RootType'\nimport { ChannelDeviceSecret, ChannelWithParticipants } from '@globalid/messaging-service-sdk'\n\nexport const getEncryptedChannelSecret\n = (channel_id: string, device_id?: string) => (state: RootState): string | undefined => {\n   const channel: ChannelWithParticipants | undefined\n    = <ChannelWithParticipants | undefined> state.channels.channels[channel_id]?.channel\n\n   return getEncryptedChannelSecretFromChannel(device_id)(channel)\n }\n\nexport const getEncryptedChannelSecretFromChannel\n = (device_id?: string) => (channel: ChannelWithParticipants | undefined): string | undefined => {\n   const primaryChannelSecret: string | undefined\n   = channel?.secret?.encrypted_secret\n\n   const deviceIdToBeSearched: string | undefined = device_id ?? deviceKeyManager.getDeviceId()\n\n   if (deviceIdToBeSearched) {\n     return (channel?.secrets)?.find(\n       (secret: ChannelDeviceSecret) => secret.device_id === deviceIdToBeSearched\n     )?.secret.encrypted_secret ?? primaryChannelSecret\n   }\n\n   return primaryChannelSecret\n }\n\nexport const areChannelSecretsPresent\n = (state: RootState) => (channelId: string): boolean =>\n   !isNil(state.channels.channels[channelId]?.channel.secret)\n || ((state.channels.channels[channelId]?.channel.secrets?.length ?? 0) > 0)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/get_app_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/right_arrow.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/ellipsis_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/settings_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/route_slice/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/dexie_index_db_helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/index_db/dexie_index_db.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/attestations_api.ts",["1968","1969","1970","1971","1972","1973"],"import { API_BASE_URL } from './../../constants'\nimport { App, Category, Type, Agency, GetSingleAppSearchRequests, API } from '@globalid/attestations-types'\nimport axios, { AxiosResponse } from 'axios'\n\nexport const getVerificationApps = async (gid_uuid: string): Promise<App.Model[]> => {\n  const response: AxiosResponse = await axios.get(\n    `${API_BASE_URL}/v1/identity/${gid_uuid}/attestations/latest`\n  )\n\n  return response.data.data\n}\n\nexport const getVerificationsByAgencies = async (\n  app_uuid: string,\n  gid_uuid: string\n): Promise<GetSingleAppSearchRequests.Response> => {\n\n  const response: AxiosResponse = await axios.get(\n    `${API_BASE_URL}/v1/identity/${gid_uuid}/app/${app_uuid}/attestations`\n  )\n\n  return response.data\n}\n\nexport const getAppCategories = async (): Promise<Category.Model[]> => {\n\n  const response: AxiosResponse<Category.Model[]> = await axios.get(\n    `${API_BASE_URL}/v1/attestations/agencies/categories`,\n  )\n\n  return response.data\n}\n\nexport const getAppTypes = async (): Promise<Type.Model[]> => {\n  const response: AxiosResponse<Type.Model[]> = await axios.get(\n    `${API_BASE_URL}/v1/attestations/types`\n  )\n\n  return response.data\n}\n\nexport const getAgencies = async (): Promise<Agency.Model[]> => {\n  const response: AxiosResponse<Agency.Model[]> = await axios.get(\n    `${API_BASE_URL}/v1/attestations/agencies`\n  )\n\n  return response.data\n}\n\nexport const getVerificationPubKey = async (): Promise<API.V1.Attestations.Publickey.GET.Response> => {\n  const response: AxiosResponse<API.V1.Attestations.Publickey.GET.Response> = await axios.get(\n    `${API_BASE_URL}/v1/attestations/publickey`\n  )\n\n  return response.data\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/messages_utils.ts",["1974"],"import { AxiosError } from 'axios'\nimport { setToastError } from 'globalid-react-ui'\nimport _ from 'lodash'\nimport { getValidToken } from '../components/auth'\nimport { toastHandler } from '../components/messages/messenger_chat/chat_message_cards/helpers'\nimport {\n  createImageData,\n  createImagePayload,\n  createMessageData,\n} from '../components/messages/messenger_chat/message_input/helpers'\nimport { MAX_IMAGE_RESOLUTION_HEIGHT, MAX_IMAGE_RESOLUTION_WIDTH, NetworkError } from '../constants'\nimport { createMessagePayload } from '../services/api'\nimport { uploadImage } from '../services/api/file_service_api'\nimport { ResendMessageMeta } from '../services/api/interfaces'\nimport { store } from '../store'\nimport { addChannelMessage, setFailedChannelMessage } from '../store/messages_slice'\nimport {\n  AddMessageBody,\n  AddMessagePayload, MediaAsset,\n  Message, MessageContent, MessageTemplateEncryptedText, MessageTemplateText,\n  sendMessage,\n} from '@globalid/messaging-service-sdk'\nimport { MessageData } from '../store/interfaces'\nimport {\n  getToastContentForNetworkException,\n  isNetworkErrorType,\n  loadFile,\n  scaleToFitImage,\n  validateObjectKeys,\n} from './general_utils'\nimport { v4 } from 'uuid'\nimport { MessageType } from '../components/messages/messenger_chat/interfaces'\nimport { deviceKeyManager } from '../init'\n\nexport const dispatchFailedChannelMessage = (channelId: string, imageValue: { uuid: string }): void => {\n  store.dispatch(setFailedChannelMessage({\n    key: channelId,\n    value: {\n      uuid: imageValue.uuid,\n    },\n  }))\n}\n\nexport const storeMessage = (key: string, value: MessageData, resendingMeta?: ResendMessageMeta): void => {\n  if (resendingMeta === undefined || !resendingMeta.resending) {\n    store.dispatch(addChannelMessage({\n      key,\n      value,\n    }))\n  }\n}\n\nexport const sendMessageToChannel = async (\n  newMessage: string,\n  channelId: string,\n  gid_uuid: string,\n  resendingMeta?: ResendMessageMeta,\n  encryptedChannelSecret?: string,\n): Promise<boolean> => {\n  const token: string = await getValidToken()\n\n  const messageValue: MessageData =\n    createMessageData(newMessage, channelId, gid_uuid, resendingMeta, encryptedChannelSecret)\n\n  storeMessage(channelId, messageValue, resendingMeta)\n\n  try {\n\n    const messagePayload: AddMessagePayload =\n      await createMessagePayload(newMessage, messageValue.uuid, encryptedChannelSecret)\n\n    const messageBody: AddMessageBody = {\n      message: messagePayload,\n      channels: [channelId],\n    }\n\n    const sentMessage: Message[] = await sendMessage(token, messageBody)\n\n    if (_.isEmpty(sentMessage)) {\n      throw new Error('Error sending message')\n    }\n\n  } catch (error) {\n    handleIfNetworkError(error)\n    store.dispatch(setFailedChannelMessage({\n      key: channelId,\n      value: {\n        uuid: messageValue.uuid,\n      },\n    }))\n\n    return false\n\n  }\n\n  return true\n}\n// eslint-disable-next-line max-lines-per-function\nexport const sendImageToChannel = async (\n  image: File,\n  channelId: string,\n  gid_uuid: string,\n  resendingMeta?: ResendMessageMeta,\n): Promise<string | undefined> => {\n  const token: string = await getValidToken()\n\n  const imageBase64: string = await loadFile(image)\n\n  const assetUuid: string = v4()\n\n  const imageValue: MessageData =\n    createImageData(assetUuid, imageBase64, channelId, gid_uuid, resendingMeta)\n\n  storeMessage(channelId, imageValue, resendingMeta)\n  try {\n\n    const scaledImage: File = await scaleToFitImage(image, MAX_IMAGE_RESOLUTION_WIDTH, MAX_IMAGE_RESOLUTION_HEIGHT)\n\n    const asset: MediaAsset = await uploadImage(assetUuid, channelId, scaledImage)\n\n    const imagePayload: AddMessagePayload =\n      createImagePayload(asset, imageValue.uuid)\n\n    const messageBody: AddMessageBody = {\n      message: imagePayload,\n      channels: [channelId],\n    }\n\n    const sentMessages: Message[] = await sendMessage(token, messageBody)\n\n    if (_.isEmpty(sentMessages)) {\n      throw new Error('Error sending message')\n    }\n    const sentMessage: MessageData = {\n      ...sentMessages[0],\n      parsedContent: null,\n      errored: false,\n    }\n\n    storeMessage(channelId, sentMessage)\n  } catch (error) {\n    handleIfNetworkError(error)\n    dispatchFailedChannelMessage(channelId, imageValue)\n\n    return undefined\n  }\n\n  return assetUuid\n}\n\nconst handleIfNetworkError = (error: AxiosError): void => {\n  const networkErrorResponse = error.response?.data\n\n  if (isNetworkErrorType(networkErrorResponse)) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    const { title, message } = getToastContentForNetworkException(<NetworkError> networkErrorResponse.message)\n\n    toastHandler(\n      store.dispatch,\n      setToastError,\n      title ?? '',\n      message,\n    )\n  }\n}\n\nconst textMessageContentValidationKeys: string[] = ['text']\n\nexport const getMessageContent = (message: MessageContent): MessageTemplateText | null => {\n  try {\n    const parsedContent: MessageTemplateText = JSON.parse(message.content)\n\n    validateObjectKeys(parsedContent, textMessageContentValidationKeys)\n\n    return parsedContent\n  } catch (error) {\n    return null\n  }\n}\n\nconst encryptedTextMessageContentValidationKeys: string[] = ['ciphertext', 'encryption_header']\n\nexport const getEncryptedMessageContent = (message: MessageContent): MessageTemplateEncryptedText | null => {\n  try {\n    const parsedContent: MessageTemplateEncryptedText = JSON.parse(message.content)\n\n    validateObjectKeys(parsedContent, encryptedTextMessageContentValidationKeys)\n\n    return parsedContent\n  } catch (error) {\n    return null\n  }\n}\n\nexport const getMessageCardContent = async (\n  message: MessageContent,\n  encryptedChannelSecret?: string\n): Promise<string | null> => {\n  try {\n    if (encryptedChannelSecret !== undefined && message.type === MessageType.ENCRYPTED_TEXT) {\n      const encryptedContent: MessageTemplateEncryptedText | null = getEncryptedMessageContent(message)\n\n      const decryptedContentText: string | null = (encryptedContent === null) ? null :\n        await deviceKeyManager.decrypt(encryptedChannelSecret, encryptedContent)\n\n      return decryptedContentText\n    }\n\n    if (message.type === MessageType.TEXT || message.type === MessageType.DELETED || message.type === MessageType.SYSTEM) {\n      const content: MessageTemplateText | null = getMessageContent(message)\n\n      const contentText: string | null = (content === null) ? null : content.text\n\n      return contentText\n    }\n\n    return null\n  } catch (error) {\n    return null\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/user_helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/meetings_slice.ts",["1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986"],"import { createAsyncThunk, createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { setToastError } from 'globalid-react-ui'\nimport { CREATE_MEETING, FETCH_MEETING } from '../constants'\nimport { createMeeting, getMeeting } from '../services/api'\nimport { MeetingResponse } from '../services/api/interfaces'\nimport { getString } from '../utils'\nimport {\n  CreateMeetingError,\n  CreateMeetingParams,\n  FulfilledAction,\n  GetMeetingParams,\n  KeyValuePayload,\n  MeetingsSlice,\n  RejectedAction,\n  ThunkAPI,\n} from './interfaces'\n\nconst initialState: MeetingsSlice = {\n  isFetching: {},\n  meetings: {},\n}\n\nexport const initiateMeeting = createAsyncThunk<MeetingResponse, CreateMeetingParams, ThunkAPI>(\n  'meetings/initiateMeeting',\n  async (\n    { channelId }: CreateMeetingParams,\n    { dispatch, getState }\n  ): Promise<MeetingResponse> => {\n    const meeting: MeetingResponse | undefined = getState().meetings.meetings[channelId]\n\n    if (meeting) {\n      return meeting\n    }\n\n    dispatch(setIsFetching({\n      key: `${channelId}${CREATE_MEETING}`,\n      value: true,\n    }))\n\n    try {\n      const result: MeetingResponse = await createMeeting(channelId)\n\n      return result\n    } catch (err) {\n      const errorTitle: string = err.response?.data.error_code === CreateMeetingError.ERR_TOO_MANY_CALLS\n        ? getString('too-many-meetings-created-title')\n        : getString('create-meeting-failure-title')\n\n      const errorDescription: string = err.response?.data.error_code === CreateMeetingError.ERR_TOO_MANY_CALLS\n        ? getString('too-many-meetings-created-description')\n        : getString('something-went-wrong')\n\n      dispatch(setToastError({\n        title: errorTitle,\n        message: errorDescription,\n      }))\n\n      throw err\n    }\n  },\n  {\n    condition: (\n      { channelId }: CreateMeetingParams,\n      { getState }\n    ) => {\n      const meetingsState: MeetingsSlice = getState().meetings\n      const isFetching: boolean | undefined = meetingsState.isFetching[`${channelId}${CREATE_MEETING}`]\n\n      return !isFetching\n    },\n  }\n)\n\nexport const fetchMeeting = createAsyncThunk<MeetingResponse, GetMeetingParams, ThunkAPI>(\n  'meetings/fetchMeeting',\n  async (\n    params: GetMeetingParams,\n    { dispatch }\n  ): Promise<MeetingResponse> => {\n    dispatch(setIsFetching({\n      key: `${params.meetingId}${FETCH_MEETING}`,\n      value: true,\n    }))\n\n    try {\n      const response: MeetingResponse = await getMeeting(params.meetingId, params.channelId)\n\n      return response\n    } catch (err) {\n      dispatch(setToastError({\n        title: getString('join-meeting-failure-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw err\n    }\n  },\n  {\n    condition: (\n      { meetingId }:GetMeetingParams,\n      { getState }\n    ) => {\n      const meetingsState: MeetingsSlice = getState().meetings\n      const isFetching: boolean | undefined = meetingsState.isFetching[`${meetingId}${FETCH_MEETING}`]\n\n      return !isFetching && meetingsState.meetings[meetingId] === undefined\n    },\n  }\n)\n\nconst meetingsSlice: Slice<MeetingsSlice> = createSlice({\n  name: 'meetings',\n  initialState,\n  reducers: {\n    setIsFetching (state: MeetingsSlice, action: PayloadAction<KeyValuePayload<boolean>>) {\n      state.isFetching[action.payload.key] = action.payload.value\n    },\n    setMeeting (state: MeetingsSlice, action: PayloadAction<KeyValuePayload<MeetingResponse>>) {\n      state.meetings[action.payload.key] = action.payload.value\n    },\n  },\n  extraReducers: {\n    [initiateMeeting.fulfilled.type]: (\n      state: MeetingsSlice,\n      action: FulfilledAction<MeetingResponse, CreateMeetingParams>\n    ): void => {\n      const params: CreateMeetingParams = action.meta.arg\n      const meetingDetails: MeetingResponse = action.payload\n\n      if (meetingDetails.meetingId !== null) {\n        state.meetings[meetingDetails.meetingId] = action.payload\n      }\n\n      state.isFetching[`${params.channelId}${CREATE_MEETING}`] = false\n    },\n    [initiateMeeting.rejected.type]: (\n      state: MeetingsSlice,\n      action: RejectedAction<CreateMeetingParams>\n    ): void => {\n      const params: CreateMeetingParams = action.meta.arg\n\n      state.isFetching[`${params.channelId}${CREATE_MEETING}`] = false\n    },\n    [fetchMeeting.fulfilled.type]: (\n      state: MeetingsSlice,\n      action: FulfilledAction<MeetingResponse, GetMeetingParams>\n    ): void => {\n      const params: GetMeetingParams = action.meta.arg\n      const meetingDetails: MeetingResponse = action.payload\n\n      if (meetingDetails.meetingId !== null) {\n        state.meetings[meetingDetails.meetingId] = action.payload\n      }\n\n      state.isFetching[`${params.meetingId}${FETCH_MEETING}`] = false\n    },\n    [fetchMeeting.rejected.type]: (\n      state: MeetingsSlice,\n      action: RejectedAction<GetMeetingParams>\n    ): void => {\n      const params: GetMeetingParams = action.meta.arg\n\n      state.isFetching[`${params.meetingId}${FETCH_MEETING}`] = false\n    },\n  },\n})\n\nexport const {\n  setIsFetching,\n  setMeeting,\n  setMeetingId,\n} = meetingsSlice.actions\n\nexport default meetingsSlice.reducer\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/identities_slice.ts",["1987","1988"],"import {\n  PayloadAction,\n  createAsyncThunk,\n  createSlice,\n} from '@reduxjs/toolkit'\nimport {\n  Identities,\n  Identity,\n  PaginationMetaParams,\n} from '@globalid/identity-namespace-service-sdk'\nimport {\n  getIdentitiesLookup,\n  getIdentityPublic,\n} from '../services/api'\nimport {\n  createKeyFromIdentitiesParameters,\n  getIdentitiesPaginationMetaByText,\n  getIdentityByGidName,\n  getIdentityByGidUUID,\n  getIdentityFetchStatusByGidName,\n  getIdentityFetchStatusByGidUUID,\n  getIdentityFetchStatusByParameters,\n} from './identities_selectors'\nimport {\n  FetchIdentitiesParameters,\n  FetchStatus,\n  FulfilledAction,\n  GidName,\n  GidUUID,\n  IdentitiesLookupResult,\n  IdentitiesState,\n  KeyValuePayload,\n  RejectedAction,\n} from './interfaces'\nimport { RootState } from 'RootType'\nimport { META_PER_PAGE } from '../constants'\n\nconst initialState: IdentitiesState = {\n  identities: {},\n  search: {},\n  fetchStatusByGidName: {},\n  fetchStatusByGidUUID: {},\n  fetchStatusByParameters: {},\n}\n\nexport const fetchIdentities = createAsyncThunk(\n  'identities/fetchIdentities',\n  async (parameters: FetchIdentitiesParameters, { dispatch }): Promise<Identities> => {\n    dispatch(setFetchStatusByParameters({\n      key: createKeyFromIdentitiesParameters(parameters),\n      value: FetchStatus.PENDING,\n    }))\n\n    return getIdentitiesLookup({\n      ...parameters,\n      per_page: parameters.per_page ?? META_PER_PAGE,\n      status: 'in_use',\n      type: 'individual',\n    })\n  },\n  {\n    condition: (parameters: FetchIdentitiesParameters, { getState }): boolean => {\n      const state: RootState = <RootState>getState()\n      const fetchStatus: FetchStatus | undefined = getIdentityFetchStatusByParameters(state, parameters)\n\n      if (fetchStatus === FetchStatus.PENDING || fetchStatus === FetchStatus.SUCCESS) {\n        return false\n      }\n      const paginationMeta: PaginationMetaParams | undefined = getIdentitiesPaginationMetaByText(state, parameters.text)\n\n      if (paginationMeta !== undefined && paginationMeta.page !== undefined && parameters.page <= paginationMeta.page) {\n        return false\n      }\n\n      return true\n    },\n  }\n)\n\nexport const fetchIdentityByGidName = createAsyncThunk(\n  'identities/fetchIdentityByGidName',\n  async (gidName: GidName, { dispatch }): Promise<Identity> => {\n    dispatch(setFetchStatusByGidName({\n      key: gidName,\n      value: FetchStatus.PENDING,\n    }))\n\n    const identities: Identities = await getIdentitiesLookup({\n      gid_name: gidName,\n      status: 'in_use',\n    })\n\n    if (Array.isArray(identities.data) && identities.data.length > 0) {\n      return identities.data[0]\n    } else {\n      throw new Error(`No identity found for ${gidName}`)\n    }\n  },\n  {\n    condition: (gidName: GidName, { getState }): boolean => {\n      const state: RootState = <RootState>getState()\n      const fetchStatus: FetchStatus | undefined = getIdentityFetchStatusByGidName(state, gidName)\n\n      if (fetchStatus === FetchStatus.PENDING || fetchStatus === FetchStatus.SUCCESS) {\n        return false\n      }\n      const identity: Identity | undefined = getIdentityByGidName(state, gidName)\n\n      if (identity !== undefined) {\n        return false\n      }\n\n      return true\n    },\n  },\n)\n\nexport const fetchIdentityByGidUUID = createAsyncThunk(\n  'identities/fetchIdentityByGidUUID',\n  async (gidUuid: GidUUID, { dispatch }): Promise<Identity> => {\n    dispatch(setFetchStatusByGidUUID({\n      key: gidUuid,\n      value: FetchStatus.PENDING,\n    }))\n\n    return getIdentityPublic({\n      gid_uuid: gidUuid,\n    })\n  },\n  {\n    condition: (gidUuid: GidUUID, { getState }): boolean => {\n      const state: RootState = <RootState>getState()\n      const fetchStatus: FetchStatus | undefined = getIdentityFetchStatusByGidUUID(state, gidUuid)\n\n      if (fetchStatus === FetchStatus.PENDING || fetchStatus === FetchStatus.SUCCESS) {\n        return false\n      }\n      const identity: Identity | undefined = getIdentityByGidUUID(state, gidUuid)\n\n      if (identity !== undefined) {\n        return false\n      }\n\n      return true\n    },\n  },\n)\n\nconst addIdentityOnSuccess = (state: IdentitiesState, action: PayloadAction<Identity>): void => {\n  const gidName: GidName = action.payload.gid_name\n  const gidUuid: GidUUID = action.payload.gid_uuid\n\n  state.fetchStatusByGidName[gidName] = FetchStatus.SUCCESS\n  state.fetchStatusByGidUUID[gidUuid] = FetchStatus.SUCCESS\n  state.identities[gidUuid] = action.payload\n}\n\nconst identitiesSlice = createSlice({\n  name: 'identities',\n  initialState,\n  reducers: {\n    setFetchStatusByGidName (state: IdentitiesState, action: PayloadAction<KeyValuePayload<FetchStatus>>): void {\n      state.fetchStatusByGidName[action.payload.key] = action.payload.value\n    },\n    setFetchStatusByGidUUID (state: IdentitiesState, action: PayloadAction<KeyValuePayload<FetchStatus>>): void {\n      state.fetchStatusByGidUUID[action.payload.key] = action.payload.value\n    },\n    setFetchStatusByParameters (state: IdentitiesState, action: PayloadAction<KeyValuePayload<FetchStatus>>): void {\n      state.fetchStatusByParameters[action.payload.key] = action.payload.value\n    },\n  },\n  extraReducers: {\n    [fetchIdentities.fulfilled.type]: (\n      state: IdentitiesState,\n      action: FulfilledAction<Identities, FetchIdentitiesParameters>\n    ): void => {\n      const parameters: FetchIdentitiesParameters = action.meta.arg\n      const existingResult: IdentitiesLookupResult | undefined = state.search[parameters.text]\n      const existingEntries: GidUUID[] = existingResult !== undefined ? existingResult.entries : []\n\n      action.payload.data.forEach((identity: Identity) => {\n        const gidUuid: GidUUID = identity.gid_uuid\n\n        state.identities[gidUuid] = identity\n      })\n      const result: IdentitiesLookupResult = {\n        entries: action.payload.data.reduce<GidUUID[]>((entries: GidUUID[], identity: Identity): GidUUID[] => {\n          const gidUuid: GidUUID = identity.gid_uuid\n\n          if (!entries.includes(gidUuid)) {\n            entries.push(gidUuid)\n          }\n\n          return entries\n        }, existingEntries),\n        meta: action.payload.meta,\n      }\n\n      state.search[parameters.text] = result\n      const key: string = createKeyFromIdentitiesParameters(action.meta.arg)\n\n      state.fetchStatusByParameters[key] = FetchStatus.SUCCESS\n    },\n    [fetchIdentities.rejected.type]: (state: IdentitiesState, action: RejectedAction<FetchIdentitiesParameters>): void => {\n      const key: string = createKeyFromIdentitiesParameters(action.meta.arg)\n\n      state.fetchStatusByParameters[key] = FetchStatus.ERROR\n    },\n    [fetchIdentityByGidName.fulfilled.type]: addIdentityOnSuccess,\n    [fetchIdentityByGidName.rejected.type]: (state: IdentitiesState, action: RejectedAction<string>): void => {\n      const gidName: GidName = action.meta.arg\n\n      state.fetchStatusByGidName[gidName] = FetchStatus.ERROR\n    },\n    [fetchIdentityByGidUUID.fulfilled.type]: addIdentityOnSuccess,\n    [fetchIdentityByGidUUID.rejected.type]: (state: IdentitiesState, action: RejectedAction<string>): void => {\n      const gidName: GidName = action.meta.arg\n\n      state.fetchStatusByGidUUID[gidName] = FetchStatus.ERROR\n    },\n  },\n})\n\nconst {\n  setFetchStatusByGidName,\n  setFetchStatusByGidUUID,\n  setFetchStatusByParameters,\n} = identitiesSlice.actions\n\nexport default identitiesSlice.reducer\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/form_helpers.ts",["1989"],"import { FormValues, FormValue, FormValueType, partiallyUpdateValueObject } from 'globalid-react-ui'\n\nexport const formValuesToValues = <T extends Record<string, unknown>>(formValues: FormValues<T>): T => {\n  const values: {\n    [key: string]: FormValueType\n  } = {}\n\n  Object.entries<FormValue>(formValues).map(([name, formValue]: [string, FormValue]) => {\n    if (formValue.has_changed) {\n      values[name] = formValue.value\n    }\n  })\n\n  return <T>values\n}\n\nexport const formSelectedValuesToStrings = <T extends Record<string, unknown>>(formValues: FormValues<T>): string[] =>\n  Object.entries(formValues).reduce<string[]>((array: string[], [name, formValue]: [string, FormValue]) => {\n    if (formValue.value === true) {\n      return [...array, name]\n    }\n\n    return array\n  }, [])\n\nexport const setInitialFormValues = <T extends object, M = string | number>(\n  formId: string,\n  values: T,\n  fieldDefinition: object,\n  selectInputKeys?: (keyof T)[],\n  selectInputMap?: (value: M) => FormValueType,\n): void => {\n  Object.keys(fieldDefinition).forEach((key: string) => {\n    const keyInGroups: keyof T = <keyof T> key\n\n    const value: FormValueType = <FormValueType><unknown> (\n      selectInputKeys !== undefined && selectInputMap !== undefined && selectInputKeys.includes(keyInGroups)\n        ? selectInputMap(<M><unknown> values[keyInGroups])\n        : values[keyInGroups]\n    )\n\n    partiallyUpdateValueObject(\n      formId,\n      key,\n      {\n        value,\n        has_changed: true,\n      }\n    )\n  })\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/delay.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/contact_helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/messaging_api.ts",["1990","1991","1992","1993"],"import {\n  AddMessagePayload,\n  CountersWithPaginationMeta,\n  deleteMessages,\n  getCounters,\n  GetCountersQuery,\n  getMessages,\n  getSubscriptionsV2,\n  Message,\n  MessageSeen,\n  MessagesWithPaginationMeta,\n  MessageTemplateEncryptedText,\n  sendTypingNotification as sendTypingNotificationSdk,\n  setMessageDelivered as setMessageDeliveredSdk,\n  setMessageSeen as setMessageSeenSdk,\n  SubscriptionPaginationQueryParams,\n  PaginationQueryParams,\n  GroupCountersWithPaginationMeta,\n  getGroupSpecificCounters as getGroupSpecificCountersSdk,\n  GroupCounter,\n  getGroupCounters,\n  getCallUser,\n  CallUserBody,\n  ResponseOfCall,\n  createCall,\n} from '@globalid/messaging-service-sdk'\nimport { MessageDelivered, SubscriptionsWithPaginationMeta } from '@globalid/messaging-service-sdk/interfaces'\nimport { getValidToken } from '../../components/auth'\nimport { MessageContent } from '../../components/messages/messenger_chat/chat_message_cards'\nimport { getPayloadType } from '../../components/messages/messenger_chat/message_input/helpers'\nimport { deviceKeyManager } from '../../init'\nimport { MeetingResponse } from './interfaces'\n\nexport const getChannelMessages = async (\n  channel_id: string,\n  queryParams: PaginationQueryParams\n): Promise<MessagesWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return getMessages(token, { channel_id }, queryParams)\n}\n\nexport const getSubscriptions = async (query: SubscriptionPaginationQueryParams):\n  Promise<SubscriptionsWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return getSubscriptionsV2(token, query)\n}\n\nexport const deleteMessageFromChannel = async (ids: string[]): Promise<Message[]> => {\n  const token: string = await getValidToken()\n\n  return deleteMessages(token, { ids })\n}\n\nexport const setMessageSeen = async (message_id: string): Promise<MessageSeen> => {\n  const token: string = await getValidToken()\n\n  return setMessageSeenSdk(token, { message_id })\n}\n\nexport const sendTypingNotification = async (channelId: string): Promise<void> => {\n  const token: string = await getValidToken()\n\n  await sendTypingNotificationSdk(token, { channel_id: channelId })\n}\n\nexport const setMessageDelivered = async (message_id: string): Promise<MessageDelivered> => {\n  const token: string = await getValidToken()\n\n  return setMessageDeliveredSdk(token, { message_id })\n}\n\nexport const fetchCounters = async (query: GetCountersQuery):\n  Promise<CountersWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return getCounters(token, query)\n}\n\nexport const fetchGroupCounters = async (query: PaginationQueryParams):\n  Promise<GroupCountersWithPaginationMeta> => {\n  const token: string = await getValidToken()\n\n  return <GroupCountersWithPaginationMeta> <unknown> getGroupCounters(token, query)\n}\n\nexport const getGroupSpecificCounters = async (groupUuid: string):\n  Promise<GroupCounter> => {\n  const token: string = await getValidToken()\n\n  const counters: GroupCounter =\n    <GroupCounter> <unknown> await getGroupSpecificCountersSdk(token, { group_uuid: groupUuid })\n\n  return counters\n}\n\nexport const createMessagePayload = async (\n  message: string,\n  messageUuid: string,\n  encryptedChannelSecret?: string,\n): Promise<AddMessagePayload> =>\n  (\n    {\n      uuid: messageUuid,\n      type: getPayloadType(encryptedChannelSecret),\n      content: JSON.stringify(await createMessageContent(message, encryptedChannelSecret)),\n      silent: false,\n    }\n  )\n\nexport const createMessageContent = async (message: string, encryptedChannelSecret?: string):\n  Promise<MessageContent | MessageTemplateEncryptedText> => {\n  if (!encryptedChannelSecret) {\n    return {\n      text: message,\n    }\n  }\n\n  try {\n    return await deviceKeyManager.encrypt(encryptedChannelSecret, message)\n  } catch (err) {\n    throw new Error('ERR_ENCRYPTION')\n  }\n}\n\nexport const getMeeting = async (\n  meetingId: string,\n  channelId: string\n): Promise<MeetingResponse> => {\n  const token: string = await getValidToken()\n  const response: CallUserBody = await getCallUser(token, { call_uuid: meetingId, channel_id: channelId})\n\n  return mapToMeetingReponse(response)\n}\n\nexport const createMeeting = async (\n  channelId: string\n): Promise<MeetingResponse> => {\n  const token: string = await getValidToken()\n\n  const response: ResponseOfCall = await createCall(token, { channel_id: channelId })\n\n  return mapToMeetingReponse(response)\n}\n\nconst mapToMeetingReponse = (response: CallUserBody | ResponseOfCall): MeetingResponse => {\n  const { meeting_id, media_region, media_placement, attendee } = response\n\n  return {\n    meetingId: meeting_id,\n    mediaRegion: media_region,\n    mediaPlacement: media_placement,\n    attendee,\n  }\n}\n\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/identity_api.ts",["1994","1995"],"import {\n  getIdentityForUser,\n  PublicIdentity,\n  createIdentityUpdate,\n  IdentityUpdateRequiredBody,\n  IdentityUpdateResponse,\n  IdentityRequestModel,\n  Image,\n  uploadImage,\n  Identity,\n  getIdentityUpdateById,\n  updatePrivateIdentityState,\n} from '@globalid/identity-namespace-service-sdk'\nimport { getValidToken } from '../../components/auth'\nimport { store } from '../../store'\nimport { setIdentity, setLoggedIn, updateIdentity, setProfilePrivacy } from '../../store/identity_slice'\nimport { delay } from '../../utils'\nimport axios, { AxiosResponse } from 'axios'\n\nimport pRetry from 'p-retry'\nimport { IdentityRequestModelStatus, IdentityStatusArgs, ValidateRequestStatusFunction } from './interfaces'\nimport { API_BASE_URL } from '../../constants'\n\n// eslint-disable-next-line no-restricted-syntax\nexport class PhotoRejectedError extends Error {\n  constructor (message: string) {\n    super(message)\n  }\n}\n\nexport const getMyIdentity = async (): Promise<PublicIdentity> => {\n  const token: string = await getValidToken()\n\n  const identity: PublicIdentity = await getIdentityForUser(token)\n\n  store.dispatch(setIdentity(identity))\n  store.dispatch(setLoggedIn())\n\n  return identity\n}\n\nexport const updateIdentityRequest\n  = async (gid_uuid: string, data: IdentityUpdateRequiredBody): Promise<IdentityRequestModel> => {\n    const token: string = await getValidToken()\n\n    const identityResponse: IdentityUpdateResponse = await createIdentityUpdate(data, { gid_uuid }, token)\n\n    const updatedIdentity: IdentityRequestModel | undefined\n      = identityResponse.data.length > 0 ? identityResponse.data[0] : undefined\n\n    if (updatedIdentity === undefined) {\n      throw new Error('ERR_IDENTITY_NOT_UPDATED')\n    }\n\n    if (updatedIdentity.moderation_response) {\n      throw new Error(updatedIdentity.moderation_response)\n    }\n\n    return updatedIdentity\n  }\n\nexport const waitForIdentityRequestStatus = async <T> (\n  status: IdentityRequestModelStatus,\n  pollingFunction: ValidateRequestStatusFunction<T>,\n  args: IdentityStatusArgs,\n): Promise<T> => {\n  args.status = status\n\n  return pRetry(async () => pollingFunction(args), {\n    retries: 5,\n    onFailedAttempt: async () => {\n      await delay(5000)\n    },\n  })\n}\n\nexport const validateIdentityRequestStatus = async (\n  args: IdentityStatusArgs,\n): Promise<IdentityRequestModel> => {\n  const { identity_update_request_uuid, gid_uuid, access_token } = args\n  const updatedIdentity: IdentityRequestModel\n    = await getIdentityUpdateById({ identity_update_request_uuid, gid_uuid }, access_token)\n  const identitiyRequestStatus: IdentityRequestModelStatus = updatedIdentity.status\n\n  if (identitiyRequestStatus === args.status) {\n    return updatedIdentity\n  } else if (identitiyRequestStatus === 'rejected') {\n    throw new pRetry.AbortError('UPDATE_FAILED')\n  }\n  throw new Error('KEEP_POOLING')\n}\n\nexport const poolForIdentityUpdate = async (identityRequest: IdentityRequestModel): Promise<void> => {\n  const token: string = await getValidToken()\n\n  const updatedIdentity = await waitForIdentityRequestStatus<IdentityRequestModel>('approved', validateIdentityRequestStatus, {\n    access_token: token,\n    identity_update_request_uuid: identityRequest.uuid,\n    gid_uuid: identityRequest.gid_uuid,\n  })\n\n  store.dispatch(updateIdentity({\n    [updatedIdentity.field_name]: updatedIdentity.new_value,\n  }))\n}\n\nexport const updateCroppedProfileImage = async (gid_uuid: string, croppedImage: string): Promise<Image> => {\n  const token: string = await getValidToken()\n\n  const response: Image = await uploadImage(token, { gid_uuid }, {\n    data: croppedImage,\n  })\n\n  if (response.status === 'approved' && response.is_main_image) {\n    store.dispatch(updateIdentity({\n      display_image_url: response.url,\n    }))\n\n    return response\n  } else if (response.status === 'rejected' && response.reject_reason) {\n    throw new PhotoRejectedError(response.reject_reason)\n  } else {\n    throw new Error('ERR_IMAGE_NOT_UPDATED')\n  }\n}\n\nexport const getIdentityNameByUuid = async (uuid: string): Promise<string | null> => {\n  const response: AxiosResponse<Identity> = await axios.get<Identity>(\n    `${API_BASE_URL}/v1/identities/${uuid}`\n  )\n\n  return response.data.gid_name\n}\n\nexport const setPrivateIdentityState = async (isPrivate: boolean): Promise<void> => {\n  const token: string = await getValidToken()\n\n  await updatePrivateIdentityState(token, { is_private: isPrivate })\n  store.dispatch(setProfilePrivacy(isPrivate))\n}\n\nexport const getIdentitiesList = async (uuids: string[]): Promise<Identity[]> => {\n  const response: AxiosResponse<Identity[]> = await axios.post<Identity[]>(\n    `${API_BASE_URL}/v1/identities/list`,\n    { gid_uuid: uuids }\n  )\n\n  return response.data\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/identities_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/contacts_api.ts",["1996","1997","1998","1999"],"import _ from 'lodash'\n\nimport axios, { AxiosResponse } from 'axios'\nimport {\n  IdentityContactsQueryParams,\n  MutualContacts,\n} from '@globalid/identity-namespace-service-sdk'\nimport { addContact, removeContact, init } from '@globalid/contacts-service-sdk'\nimport { getValidToken } from '../../components/auth'\nimport { store } from '../../store'\nimport { addContact as addContactToStore, removeContactById } from '../../store/contacts_slice'\nimport { API_BASE_URL } from '../../constants'\n\ninit(API_BASE_URL)\n\nexport const getMyContactsList = async (queryParams: IdentityContactsQueryParams): Promise<MutualContacts> => {\n  const token: string = await getValidToken()\n\n  const response: AxiosResponse = await axios.request(\n    {\n      url: `${API_BASE_URL}/v1/identities/me/contacts`,\n      params: queryParams,\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  )\n\n  return response.data\n}\n\nexport const canAddToContacts = async (gid_name: string): Promise<boolean> => {\n  const token: string = await getValidToken()\n\n  const response: AxiosResponse = await axios.request(\n    {\n      url: `${API_BASE_URL}/v1/identities/me/contacts?gid_name=${gid_name}`,\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  )\n\n  return _.isEmpty(response.data.data)\n}\n\nexport const addToContacts = async (gid_uuid: string, gid_name: string): Promise<void> => {\n  const token: string = await getValidToken()\n\n  await addContact(token, { gid_uuid })\n\n  const response: AxiosResponse = await axios.request(\n    {\n      url: `${API_BASE_URL}/v1/identities/me/contacts?gid_name=${gid_name}`,\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  )\n\n  if (response.data.data[0] === undefined) {\n    throw new Error('ERR_ADDING_CONTACT')\n  }\n\n  store.dispatch(addContactToStore(response.data.data[0]))\n}\n\nexport const removeFromContacts = async (gid_name: string): Promise<void> => {\n  const token: string = await getValidToken()\n\n  const response: AxiosResponse = await axios.request(\n    {\n      url: `${API_BASE_URL}/v1/identities/me/contacts?gid_name=${gid_name}`,\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  )\n\n  if (response.data.data[0] === undefined) {\n    throw new Error('ERR_REMOVING_CONTACT')\n  }\n\n  await removeContact(token, { contact_uuid: response.data.data[0].contact_uuid })\n  store.dispatch(removeContactById(response.data.data[0].contact_uuid))\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/notification_utils.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/browser_notifications_store.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/form_dialog/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/route_slice/route_slice.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/messages_slice.ts",["2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023"],"import {\n  createSlice,\n  PayloadAction,\n  createAsyncThunk,\n  createEntityAdapter,\n  EntityAdapter,\n  EntityState,\n  Slice,\n} from '@reduxjs/toolkit'\nimport {\n  MessagesWithPaginationMeta,\n  Message,\n  MessageSeen,\n  Typing,\n  MessageTemplateEncryptedText,\n  MessageContent,\n  MessagePreview,\n  MessageTemplateMediaWithEncryptedText,\n  MessageTemplateMedia,\n} from '@globalid/messaging-service-sdk'\nimport { getChannelMessages, setMessageDelivered, setMessageSeen } from '../services/api'\nimport { RootState } from 'RootType'\nimport { validateObjectKeys, getEncryptedMessageContent, getMessageCardContent } from '../utils'\nimport {\n  FetchMessagesParams,\n  SeenMessagesParams,\n  FulfilledAction,\n  RejectedAction,\n  MessagesSlice,\n  KeyValuePayload,\n  MessageData,\n  MessageDataWithPaginationMeta,\n  MessagePreviewData,\n  ThunkAPI,\n  FetchMembersFromMessagesParams,\n} from './interfaces'\nimport { deviceKeyManager } from '../init'\nimport { getEncryptedChannelSecret } from './selectors'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { uniq } from 'lodash'\nimport { fetchMembers } from './channels_slice/channels_slice'\n\nconst MessagesSliceState: MessagesSlice = {\n  isFetching: {},\n  messages: {},\n  errors: {},\n  meta: {},\n  message_seen: {},\n  last_message_seen: {},\n  typing: {},\n}\n\nconst encryptedTextMessageContentValidationKeys: string[] = ['ciphertext', 'encryption_header']\nconst mediaMessageContentValidationKeys: string[] = ['text', 'assets', 'list_view_type']\n\nexport const getMediaMessageContent = (message: MessageContent): MessageTemplateMedia | null => {\n  try {\n    const parsedContent: MessageTemplateMedia = JSON.parse(message.content)\n\n    validateObjectKeys(parsedContent, mediaMessageContentValidationKeys)\n\n    return parsedContent\n  } catch (error) {\n    return null\n  }\n}\n\nexport const messageToRedux = async (message: Message, encryptedChannelSecret?: string): Promise<MessageData> => ({\n  ...message,\n  errored: false,\n  parsedContent: await getMessageCardContent(message, encryptedChannelSecret),\n})\n\nexport const messagePreviewToRedux = async (\n  messagePreview: MessagePreview,\n  encryptedChannelSecret?: string\n): Promise<MessagePreviewData> => ({\n  ...messagePreview,\n  parsedContent: await getMessageCardContent(messagePreview, encryptedChannelSecret),\n})\n\nexport const getEncryptedMediaMessageContent = (message: MessageContent): MessageTemplateEncryptedText | null => {\n  try {\n    const parsedMediaContent: MessageTemplateMediaWithEncryptedText = JSON.parse(message.content)\n\n    if (parsedMediaContent.text !== undefined) {\n      const parsedContent: MessageTemplateEncryptedText = {\n        ciphertext: parsedMediaContent.text.ciphertext,\n        encryption_header: parsedMediaContent.encryption_header,\n      }\n\n      validateObjectKeys(parsedContent, encryptedTextMessageContentValidationKeys)\n\n      return parsedContent\n    }\n\n    return null\n  } catch (error) {\n    return null\n  }\n}\n\nconst getMembersFromMessages = (messages: Message[]): string[] => uniq(\n  messages.map((message: Message) => message.author)\n)\n\nconst fetchMembersFromMessages = async ({\n  dispatch,\n  channelId,\n  messages,\n  channelParticipants,\n}: FetchMembersFromMessagesParams): Promise<void> => {\n  const messageAuthors: string[] = getMembersFromMessages(messages)\n  const messageAuthorsFromParticipants = messageAuthors.filter((author: string) => (\n    channelParticipants !== undefined && channelParticipants.includes(author)\n  ))\n\n  await dispatch(fetchMembers({\n    channel_id: channelId,\n    member_ids: messageAuthorsFromParticipants,\n  }))\n}\n\nexport const fetchChannelMessages = createAsyncThunk<MessageDataWithPaginationMeta, FetchMessagesParams, ThunkAPI>(\n  'messages/fetchChannelMessages',\n  async (\n    {channelId, page, per_page}: FetchMessagesParams,\n    { dispatch, getState }\n  ): Promise<MessageDataWithPaginationMeta> => {\n    dispatch(setIsFetching({\n      key: channelId,\n      value: true,\n    }))\n\n    const channelParticipants: string[] | undefined = getState().channels.channels[channelId]?.channel.participants\n\n    const messagesWithPaginationMeta: MessagesWithPaginationMeta = await getChannelMessages(\n      channelId,\n      { page, per_page }\n    )\n\n    await fetchMembersFromMessages({\n      dispatch,\n      channelId,\n      messages: messagesWithPaginationMeta.data.messages,\n      channelParticipants,\n    })\n\n    const encryptedSecret: string | undefined = getEncryptedChannelSecret(\n      channelId\n    )(getState())\n\n    return {\n      messages: await Promise.all(\n        messagesWithPaginationMeta.data.messages\n          .map(async (message: Message) => messageToRedux(message, encryptedSecret))\n      ),\n      message_seen: messagesWithPaginationMeta.data.message_seen,\n      meta: messagesWithPaginationMeta.meta,\n    }\n  }, {\n    condition: (params: FetchMessagesParams, thunkAPI) => {\n      const messagesState: MessagesSlice = (thunkAPI.getState()).messages\n\n      const channel_id: string = params.channelId\n      const messages: EntityState<MessageData> | undefined= messagesState.messages[channel_id]\n      const totalFetchedMessages: number = messages ? messagesSelectors.selectAll(messages).length: 0\n\n      const channelTotal: number | undefined = messagesState.meta[channel_id]?.total\n\n      return !messagesState.isFetching[channel_id]\n      && (totalFetchedMessages < params.page * params.per_page)\n      && (channelTotal ? (totalFetchedMessages < channelTotal): true)\n    },\n  }\n)\n\nexport const setChannelMessages = createAsyncThunk(\n  'messages/setChannelMessages',\n  async (\n    setMessagesParams: KeyValuePayload<MessagesWithPaginationMeta>,\n    thunkAPI,\n  ): Promise<MessageDataWithPaginationMeta> => {\n    const encryptedSecret: string | undefined = getEncryptedChannelSecret(\n      setMessagesParams.key\n    )(<RootState>thunkAPI.getState())\n\n    return {\n      messages: await Promise.all(\n        setMessagesParams.value.data.messages.map(async (message: Message) => messageToRedux(message, encryptedSecret))\n      ),\n      message_seen: setMessagesParams.value.data.message_seen,\n      meta: setMessagesParams.value.meta,\n    }\n  },\n)\n\nexport const parseChannelMessage = async (\n  message: Message,\n  encryptedSecret?: string,\n): Promise<MessageData> => {\n  const encryptedContent: MessageTemplateEncryptedText | null = getEncryptedMessageContent(message)\n\n  const messageData: MessageData = await messageToRedux(message)\n\n  if (encryptedSecret === undefined || encryptedContent === null) {\n    return messageData\n  }\n\n  const decryptedMessageContent: string = await deviceKeyManager.decrypt(encryptedSecret, encryptedContent)\n\n  return {\n    ...messageData,\n    parsedContent: decryptedMessageContent,\n  }\n\n}\n\nexport const upsertAndParseChannelMessage = createAsyncThunk(\n  'messages/upsertAndParseChannelMessage',\n  async (message: Message, thunkAPI): Promise<MessageData> => {\n\n    const encryptedSecret: string | undefined = getEncryptedChannelSecret(\n      message.channel_id,\n    )(<RootState>thunkAPI.getState())\n\n    return parseChannelMessage(message, encryptedSecret)\n  },\n)\n\nexport const upsertAndParseChannelMessages = createAsyncThunk(\n  'messages/upsertAndParseChannelMessages',\n  async (payload: KeyValuePayload<Message[]>, thunkAPI): Promise<MessageData[]> => {\n\n    const encryptedSecret: string | undefined = getEncryptedChannelSecret(payload.key)(<RootState>thunkAPI.getState())\n\n    return Promise.all(payload.value.map(async (message: Message) => parseChannelMessage(message, encryptedSecret)))\n  },\n)\n\nconst getLastMessage = (\n  channel_id: string,\n  identityUuid: string,\n  messagesState: MessagesSlice\n): MessageData | undefined => {\n  const messages = <EntityState<MessageData>>messagesState.messages[channel_id]\n  const messagesData = messagesSelectors.selectAll(messages)\n  const filteredMessages\n    = messagesData\n      .filter(message => message.id !== undefined && message.author !== identityUuid)\n\n  return filteredMessages.length > 0 ?\n    filteredMessages.reduce<MessageData>((prev: MessageData, current: MessageData) => (\n      prev.sequence_id && current.sequence_id ?\n        (prev.sequence_id > current.sequence_id) ?\n          prev : current : prev),\n    filteredMessages[0]\n    ) : undefined\n}\n\nexport const setMessagesSeenAndDelieveredForChannel = createAsyncThunk(\n  'messages/setMessagesSeenAndDelieveredForChannel',\n  async (params: SeenMessagesParams, thunkAPI) => {\n\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.channel_id}-seen-${params.identityUuid}`,\n      value: true,\n    }))\n\n    const identityState: PublicIdentity | undefined = (<RootState>thunkAPI.getState()).identity.identity\n\n    const messagesState: MessagesSlice = (<RootState>thunkAPI.getState()).messages\n    const lastMessage = getLastMessage(params.channel_id, params.identityUuid, messagesState)\n\n    if (lastMessage) {\n      if (!lastMessage.delivered && lastMessage.author !== identityState?.gid_uuid) {\n        await setMessageDelivered(<string>lastMessage.id)\n      }\n\n      const lastMessageSeen = await setMessageSeen(<string>lastMessage.id)\n\n      thunkAPI.dispatch(setLastMessageSeen(lastMessageSeen))\n    }\n\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.channel_id}-seen-${params.identityUuid}`,\n      value: false,\n    }))\n  }, {\n    condition: (params: SeenMessagesParams, thunkAPI) => {\n      const messagesState: MessagesSlice = (<RootState>thunkAPI.getState()).messages\n\n      const lastMessage: MessageData | undefined = getLastMessage(params.channel_id, params.identityUuid, messagesState)\n      const lastMessageSeen: MessageSeen | undefined = messagesState.last_message_seen[params.channel_id]\n\n      const wasLastMessageSeen = lastMessageSeen !== undefined ? lastMessageSeen.message_id === lastMessage?.id : false\n\n      const isFetching: boolean | undefined = messagesState.isFetching[`${params.channel_id}-seen-${params.identityUuid}`]\n\n      return messagesState.messages[params.channel_id] !== undefined && !wasLastMessageSeen && !isFetching\n    },\n  }\n)\n\nexport const setChannelMessageDelivered = createAsyncThunk(\n  'messages/setChannelMessageDelivered',\n  async (message: Message, thunkAPI) => {\n\n    const identityState: PublicIdentity | undefined = (<RootState>thunkAPI.getState()).identity.identity\n\n    if (message.author !== identityState?.gid_uuid) {\n      await setMessageDelivered(message.id)\n    }\n  },\n)\n\nconst messagesAdapter: EntityAdapter<MessageData> = createEntityAdapter<MessageData>({\n  selectId: (message: MessageData) => message.uuid,\n  sortComparer: (a: MessageData, b: MessageData) => Date.parse(b.created_at) - Date.parse(a.created_at),\n})\n\nconst messagesSlice: Slice<MessagesSlice> = createSlice({\n  name: 'messages',\n  initialState: MessagesSliceState,\n  reducers: {\n    removeChannelMessages (state: MessagesSlice, action: PayloadAction<string>) {\n      state.messages[action.payload] = undefined\n      state.meta[action.payload] = undefined\n      state.isFetching[action.payload] = undefined\n      state.errors[action.payload] = undefined\n    },\n    setIsFetching (state: MessagesSlice, action: PayloadAction<KeyValuePayload<boolean>>) {\n      state.isFetching[action.payload.key] = action.payload.value\n    },\n    removeChannelMessage (state: MessagesSlice, action: PayloadAction<KeyValuePayload<string>>) {\n      const channel_id: string = action.payload.key\n\n      state.messages[channel_id] = messagesAdapter.removeOne(\n        <EntityState<MessageData>>state.messages[channel_id],\n        action.payload.value,\n      )\n    },\n    setFailedChannelMessage (state: MessagesSlice, action: PayloadAction<KeyValuePayload<{ uuid: string }>>) {\n      const channel_id: string = action.payload.key\n\n      state.messages[channel_id] = messagesAdapter.updateOne(\n        <EntityState<MessageData>>state.messages[channel_id],\n        {\n          id: action.payload.value.uuid,\n          changes: {\n            errored: true,\n          },\n        }\n      )\n    },\n    setDelieveredMessage (state: MessagesSlice, action: PayloadAction<KeyValuePayload<{ uuid: string }>>) {\n      const channel_id: string = action.payload.key\n\n      if (state.messages[channel_id]) {\n        state.messages[channel_id] = messagesAdapter.updateOne(\n        <EntityState<MessageData>>state.messages[channel_id],\n        {\n          id: action.payload.value.uuid,\n          changes: {\n            delivered: true,\n          },\n        })\n      }\n    },\n    setSeenMessage (state: MessagesSlice, action: PayloadAction<KeyValuePayload<MessageSeen>>) {\n      const channel_id: string = action.payload.key\n\n      state.message_seen[channel_id] = action.payload.value\n    },\n    addChannelMessage (state: MessagesSlice, action: PayloadAction<KeyValuePayload<MessageData>>) {\n      if (state.messages[action.payload.key] !== undefined) {\n        state.messages[action.payload.key] = messagesAdapter.upsertOne(\n          <EntityState<MessageData>>state.messages[action.payload.key],\n          action.payload.value,\n        )\n      } else {\n        const initialMessagesState = messagesAdapter.getInitialState()\n\n        state.messages[action.payload.key] = messagesAdapter.upsertOne(\n          initialMessagesState,\n          action.payload.value\n        )\n      }\n    },\n    setLastMessageSeen (state: MessagesSlice, action: PayloadAction<MessageSeen>) {\n      state.last_message_seen[action.payload.channel_id] = action.payload\n    },\n    setTyping (state: MessagesSlice, action: PayloadAction<Typing>) {\n      state.typing[action.payload.channel_id] = action.payload\n    },\n    resetTyping (state: MessagesSlice, action: PayloadAction<{channelId: string}>) {\n      delete state.typing[action.payload.channelId]\n    },\n  },\n  extraReducers: {\n    [fetchChannelMessages.fulfilled.type]: (\n      state: MessagesSlice,\n      action: FulfilledAction<MessageDataWithPaginationMeta, FetchMessagesParams>\n    ) => {\n      const channel_id: string = action.meta.arg.channelId\n\n      if (state.messages[channel_id] !== undefined) {\n\n        state.messages[channel_id] = messagesAdapter.upsertMany(\n          <EntityState<MessageData>>state.messages[channel_id],\n          action.payload.messages\n        )\n\n        state.meta[channel_id] = action.payload.meta\n      } else {\n        const initialMessagesState = messagesAdapter.getInitialState()\n\n        state.messages[channel_id] = messagesAdapter.addMany(initialMessagesState, action.payload.messages)\n\n        state.meta[channel_id] = action.payload.meta\n      }\n      state.message_seen = {\n        ...state.message_seen,\n        [channel_id]: action.payload.message_seen,\n      }\n      state.isFetching[channel_id] = false\n      state.errors[channel_id] = false\n    },\n    [fetchChannelMessages.rejected.type]: (state: MessagesSlice, action: RejectedAction<FetchMessagesParams>) => {\n      state.isFetching[action.meta.arg.channelId] = false\n      state.errors[action.meta.arg.channelId] = true\n    },\n    [upsertAndParseChannelMessage.fulfilled.type]: (\n      state: MessagesSlice,\n      action: FulfilledAction<MessageData, Message>\n    ) => {\n      const channel_id: string = action.payload.channel_id\n\n      if (state.messages[channel_id] !== undefined) {\n        state.messages[channel_id] = messagesAdapter.upsertOne(\n          <EntityState<MessageData>>state.messages[channel_id],\n          action.payload\n        )\n      } else {\n        const initialMessagesState = messagesAdapter.getInitialState()\n\n        state.messages[channel_id] = messagesAdapter.upsertOne(\n          initialMessagesState,\n          action.payload\n        )\n      }\n    },\n    [upsertAndParseChannelMessages.fulfilled.type]: (\n      state: MessagesSlice,\n      action: FulfilledAction<MessageData[], KeyValuePayload<Message[]>>\n    ) => {\n      const channel_id: string = action.meta.arg.key\n\n      if (state.messages[channel_id] !== undefined) {\n        state.messages[channel_id] = messagesAdapter.upsertMany(\n          <EntityState<MessageData>>state.messages[channel_id],\n          action.payload\n        )\n      } else {\n        const initialMessagesState = messagesAdapter.getInitialState()\n\n        state.messages[channel_id] = messagesAdapter.upsertMany(\n          initialMessagesState,\n          action.payload\n        )\n      }\n    },\n    [setChannelMessages.fulfilled.type]: (\n      state: MessagesSlice,\n      action: FulfilledAction<MessageDataWithPaginationMeta, KeyValuePayload<MessagesWithPaginationMeta>>\n    ) => {\n      const channel_id: string = action.meta.arg.key\n\n      if (state.messages[channel_id] !== undefined) {\n\n        state.messages[channel_id] = messagesAdapter.upsertMany(\n          <EntityState<MessageData>>state.messages[channel_id],\n          action.payload.messages\n        )\n\n        state.meta[channel_id] = action.payload.meta\n      } else {\n        const initialMessagesState = messagesAdapter.getInitialState()\n\n        state.messages[channel_id] = messagesAdapter.addMany(initialMessagesState, action.payload.messages)\n\n        state.meta[channel_id] = action.payload.meta\n      }\n      state.message_seen = {\n        ...state.message_seen,\n        [channel_id]: action.payload.message_seen,\n      }\n      state.isFetching[channel_id] = false\n      state.errors[channel_id] = false\n    },\n  },\n})\n\nexport const {\n  setLastMessageSeen,\n  setIsFetching,\n  addChannelMessage,\n  setFailedChannelMessage,\n  removeChannelMessage,\n  removeChannelMessages,\n  setTyping,\n  resetTyping,\n  setDelieveredMessage,\n  setSeenMessage,\n} = messagesSlice.actions\n\nexport default messagesSlice.reducer\n\nexport const messagesSelectors = messagesAdapter.getSelectors()\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/file_service_api.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/identities_selectors.ts",["2024"],"import {\n  Identity,\n  PaginationMetaParams,\n} from '@globalid/identity-namespace-service-sdk'\nimport {\n  FetchIdentitiesParameters,\n  FetchStatus,\n  GidName,\n  GidUUID,\n  IdentitiesLookupResult,\n} from './interfaces'\nimport { RootState } from 'RootType'\n\nexport const createKeyFromIdentitiesParameters = (parameters: FetchIdentitiesParameters): string => (\n  `${parameters.text}_${parameters.page}`\n)\n\nexport const getIdentitiesByText = (state: RootState, text: string = ''): Identity[] => {\n  if (text.length > 0) {\n    const result: IdentitiesLookupResult | undefined = state.identities.search[text]\n\n    if (result !== undefined) {\n      return result.entries.reduce<Identity[]>((identities: Identity[], gidUuid: GidUUID): Identity[] => {\n        const identity: Identity | undefined = getIdentityByGidUUID(state, gidUuid)\n\n        if (identity !== undefined) {\n          identities.push(identity)\n        }\n\n        return identities\n      }, [])\n    }\n  }\n\n  return []\n}\n\nexport const getIdentitiesPaginationMetaByText = (state: RootState, text: string = ''): PaginationMetaParams | undefined => {\n  if (text.length > 0) {\n    const result: IdentitiesLookupResult | undefined = state.identities.search[text]\n\n    if (result !== undefined) {\n      return result.meta\n    }\n  }\n}\n\nexport const getIdentityByGidName = (state: RootState, gidName: GidName): Identity | undefined => (\n  (Object.values(state.identities.identities)).find((identity: Identity | undefined) => (\n    identity && identity.gid_name.toUpperCase() === gidName.toUpperCase()\n  ))\n)\n\nexport const getIdentityByGidUUID = (state: RootState, gidUuid: GidUUID): Identity | undefined => (\n  state.identities.identities[gidUuid]\n)\n\nexport const getIdentityFetchStatusByGidName = (state: RootState, gidName: GidName): FetchStatus | undefined => (\n  state.identities.fetchStatusByGidName[gidName]\n)\n\nexport const getIdentityFetchStatusByGidUUID = (state: RootState, gidUuid: GidUUID): FetchStatus | undefined => (\n  state.identities.fetchStatusByGidUUID[gidUuid]\n)\n\nexport const getIdentityFetchStatusByParameters = (\n  state: RootState,\n  parameters: FetchIdentitiesParameters\n): FetchStatus | undefined => {\n  const key: string = createKeyFromIdentitiesParameters(parameters)\n\n  return state.identities.fetchStatusByParameters[key]\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/contacts_slice.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/meetings.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/notify_browser_notifications_disabled_thunk.ts",["2025","2026","2027"],"import { AsyncThunk, createAsyncThunk } from '@reduxjs/toolkit'\nimport { setToastSuccess } from 'globalid-react-ui'\nimport { ExtraReducerFulfilled } from '../interfaces'\nimport { BrowserNotificationsSlice, BrowserNotificationsSliceBuilder } from './interfaces'\nimport { getString } from '../../utils'\n\nexport const notifyBrowserNotificationsDisabled: AsyncThunk<void, void, {}> = createAsyncThunk(\n  'browserNotifications/disableNotifications',\n  (_, { dispatch }) => {\n    dispatch(setToastSuccess({\n      title: getString('browser-notifications-disabled-toast-title'),\n      message: getString('browser-notifications-disabled-toast-message'),\n    }))\n  }\n)\n\nconst fulfilledReducer: ExtraReducerFulfilled<void, void, BrowserNotificationsSlice> = (\n  state: BrowserNotificationsSlice\n) => {\n  state.isPromptVisible = false\n}\n\nexport const addDisableBrowserNotificationsReducers = (\n  builder: BrowserNotificationsSliceBuilder\n): BrowserNotificationsSliceBuilder =>\n  builder.addCase(notifyBrowserNotificationsDisabled.fulfilled.type, fulfilledReducer)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/browser_notifications_slice/notify_browser_notifications_enabled_thunk.ts",["2028","2029","2030"],"import { AsyncThunk, createAsyncThunk } from '@reduxjs/toolkit'\nimport { setToastSuccess } from 'globalid-react-ui'\nimport { ExtraReducerFulfilled } from '../interfaces'\nimport { BrowserNotificationsSlice, BrowserNotificationsSliceBuilder } from './interfaces'\nimport { getString } from '../../utils'\n\nexport const notifyBrowserNotificationsEnabled: AsyncThunk<void, void, {}> = createAsyncThunk(\n  'browserNotifications/enableNotifications',\n  (_, { dispatch }) => {\n    dispatch(setToastSuccess({\n      title: getString('browser-notifications-enabled-toast-title'),\n      message: getString('browser-notifications-enabled-toast-message'),\n    }))\n  }\n)\n\nconst fulfilledReducer: ExtraReducerFulfilled<void, void, BrowserNotificationsSlice> = (\n  state: BrowserNotificationsSlice\n) => {\n  state.isPromptVisible = false\n}\n\nexport const addEnableBrowserNotificationsReducers = (\n  builder: BrowserNotificationsSliceBuilder\n): BrowserNotificationsSliceBuilder =>\n  builder.addCase(notifyBrowserNotificationsEnabled.fulfilled.type, fulfilledReducer)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/page_not_found.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/profile_not_found.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/reducer_builder.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/helpers.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/image_media_helpers.ts",["2031","2032","2033","2034","2035","2036","2037"],"import {\n  FileToken,\n  MediaAsset,\n  EncryptedMediaAsset,\n  MessageEncryptionHeader,\n  MessageTemplateEncryptedMedia,\n  MessageTemplateEncryptedText,\n  MessageTemplateMedia,\n  MessageTemplateMediaWithEncryptedText,\n} from '@globalid/messaging-service-sdk'\nimport { getImageFromAws, getString } from '../../../../utils'\nimport {\n  CommonImageMediaType,\n  ImageMessageContentTemplate,\n  MediaAssets,\n  ImageState,\n  GetImageWrapperStylesParams,\n  ImageDisplayWrapperProps,\n  ImageComponentStates,\n  MediaAssetParsedData,\n  MessageCardStylesType,\n  SetMediaDataParams,\n  GetDownloadImageHandlerParams,\n  ReplaceMediaAssetsParams,\n  AssetWithIndex,\n} from './interfaces'\nimport { SetStateAction } from 'react'\nimport warningIcon from '../../../../assets/icons/warning_icon.svg'\nimport warningIconGray from '../../../../assets/icons/warning_icon_gray.svg'\nimport { deviceKeyManager } from '../../../../init'\nimport { isNil } from 'lodash'\nimport clsx from 'clsx'\n\nexport const retrieveSmallThumbnail = (asset: MediaAsset | null): string | null =>\n  asset?.thumbnails.small ?? null\n\nexport const retrieveMediumThumbnail = (asset: MediaAsset | null): string | null => asset?.thumbnails.medium ?? null\n\nexport const retrieveOriginalMedia = (asset: MediaAsset | null): string | null => asset?.url ?? null\n\nexport const retrieveEncryptedThumbnail = async (\n  asset: EncryptedMediaAsset | null,\n  numberOfImages: number,\n  encryptedChannelSecret: string,\n  encryptionHeader: MessageEncryptionHeader,\n): Promise<string | null> => {\n  if (asset === null) {\n    return null\n  }\n\n  const encryptedContent: MessageTemplateEncryptedText = {\n    ciphertext: numberOfImages === 1\n      ? asset.thumbnails.medium.ciphertext\n      : asset.thumbnails.small.ciphertext,\n    encryption_header: encryptionHeader,\n  }\n\n  return deviceKeyManager.decrypt(encryptedChannelSecret, encryptedContent)\n}\n\nexport const retrieveEncryptedMediumThumbnail = async (\n  asset: EncryptedMediaAsset | null,\n  encryptedChannelSecret: string,\n  encryptionHeader: MessageEncryptionHeader,\n): Promise<string | null> => {\n  if (asset === null) {\n    return null\n  }\n\n  const encryptedContent: MessageTemplateEncryptedText = {\n    ciphertext: asset.thumbnails.medium.ciphertext,\n    encryption_header: encryptionHeader,\n  }\n\n  return deviceKeyManager.decrypt(encryptedChannelSecret, encryptedContent)\n}\n\nexport const retrieveEncryptedOriginalMedia = async (\n  asset: EncryptedMediaAsset | null,\n  encryptedChannelSecret: string,\n  encryptionHeader: MessageEncryptionHeader,\n): Promise<string | null> => {\n  if (asset === null) {\n    return null\n  }\n\n  const encryptedContent: MessageTemplateEncryptedText = {\n    ciphertext: asset.url.ciphertext,\n    encryption_header: encryptionHeader,\n  }\n\n  return deviceKeyManager.decrypt(encryptedChannelSecret, encryptedContent)\n}\n\nexport const retrieveImageFile = (parsedContent: string): File => {\n  const base64Image: string = JSON.parse(parsedContent).assets[0].thumbnail\n  const fileType: string = base64Image.slice(base64Image.indexOf(':') + 1, base64Image.indexOf(';'))\n  const byteString: string = atob(base64Image.split(',')[1])\n  const arrayBuffer: Uint8Array = new Uint8Array(new ArrayBuffer(byteString.length))\n\n  for (let i = 0; i < byteString.length; i += 1) {\n    arrayBuffer[i] = byteString.charCodeAt(i)\n  }\n  const newFile: File = <File> (new Blob([arrayBuffer], { type: fileType }))\n\n  return newFile\n}\n\nexport const retrieveThumbnailLink = async <T extends MediaAsset | EncryptedMediaAsset>(\n  token: FileToken,\n  asset: MediaAsset | EncryptedMediaAsset,\n  numberOfImages: number,\n  encryptedChannelSecret?: string,\n  encryptionHeader?: MessageEncryptionHeader,\n): Promise<string | undefined> => {\n  if (encryptedChannelSecret !== undefined && encryptionHeader !== undefined) {\n    const encryptedThumbnailLink: string | null = await retrieveEncryptedThumbnail(\n      <T extends EncryptedMediaAsset ? EncryptedMediaAsset : null> asset,\n      numberOfImages,\n      encryptedChannelSecret,\n      encryptionHeader,\n    )\n\n    if (encryptedThumbnailLink === null) {\n      return\n    }\n\n    return getImageFromAws(encryptedThumbnailLink, token)\n  }\n\n  const thumbnailLink: string | null = retrieveSmallThumbnail(\n    <T extends MediaAsset ? MediaAsset : null> asset\n  )\n\n  if (thumbnailLink === null) {\n    return\n  }\n\n  return getImageFromAws(thumbnailLink, token)\n}\n\nexport const getParsedImageMessageContent = (content: string): CommonImageMediaType | null => {\n  try {\n    const parsedMediaContent: CommonImageMediaType = JSON.parse(content)\n\n    return parsedMediaContent\n  } catch (err) {\n    return null\n  }\n}\n\nexport const getImageMessageTemplateContent = (content: string | null | undefined): ImageMessageContentTemplate | null => {\n  if (!content) {\n    return null\n  }\n  try {\n    const parsedMediaContentTemplate: ImageMessageContentTemplate = JSON.parse(content)\n\n    return parsedMediaContentTemplate\n  } catch (err) {\n    return null\n  }\n}\n\nexport const getMediaDataSetter = (setMediaAssets: React.Dispatch<SetStateAction<MediaAssets>>) => ({\n  assetUuid,\n  ...params\n}: SetMediaDataParams): void => setMediaAssets((prev: MediaAssets) => {\n  const prevAsset: MediaAssetParsedData | undefined = prev[assetUuid]\n\n  if (prevAsset !== undefined) {\n    return {\n      ...prev,\n      [assetUuid]: {\n        ...prevAsset,\n        ...params,\n      },\n    }\n  }\n\n  return {\n    ...prev,\n    [assetUuid]: {\n      ...params,\n      imageState: params.imageState ?? ImageState.LOADING,\n    },\n  }\n})\n\nexport const getReplaceMediaAssets = (setMediaAssets: React.Dispatch<SetStateAction<MediaAssets>>) => ({\n  oldAssetUuid,\n  newAssetUuid,\n}: ReplaceMediaAssetsParams): void => setMediaAssets((prev: MediaAssets) => {\n  const prevAsset: MediaAssetParsedData | undefined = prev[oldAssetUuid]\n\n  if (prevAsset !== undefined) {\n    return {\n      [newAssetUuid]: {\n        ...prevAsset,\n        imageState: ImageState.LOADING,\n      },\n      [oldAssetUuid]: undefined,\n    }\n  }\n\n  return prev\n})\n\nexport const getImagesCount = (\n  parsedMessageContent: CommonImageMediaType | null,\n  parsedMessageContentTemplate: ImageMessageContentTemplate | null\n): number => {\n  if (parsedMessageContentTemplate !== null) {\n    return parsedMessageContentTemplate.assets.length\n  }\n  if (parsedMessageContent !== null) {\n    return parsedMessageContent.assets.length\n  }\n\n  return 0\n}\n\nexport const getMediaText = async (\n  hasText: boolean,\n  isTextEncrypted: boolean,\n  parsedMessageContent: CommonImageMediaType | null,\n  parsedMessageContentTemplate: ImageMessageContentTemplate | null,\n  encryptedChannelSecret?: string,\n): Promise<string | null> => {\n  if (!hasText) {\n    return null\n  }\n\n  const parsedContent: MessageTemplateMedia | null = <MessageTemplateMedia | null> parsedMessageContent\n  const parsedEncryptedContent: MessageTemplateMediaWithEncryptedText | null =\n    <MessageTemplateMediaWithEncryptedText | null> parsedMessageContent\n\n  if (parsedMessageContentTemplate?.text !== undefined) {\n    return parsedMessageContentTemplate.text\n  } else if (!isTextEncrypted && parsedContent?.text !== undefined) {\n    return parsedContent.text\n  } else if (\n    isTextEncrypted &&\n    parsedMessageContent !== null &&\n    encryptedChannelSecret !== undefined &&\n    parsedEncryptedContent?.text?.ciphertext !== undefined\n  ) {\n    const ciphertext: string = parsedEncryptedContent.text.ciphertext\n\n    const encryptionHeader: MessageEncryptionHeader = (<MessageTemplateEncryptedMedia> parsedMessageContent)\n      .encryption_header\n\n    const encryptedTextTemplate: MessageTemplateEncryptedText = {\n      ciphertext,\n      encryption_header: encryptionHeader,\n    }\n\n    return deviceKeyManager.decrypt(encryptedChannelSecret, encryptedTextTemplate)\n  }\n\n  return null\n}\n\nexport const topLeftImageIsCurved = (\n  index: number,\n  hasText: boolean,\n): boolean => index === 0 && !hasText\n\nexport const topRightImageIsCurved = (\n  index: number,\n  numberOfImages: number,\n  hasText: boolean,\n): boolean => numberOfImages < 3\n  ? index === numberOfImages - 1 && !hasText\n  : index === 2 && !hasText\n\nexport const bottomLeftImageIsCurved = (\n  index: number,\n  numberOfImages: number,\n): boolean => numberOfImages < 4\n  ? index === 0\n  : numberOfImages < 7\n    ? index === 3\n    : index === 6\n\nexport const bottomRightImageIsCurved = (\n  index: number,\n  numberOfImages: number,\n): boolean => numberOfImages < 4\n  ? index === numberOfImages - 1\n  : numberOfImages < 7\n    ? index === 5\n    : index === 8\n\nexport const getImageBorderStyle = (\n  {\n    imageTopLeftBorder,\n    imageTopRightBorder,\n    imageBottomLeftBorder,\n    imageBottomRightBorder,\n  }: MessageCardStylesType,\n  index: number,\n  numberOfImages: number,\n  hasText: boolean,\n): string => clsx({\n  [imageTopLeftBorder]: topLeftImageIsCurved(index, hasText),\n  [imageTopRightBorder]: topRightImageIsCurved(index, numberOfImages, hasText),\n  [imageBottomLeftBorder]: bottomLeftImageIsCurved(index, numberOfImages),\n  [imageBottomRightBorder]: bottomRightImageIsCurved(index, numberOfImages),\n})\n\n// eslint-disable-next-line complexity\nexport const getStylesWrapperProps = ({\n  classes,\n  imageLink,\n  hasLoaded,\n  hasErrored,\n  isLoading,\n  isMessageMine,\n  index,\n  numberOfImages,\n  hasText,\n}: GetImageWrapperStylesParams): ImageDisplayWrapperProps => {\n  const imageBorderStyle: string = getImageBorderStyle(classes, index, numberOfImages, hasText)\n\n  return ({\n    imageContainer: `${classes.imageContainer} ${hasLoaded && (isLoading || hasErrored) ? classes.transparent : ''}`,\n    imageGridContainer: `${clsx(classes.imageGridContainer, imageBorderStyle) } ${hasLoaded && (isLoading || hasErrored) ? classes.transparent : ''}`,\n    imageLoadingContent: classes.imageLoadingContent,\n    imageMessageContent: classes.imageMessageContent,\n    imageSrc: imageLink,\n    infoIconForeground: clsx({\n      [classes.imageBackground]: (!hasLoaded && isLoading) || (hasLoaded && hasErrored),\n      [classes.transparent]: (!hasLoaded && isLoading) || (hasLoaded && hasErrored),\n    }, imageBorderStyle, classes.infoIconForeground),\n    background: clsx({\n      [classes.placeholderBackground]: !hasLoaded,\n      [classes.imageBackground]: hasLoaded,\n    }, imageBorderStyle),\n    placeholderBackground: clsx(classes.placeholderBackground, imageBorderStyle),\n    circularProgress: classes.circularProgress,\n    relative: classes.relative,\n    imageStyling: hasLoaded ? classes.imageContainer : classes.imageHidden,\n    warningIcon: isMessageMine ? warningIcon : warningIconGray,\n  })\n}\n\nexport const getImageComponentState = (\n  mediaAssets: MediaAssets,\n  isSendingError: boolean\n): ImageComponentStates => (\n  Object.keys(mediaAssets).reduce((imageComponentStates: ImageComponentStates, assetUuid: string) => {\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    if (asset !== undefined) {\n      const { imageState, imageSrc } = asset\n\n      const showLoading: boolean = imageState === ImageState.LOADING\n      const showError: boolean = imageState === ImageState.ERROR || isSendingError\n      const showImage: boolean = (!showError || isSendingError) && !isNil(imageSrc)\n\n      return {\n        ...imageComponentStates,\n        [assetUuid]: {\n          showLoading,\n          showError,\n          showImage,\n        },\n      }\n    }\n\n    return imageComponentStates\n  }, {})\n)\n\nexport const getAssetByUuid = (\n  assetUuid: string,\n  parsedMessageContent: CommonImageMediaType | null,\n  isMediaEncrypted: boolean,\n): AssetWithIndex | undefined => (\n  isMediaEncrypted\n    ? (<MessageTemplateEncryptedMedia | null> parsedMessageContent)?.assets.reduce((\n      assetWithIndex: AssetWithIndex | undefined,\n      asset: EncryptedMediaAsset,\n      index: number,\n    ) => asset.uuid === assetUuid ? {\n      asset,\n      index,\n    } : assetWithIndex, undefined)\n    : (<MessageTemplateMedia | MessageTemplateMediaWithEncryptedText | null> parsedMessageContent)?.assets.reduce((\n      assetWithIndex: AssetWithIndex | undefined,\n      asset: MediaAsset,\n      index: number,\n    ) => asset.uuid === assetUuid ? {\n      asset,\n      index,\n    } : assetWithIndex, undefined)\n)\n\nexport const getMediaErrorAdornment = (\n  isResending: boolean,\n  isSendingError: boolean,\n  mediaAssets: MediaAssets,\n  latestAssetUuid?: string,\n  latestState?: ImageState\n): string | undefined => {\n  if (isResending) {\n    return\n  }\n\n  if (isSendingError) {\n    return getString('image-message-send-failed')\n  }\n\n  const isDownloadError: boolean = Object.keys(mediaAssets).some(\n    (assetUuid: string) => {\n      const mediaAsset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n      return latestAssetUuid !== undefined && assetUuid === latestAssetUuid && latestState !== undefined\n        ? latestState === ImageState.ERROR\n        : mediaAsset?.imageState === ImageState.ERROR\n    }\n  )\n\n  if (isDownloadError) {\n    return getString('image-message-download-failed')\n  }\n}\n\n// eslint-disable-next-line max-lines-per-function\nexport const getDownloadImageHandler = ({\n  classes,\n  fileToken,\n  setMediaData,\n  isMediaEncrypted,\n  numberOfImages,\n  encryptedChannelSecret,\n  encryptionHeader,\n  text,\n  isMessageMine,\n}: GetDownloadImageHandlerParams) => async (\n  isMounted: () => boolean,\n  asset: EncryptedMediaAsset | MediaAsset,\n  index: number,\n): Promise<void> => {\n\n  if (fileToken !== undefined) {\n    const awsImageLink: string | undefined = (\n      await retrieveThumbnailLink(\n        fileToken,\n        asset,\n        numberOfImages,\n        isMediaEncrypted ? encryptedChannelSecret : undefined,\n        isMediaEncrypted ? encryptionHeader : undefined,\n      )\n    )\n\n    const styleWrapperProps: ImageDisplayWrapperProps = getStylesWrapperProps({\n      classes,\n      imageLink: awsImageLink,\n      hasLoaded: false,\n      hasErrored: false,\n      isLoading: true,\n      isMessageMine,\n      index,\n      numberOfImages,\n      hasText: text !== undefined,\n    })\n\n    if (isMounted()) {\n      setMediaData({\n        assetUuid: asset.uuid,\n        imageSrc: awsImageLink,\n        imageState: ImageState.LOADING,\n        styleWrapperProps,\n        mediaAsset: !isMediaEncrypted ? <MediaAsset> asset : undefined,\n        encryptedMediaAsset: isMediaEncrypted ? <EncryptedMediaAsset> asset : undefined,\n        index,\n      })\n    }\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/loading_splash_screen.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/globalid_loader.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/loading/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/theme.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_handler.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/no_meeting_redirect.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/not_found_pages/styles.ts",["2038"],"import { makeStyles, Theme, createStyles } from '@material-ui/core'\n\nexport const useStyles =\n  makeStyles((theme: Theme) =>\n    createStyles({\n      pageNotFoundWrapper:{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 52,\n        position: 'relative',\n      },\n\n      backgroundPic:{\n        marginTop: '100px',\n        height: 353,\n        width: 369,\n        [theme.breakpoints.between('sm','sm')]:{\n          height: 281,\n          width: 293,\n        },\n        [theme.breakpoints.down('xs')]:{\n          height: 228,\n          width: 238,\n        },\n      },\n\n      returnToLogin:{\n        marginTop: theme.spacing(6),\n        textAlign: 'center',\n      },\n\n      comingSoon: {\n        maxWidth:'278px',\n        marginTop: '56px',\n        fontFamily: 'Averta-Bold',\n        fontSize: '20px',\n        lineHeight: '23px',\n        textAlign: 'center',\n      },\n\n      description: {\n        maxWidth: '367px',\n        marginTop: '24px',\n        color: theme.palette.customColors.lightGrey,\n        fontFamily: 'Averta-Regular',\n        fontSize: '15px',\n        lineHeight: '18px',\n        textAlign: 'center',\n      },\n\n      buttonText: {\n        fontSize: '16px',\n      },\n    })\n  )\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/notifications.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/providers/error_provider.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/providers/navigation_provider.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/providers/app_state_provider.tsx",["2039"],"/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable unicorn/filename-case */\n// Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext, useState, PropsWithChildren } from 'react'\nimport { getString } from '../../../utils'\nimport { AppStateValue, LayoutType } from './interfaces'\nimport { Theme, Layout } from '../enums'\n\nexport const AppStateContext = React.createContext<AppStateValue | null>(null)\n\nexport const useAppState = (): AppStateValue => {\n  const state: AppStateValue | null = useContext(AppStateContext)\n\n  if (!state) {\n    throw new Error(getString('meeting-useappstate-error'))\n  }\n\n  return state\n}\nexport const AppStateProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\n  const [meetingId, setMeeting] = useState<string | null>(null)\n  const [region, setRegion] = useState<string>('')\n  const [localUserName, setLocalName] = useState<string>('')\n  const [theme, setTheme] = useState<string>(() => {\n    const storedTheme: string | null = localStorage.getItem('theme')\n\n    return storedTheme ?? Theme.LIGHT\n  })\n\n  const [layout, setLayout] = useState<LayoutType>(() => {\n    const storedTheme: string | null = localStorage.getItem('layout')\n\n    return (storedTheme ?? Layout.Featured) as LayoutType\n  })\n\n  const toggleTheme = (): void => {\n    if (theme === Theme.LIGHT) {\n      setTheme(Theme.DARK)\n      localStorage.setItem('theme', Theme.DARK)\n    } else {\n      setTheme(Theme.LIGHT)\n      localStorage.setItem('theme', Theme.LIGHT)\n    }\n  }\n\n  const toggleLayout = (): void => {\n    if (layout === Layout.Featured) {\n      setLayout(Layout.Standard)\n      localStorage.setItem('layout', Layout.Standard)\n    } else {\n      setLayout(Layout.Featured)\n      localStorage.setItem('layout', Layout.Featured)\n    }\n  }\n\n  const setAppMeetingInfo = (\n    _meetingId: string,\n    _name: string,\n    _region: string\n\n  ): void => {\n    setRegion(_region)\n    setMeeting(_meetingId)\n    setLocalName(_name)\n  }\n\n  const providerValue = {\n    meetingId,\n    localUserName,\n    theme,\n    layout,\n    region,\n    toggleTheme,\n    toggleLayout,\n    setAppMeetingInfo,\n  }\n\n  return (\n    <AppStateContext.Provider value={providerValue}>\n      {children}\n    </AppStateContext.Provider>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/chat_beginning_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/deleted_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/system_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/text_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/enums/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/overlay/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/info_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/message_grouping_hooks.tsx",["2040","2041","2042","2043"],"import { getString, getAvatarUrl } from '../../../../utils'\nimport { useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { useMessageGroupingStyles, MessageGroupingClasses } from './styles'\nimport React from 'react'\nimport { Skeleton } from '../../../global/skeletons'\nimport { getFormattedFullDateTimestamp } from '../../helpers'\nimport { MESSAGE_TIMESTAMP_15_MINUTES_LIMIT } from '../../../../constants'\nimport { ChatMessageHooksResponse, ChatMessageHooksProps, MessageDataParsed } from './interfaces'\nimport { MessageData } from '../../../../store/interfaces'\nimport { MessageType } from '../interfaces'\n\nexport const areMessagesFromSameAuthor = (messageA: MessageData | null, messageB: MessageData | null): boolean => (\n  messageA !== null && messageB !== null && messageA.author === messageB.author\n)\n\nexport const getIsGroupFirstMessage = (\n  prevMessage: MessageData | null,\n  message: MessageData,\n): boolean => {\n  if (prevMessage === null) {\n    return true\n  }\n\n  const isTimestampSeparated: boolean = areTimestampSeparatedMessages(prevMessage, message)\n\n  if (isTimestampSeparated) {\n    return true\n  }\n\n  const isPrevMessageFromSameAuthor: boolean = areMessagesFromSameAuthor(prevMessage, message)\n  const prevIsSystemMessage: boolean = getIsSystemMessage(prevMessage)\n\n  return prevIsSystemMessage || !isPrevMessageFromSameAuthor\n}\n\nexport const getIsGroupMiddleMessage = (\n  prevMessage: MessageData | null,\n  message: MessageData,\n  nextMessage: MessageData | null\n): boolean => {\n  if (prevMessage === null || nextMessage === null) {\n    return false\n  }\n  const isPrevTimestampSeparated: boolean = areTimestampSeparatedMessages(prevMessage, message)\n  const isNextTimestampSeparated: boolean = areTimestampSeparatedMessages(message, nextMessage)\n\n  if (isPrevTimestampSeparated || isNextTimestampSeparated) {\n    return false\n  }\n\n  const isPrevMessageFromSameAuthor: boolean = areMessagesFromSameAuthor(prevMessage, message)\n  const isNextMessageFromSameAuthor: boolean = areMessagesFromSameAuthor(nextMessage, message)\n\n  return isPrevMessageFromSameAuthor && isNextMessageFromSameAuthor\n}\n\nexport const getIsGroupLastMessage = (\n  message: MessageData,\n  nextMessage: MessageData | null\n): boolean => {\n  if (nextMessage === null) {\n    return true\n  }\n\n  const isTimestampSeparated: boolean = areTimestampSeparatedMessages(message, nextMessage)\n\n  if (isTimestampSeparated) {\n    return true\n  }\n\n  const isNextMessageFromSameAuthor: boolean = areMessagesFromSameAuthor(nextMessage, message)\n  const nextIsSystemMessage: boolean = getIsSystemMessage(nextMessage)\n\n  return nextIsSystemMessage || !isNextMessageFromSameAuthor\n}\n\nexport const getIsSystemMessage = (\n  message: MessageData | null,\n): boolean => (\n  message !== null && message.type === MessageType.SYSTEM\n)\n\nexport const getMessageSpacingStyle = (\n  isFirstMessage: boolean,\n  isMiddleMessage: boolean,\n  isLastMessage: boolean,\n  classes: MessageGroupingClasses\n): string => {\n  if (isFirstMessage) {\n    return classes.groupFirstMessage\n  }\n\n  if (isLastMessage) {\n    return classes.groupLastMessage\n  }\n\n  if (isMiddleMessage) {\n    return classes.groupMiddleMessage\n  }\n\n  return classes.defaultMessageSpacing\n}\n\nexport const areTimestampSeparatedMessages = (prevMessage: MessageData | null, message: MessageData): boolean => {\n\n  if (prevMessage == null) {\n    return true\n  }\n\n  const prevMessageTime: number = new Date(prevMessage.created_at).getTime()\n  const currentMessageTime: number = new Date(message.created_at).getTime()\n\n  return currentMessageTime - prevMessageTime > MESSAGE_TIMESTAMP_15_MINUTES_LIMIT\n}\n\nexport const areMessagesFromOtherSides = (prevMessage: MessageData | MessageDataParsed | null, message: MessageData, loggedInUserGidUUID: string): boolean => {\n  if (prevMessage !== null && prevMessage.author === loggedInUserGidUUID && message.author !== loggedInUserGidUUID) {\n    return true\n  }\n\n  return prevMessage !== null && prevMessage.author !== loggedInUserGidUUID && message.author === loggedInUserGidUUID\n}\n\nexport const getTimestamp = (\n  message: MessageData,\n): string => getFormattedFullDateTimestamp(message.created_at)\n\nexport const getAdminSuffix = (\n  admin: string | undefined,\n  hideOwner: boolean,\n): string => admin !== undefined && !hideOwner ?\n  ` ${getString('group-owner')}`\n  : ''\n\nexport const useChatMessageHooks = (\n  { messageContext, me, author, admin, hideOwner }: ChatMessageHooksProps\n): ChatMessageHooksResponse => {\n\n  const {\n    prevMessage,\n    message,\n    nextMessage,\n  } = messageContext\n\n  const iAmAuthor: boolean = me.gid_uuid === message.author\n  const deletedByMe: boolean = message.deleted_by ? me.gid_name === message.deleted_by : false\n  const authorIsAdmin: boolean = admin === message.author\n\n  const isTimestampSeparated: boolean = areTimestampSeparatedMessages(prevMessage, message)\n  const isSideSeparated: boolean = areMessagesFromOtherSides(prevMessage, message, me.gid_uuid)\n  const prevIsSystemMessage: boolean = getIsSystemMessage(prevMessage)\n\n  const classes = useMessageGroupingStyles({\n    isSideSeparated,\n    iAmAuthor,\n    prevIsSystemMessage,\n  })\n\n  const displayNameText: string = author ? `${author.gid_name}${authorIsAdmin ? getAdminSuffix(admin, hideOwner) : ''}` : ''\n\n  useSelector((state: RootState) => state.channels.members[author?.gid_uuid ?? '']?.display_image_url)\n\n  const imageSrc: string = author?.display_image_url ?? getAvatarUrl(message.author)\n\n  const image = <Skeleton loading={!imageSrc} className={classes.userImage} variant='circle' component='div'>\n    <img className={classes.userImage} src={imageSrc} alt='user avatar'/>\n  </Skeleton>\n\n  const isGroupFirstMessage: boolean = getIsGroupFirstMessage(prevMessage, message)\n  const isGroupMiddleMessage: boolean = getIsGroupMiddleMessage(prevMessage, message, nextMessage)\n  const isGroupLastMessage: boolean = getIsGroupLastMessage(message, nextMessage)\n  const isLastMessage: boolean = nextMessage === null\n\n  const messageContainerStyle: string = getMessageSpacingStyle(\n    isGroupFirstMessage,\n    isGroupMiddleMessage,\n    isGroupLastMessage,\n    classes,\n  )\n\n  const displayName: JSX.Element | null = !iAmAuthor && isGroupFirstMessage\n    ? <div className={classes.userName}>\n      {displayNameText}\n    </div>\n    : null\n\n  const avatar: JSX.Element | null = !iAmAuthor && isGroupLastMessage\n    ? image\n    : null\n\n  const timestampString: string | null = getTimestamp(message)\n\n  const timestamp = isTimestampSeparated\n    ? <div className={classes.timestamp}>\n      {timestampString}\n    </div>\n    : null\n\n  return {\n    iAmAuthor,\n    deletedByMe,\n    displayName,\n    avatar,\n    messageContainerStyle,\n    timestamp,\n    timestampString,\n    isLastMessage,\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/message_context_controller.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/timestamp_tooltip.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/overlay/overlay.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/use_message_state.tsx",["2044"],"import React, { useState, useRef } from 'react'\nimport { sendMessageToChannel } from '../../../../utils/messages_utils'\nimport { useStyles } from './styles'\nimport { QuickMenuItemProps } from '../../../global/quick_menu/interfaces'\nimport { OptionsIcon } from '../../../global/icons/options_icon'\nimport { getString } from '../../../../utils'\nimport { toastHandler } from './helpers'\nimport { deleteMessageFromChannel } from '../../../../services/api/messaging_api'\nimport { MessageData } from '../../../../store/interfaces'\nimport { QuickMenu } from '../../../global/quick_menu'\nimport { DeleteMessageDialog } from '../delete_message'\nimport { CircularProgress } from '@material-ui/core'\nimport { TrashIcon } from '../../../global/icons/trash_icon'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport { setToastSuccess, setToastError } from 'globalid-react-ui'\nimport { CommonImageMediaType, MessageStateHookResult } from '.'\nimport { MessageType } from '../interfaces'\nimport { deleteImageAsset } from '../../../../services/api/file_service_api'\nimport { getParsedImageMessageContent } from './image_media_helpers'\nimport { MediaAsset } from '@globalid/messaging-service-sdk/interfaces'\n\nexport interface MessageStateHooksProps {\n  iAmAuthor: boolean\n  message: MessageData\n  encryptedChannelSecret?: string\n  isHiddenMember?: boolean\n  hasOptions?: boolean\n}\n\nexport interface MessageStateHooksResponse {\n  resendingMessage: boolean\n  optionsIcon: JSX.Element | null\n  resendingCircularProgress: JSX.Element | null\n  quickMenu: JSX.Element\n  deleteMessageDialog: JSX.Element\n  resendMessage: (() => Promise<void>) | undefined\n  showUserSettingsIcon(): void\n  hideUserSettingsIcon(): void\n}\n\n// eslint-disable-next-line complexity\nexport const useMessageState = ({\n  iAmAuthor,\n  message,\n  encryptedChannelSecret,\n  isHiddenMember,\n  hasOptions,\n} : MessageStateHooksProps): MessageStateHookResult => {\n\n  const [resendingMessage, setResendingMessage] = useState<boolean>(false)\n  const [showSettingsIcon, setShowSettingsIcon] = useState<boolean>(false)\n  const [messageSettingsOpen, setMessageSettingsOpen] = useState<boolean>(false)\n  const [deleteMessageDialogOpen, setDeleteMessageDialogOpen] = useState<boolean>(false)\n\n  const settingsIconElement: React.MutableRefObject<HTMLImageElement | null> = useRef<HTMLImageElement>(null)\n\n  const dispatcher: Dispatch = useDispatch()\n\n  const messageSettingsItems: QuickMenuItemProps[] | undefined = !isHiddenMember ? [\n    {\n      id: 'delete-message',\n      text: getString('delete-message-title'),\n      icon: TrashIcon(),\n      onClick: () => openDeleteMessageDialog(),\n    },\n  ] : undefined\n\n  const classes = useStyles({\n    me: iAmAuthor,\n    deleted: message.deleted,\n    errorAdornment: message.errored,\n    resending: resendingMessage,\n  })\n\n  const deleteMessageAssets = async (): Promise<void> => {\n    if (message.type !== MessageType.MEDIA) {\n      return\n    }\n    const parsedMessageContent: CommonImageMediaType | null = getParsedImageMessageContent(message.content)\n\n    if (parsedMessageContent === null || !parsedMessageContent?.assets?.length) {\n      return\n    }\n\n    const assets: MediaAsset[] = parsedMessageContent.assets as MediaAsset[]\n\n    await Promise.all(assets.map(\n      async (asset: MediaAsset): Promise<void> => deleteImageAsset(asset.uuid))\n    )\n  }\n\n  const deleteMessage = async (message_id: string): Promise<void> => {\n    try {\n      const response = await deleteMessageFromChannel([message_id])\n\n      await deleteMessageAssets()\n\n      if (response.length > 0) {\n        toastHandler(dispatcher, setToastSuccess, getString('delete-message-success-title'), getString('delete-message-success-description'))\n      } else {\n        toastHandler(dispatcher, setToastError, getString('delete-message-error-title'), getString('delete-message-error-description'))\n      }\n\n      closeDeleteMessageDialog()\n    } catch (error) {\n      toastHandler(dispatcher, setToastError, getString('delete-message-error-title'), getString('delete-message-error-description'))\n      closeDeleteMessageDialog()\n    }\n  }\n\n  const hideUserSettingsIcon = (): void => {\n    setShowSettingsIcon(false)\n  }\n\n  const showUserSettingsIcon = (): void => {\n    if (!iAmAuthor || !hasOptions || resendingMessage) {\n      return\n    }\n    setShowSettingsIcon(true)\n  }\n\n  const closeUserSettings = (): void => {\n    setMessageSettingsOpen(false)\n  }\n\n  const openUserSettings = (): void => {\n    setMessageSettingsOpen(true)\n  }\n\n  const closeDeleteMessageDialog = (): void => {\n    setDeleteMessageDialogOpen(false)\n  }\n\n  const openDeleteMessageDialog = (): void => {\n    hideUserSettingsIcon()\n    closeUserSettings()\n    setDeleteMessageDialogOpen(true)\n  }\n\n  const resendMessage = async (): Promise<void> => {\n    hideUserSettingsIcon()\n    setResendingMessage(true)\n\n    await sendMessageToChannel(\n      message.parsedContent as string,\n      message.channel_id,\n      message.author,\n      {\n        resending: true,\n        uuid: message.uuid,\n      },\n      encryptedChannelSecret,\n    )\n\n    setResendingMessage(false)\n  }\n\n  const quickMenu: JSX.Element | null = hasOptions ? <QuickMenu\n    compact={true}\n    items={messageSettingsItems}\n    open={messageSettingsOpen}\n    cursorAt={settingsIconElement}\n    onClose={closeUserSettings}\n  />: null\n\n  const deleteMessageDialog: JSX.Element | null = hasOptions ? <DeleteMessageDialog\n    open={deleteMessageDialogOpen}\n    handleDelete={async () => deleteMessage(message.id as string)}\n    onExit={closeDeleteMessageDialog}\n    title={'Delete'}\n  />: null\n\n  const resendingCircularProgress: JSX.Element | null = resendingMessage\n    ? <div className={classes.progressWrapper}>\n      <CircularProgress className={classes.circularProgress} size={25} thickness={6}/>\n    </div>\n    : null\n\n  const optionsIcon: JSX.Element | null = ((showSettingsIcon || messageSettingsOpen) && message.id && !isHiddenMember)\n    ? <div data-testid='settings' ref={settingsIconElement} className={classes.settingsIcon} onClick={openUserSettings}>\n      {OptionsIcon()}\n    </div>\n    : null\n\n  return {\n    resendingMessage,\n    showUserSettingsIcon,\n    hideUserSettingsIcon,\n    optionsIcon,\n    resendingCircularProgress,\n    resendMessage: message.errored && !resendingMessage ? resendMessage : undefined,\n    quickMenu,\n    deleteMessageDialog,\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/assets/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/meeting/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/trash_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/meeting/meeting.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/options_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/timestamp_tooltip/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/skeleton.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/skeleton_provider.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/views/meeting/meeting.styled.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/device_permission_prompt.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/hooks/use_meeting_end_redirect.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/navigation/navigation_control.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/message_divider.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/skeletons/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/button_group/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/transition/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/delete_message_dialog.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/quick_menu.tsx",["2045"],"import React from 'react'\nimport clsx from 'clsx'\nimport {\n  List,\n} from '@material-ui/core'\nimport {\n  QuickMenuItemProps,\n  QuickMenuProps,\n} from './interfaces'\nimport { useStyles } from './styles'\nimport { useIsMobileOrTabletView } from '../helpers'\nimport { BottomDrawer } from '../bottom_drawer'\nimport { GlobalidLoader } from '../loading/globalid_loader'\nimport { Popover } from '../popover'\nimport { QuickMenuItem } from './quick_menu_item'\n\nexport const QuickMenu: React.FC<QuickMenuProps> = ({\n  className,\n  compact = false,\n  items,\n  onClose,\n  open,\n  title = '',\n  ...properties\n}: QuickMenuProps) => {\n  const classes = useStyles()\n\n  const getContent = (): JSX.Element => (items === undefined ?\n    <div className={classes.quickMenuLoaderWrapper}>\n      <GlobalidLoader />\n    </div>\n    :\n    <List\n      disablePadding={true}\n    >\n      {items.map((item: QuickMenuItemProps) => <QuickMenuItem key={item.id} {...item}/>)}\n    </List>\n  )\n\n  const createQuickMenu = (): JSX.Element => (\n    <Popover\n      className={clsx(\n        classes.quickMenuRoot,\n        {[classes.quickMenuCompactRoot]: compact},\n        className\n      )}\n      compact={compact}\n      onClose={onClose}\n      open={open}\n      {...properties}\n    >\n      {getContent()}\n    </Popover>\n  )\n\n  const createQuickMenuForMobile = (): JSX.Element => (\n    <BottomDrawer\n      className={clsx(classes.quickMenuRoot, className)}\n      onClose={onClose}\n      open={open}\n      title={title}\n    >\n      {getContent()}\n    </BottomDrawer>\n  )\n\n  return useIsMobileOrTabletView() ? createQuickMenuForMobile() : createQuickMenu()\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/logout_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/list_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/issue_verification_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/my_membership_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/hidden_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/log_out_2_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/edit_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/pending_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/send_message_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/x_circle_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/user_plus_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/user_minus_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/single_user_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/send_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/dollar_sign_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/corner_up_left_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/checkbox_on_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/checkbox_off_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/check_circle_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/award_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/groups_slice.ts",["2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061","2062","2063","2064","2065","2066","2067","2068","2069","2070","2071","2072","2073","2074","2075","2076","2077","2078","2079","2080","2081","2082","2083","2084","2085","2086","2087","2088","2089","2090","2091","2092","2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103","2104","2105","2106","2107","2108","2109","2110","2111","2112","2113","2114","2115","2116","2117","2118","2119","2120","2121","2122","2123","2124","2125","2126"],"/* eslint-disable max-lines */\nimport {\n  createSlice,\n  PayloadAction,\n  createAsyncThunk,\n  Slice,\n} from '@reduxjs/toolkit'\nimport { RootState } from 'RootType'\nimport {\n  FulfilledAction,\n  RejectedAction,\n  KeyValuePayload,\n  GroupsSlice,\n  GlobalGroups,\n  GroupMembers,\n  GroupMemberWithIdentityFields,\n  GroupMembersResponse,\n  GroupMembersParams,\n  GroupDataByFolderType,\n  GroupsFolderType,\n  FetchGroupsSearchParams,\n  FetchGroupsParams,\n  GroupDataByType,\n  JoinGroupParams,\n  RemoveGroupMemberParams,\n  ApproveOrRejectInvitationParams,\n  InvitationAction,\n  FetchGroupsByUUIDsParams,\n  FetchGroupsByUUIDsResult,\n  ChannelsSlice,\n  ChannelWithParticipantsAndParsedMessage,\n  AsyncThunkReturnAction,\n  FetchChannelProps,\n  ThunkAPI,\n  SearchGroupsState,\n  GroupAction,\n  RemoveGroupRoleParams,\n  ResignGroupMemberRoleParams,\n  GroupRoleMembersParams,\n  RoleMembers,\n  ManageMemberRoleParams,\n} from './interfaces'\nimport {\n  GroupsResponse,\n  GroupParams,\n  MemberResponse,\n  MembersResponse,\n  PaginationMetaParams,\n  MemberParams,\n  InvitationUpdateResponse,\n  RolesForMemberParams,\n  RolesForMemberResponse,\n  PermissionListResponse,\n  MembersForRoleResponse,\n  AssignmentResponse,\n  RoleResponse,\n  GroupResponse,\n  RoleListItem,\n  InvitationLinks,\n  InvitationLinkResponse,\n  InvitationLinkParams,\n  Group,\n  GroupUuidParam,\n  Member,\n} from '@globalid/group-service-sdk'\nimport {\n  getGroups,\n  getGroup,\n  getMembers,\n  removeMembership,\n  releaseGroup,\n  searchGroups,\n  joinGroup,\n  approveInvitation,\n  rejectInvitation,\n  getRolesForMember,\n  removeRole,\n  getGroupsByUUID,\n  getMember,\n  getMembersForRole,\n  getGroupRoles,\n  getGroupPermissions,\n  assignRole,\n  removeRoleAssignment,\n  getInvitationLinks,\n  createInvitationLink, removeInvitationLink,\n} from '../services/api/groups_api'\nimport { getIdentitiesList, getIdentityPublic } from '../services/api'\nimport { Identity } from '@globalid/identity-namespace-service-sdk'\nimport { setToastError, setToastSuccess } from 'globalid-react-ui'\nimport {\n  ERR_INVITATION_ALREADY_ACCEPTED,\n  ERR_INVITATION_ALREADY_REJECTED,\n  FETCH_GROUP_MEMBER_ROLES,\n  FETCH_GROUP_MEMBERS,\n  REMOVE_GROUP_MEMBER_ROLE,\n  RESET_STORE_ACTION,\n  GROUPS_PER_PAGE,\n  GROUP_MEMBERS_PER_PAGE,\n  FETCH_GROUP_ROLE_MEMBERS,\n  GROUP_ROLE_MEMBERS_PER_PAGE,\n  FETCH_GROUP_PERMISSIONS,\n  FETCH_ASSIGN_ROLES_TO_GROUP_MEMBER,\n  FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER,\n} from '../constants'\nimport { getString, getStringWithText, handleAddItemMetaUpdate } from '../utils'\nimport { ThunkDispatch } from './store'\nimport { fetchChannel } from '../store/channels_slice/channels_slice'\nimport { getMappedGroupMemberRoles } from './groups_selectors'\n\nexport const getFetchingPageKey = (type: string, page?: number): string => `${type}-page-${page ?? 1}`\nexport const getSearchFetchingPageKey = (myGroups: boolean, text: string, page?: number): string => `${myGroups}-${text}-page-${page ?? 1}`\nexport const getFetchingInvitationLinksKey = (groupUuid: string): string => `${groupUuid}-fetch-invitation-links`\nexport const getCreatingInvitationLinkKey = (groupUuid: string): string => `${groupUuid}-create-invitation-link`\nexport const getDeleteInvitationLinkKey = (groupUuid: string): string => `${groupUuid}-delete-invitation-link`\n\nconst initialState: GroupsSlice = {\n  isFetching: {},\n  groups: {},\n  roles: {},\n  roleMembers: {},\n  members: {},\n  memberRoles: {},\n  groupPermissions: {},\n  invitationLinks: {},\n  [GroupsFolderType.MY_GROUPS]: {\n    groupUuids: undefined,\n    meta: undefined,\n  },\n  [GroupsFolderType.DISCOVER]: {\n    groupUuids: undefined,\n    meta: undefined,\n  },\n  messaging: {\n    groupUuids: undefined,\n    meta: undefined,\n  },\n  search: {},\n  error: {},\n  searchText: undefined,\n}\n\nconst actionSwitch: {\n  [key: string]:\n    (uuid: string) => Promise<InvitationUpdateResponse>\n} = {\n  [InvitationAction.APPROVE]: async (uuid: string) => approveInvitation(uuid),\n  [InvitationAction.REJECT]: async (uuid: string) => rejectInvitation(uuid),\n}\n\nexport const approveOrRejectInvitation = createAsyncThunk(\n  'groups/approveOrRejectInvitation',\n  async (\n    params: ApproveOrRejectInvitationParams,\n    thunkAPI\n  ): Promise<InvitationUpdateResponse> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: params.invitationUuid,\n      value: true,\n    }))\n\n    try {\n      const response: InvitationUpdateResponse = await actionSwitch[params.action](params.invitationUuid)\n\n      return response\n    } catch (error) {\n      const errorMessage: string = error.response?.data?.message\n\n      if (errorMessage && [ERR_INVITATION_ALREADY_ACCEPTED, ERR_INVITATION_ALREADY_REJECTED].includes(errorMessage)) {\n\n        thunkAPI.dispatch(setToastSuccess({\n          title: getString('approve-reject-invitation-no-action-needed'),\n          message: getString('approve-reject-invitation-no-action-needed-description'),\n        }))\n      } else {\n        thunkAPI.dispatch(setToastError({\n          title: getString('approve-reject-invitation-error'),\n          message: getString('approve-reject-invitation-error-description'),\n        }))\n      }\n\n      throw error\n    }\n  }, {\n    condition: (params: ApproveOrRejectInvitationParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      return !groupsState.isFetching[params.invitationUuid]\n    },\n  }\n)\n\nexport const fetchGroups = createAsyncThunk(\n  'groups/fetchGroups',\n  async (\n    params: FetchGroupsParams,\n    thunkAPI\n  ): Promise<GroupsResponse> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: getFetchingPageKey(params.type, params.queryParams.page),\n      value: true,\n    }))\n\n    return getGroups(params.type, params.queryParams)\n  }, {\n    condition: (params: FetchGroupsParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      return !groupsState.isFetching[getFetchingPageKey(params.type, params.queryParams.page)]\n    },\n  }\n)\n\nexport const fetchGroupsByUUIDs = createAsyncThunk<FetchGroupsByUUIDsResult, FetchGroupsByUUIDsParams, ThunkAPI>(\n  'groups/fetchGroupsByUUIDs',\n  async (\n    params: FetchGroupsByUUIDsParams,\n    { dispatch }\n  ): Promise<FetchGroupsByUUIDsResult> => {\n    dispatch(setIsFetching({\n      key: 'fetchGroupsByUUIDs',\n      value: true,\n    }))\n\n    const groups: GroupResponse[] = await getGroupsByUUID(params.groupUuids)\n    const groupUuids: string[] = groups.map((group: GroupResponse) => group.uuid)\n\n    const totalCount: number = params.meta.total - params.groupUuids.length + groupUuids.length\n\n    return {\n      groupUuids,\n      groups,\n      meta: {\n        ...params.meta,\n        total: totalCount,\n      },\n      isJoined: params.isJoined,\n    }\n  }, {\n    condition: (params: FetchGroupsByUUIDsParams, { getState }) => {\n      const groupsState: GroupsSlice = getState().groups\n\n      return !groupsState.isFetching[getFetchingPageKey('messaging', params.meta.page)]\n    },\n  }\n)\n\nexport const fetchGroupsSearch = createAsyncThunk(\n  'groups/fetchGroupsSearch',\n  async (\n    params: FetchGroupsSearchParams,\n    thunkAPI\n  ): Promise<GroupsResponse> => {\n    const {\n      text,\n      myGroups,\n      page,\n    }: FetchGroupsSearchParams = params\n\n    thunkAPI.dispatch(setSearchText(text))\n\n    thunkAPI.dispatch(setIsFetching({\n      key: getSearchFetchingPageKey(myGroups, text, page),\n      value: true,\n    }))\n\n    return searchGroups(\n      text,\n      myGroups,\n      page\n    )\n  }, {\n    condition: (params: FetchGroupsSearchParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      const {\n        text,\n        myGroups,\n        page,\n      }: FetchGroupsSearchParams = params\n\n      return !groupsState.isFetching[getSearchFetchingPageKey(myGroups, text, page)]\n    },\n  }\n)\n\nexport const fetchGroup = createAsyncThunk(\n  'groups/fetchGroup',\n  async (\n    params: GroupParams,\n    thunkAPI\n  ): Promise<GroupResponse> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: params.group_uuid,\n      value: true,\n    }))\n\n    return getGroup(params.group_uuid)\n  }, {\n    condition: (params: GroupParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      return !groupsState.isFetching[params.group_uuid] && groupsState.groups[params.group_uuid] === undefined\n    },\n  }\n)\n\nconst getGroupRolesKey = (groupUuid: string): string => `group-roles-${groupUuid}`\n\nexport const fetchGroupRoles = createAsyncThunk(\n  'groups/fetchGroupRoles',\n  async (\n    groupUuid: string,\n    thunkAPI\n  ): Promise<RoleListItem[]> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: getGroupRolesKey(groupUuid),\n      value: true,\n    }))\n\n    return (await getGroupRoles(groupUuid)).roles\n  }, {\n    condition: (groupUuid: string, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      return !groupsState.isFetching[getGroupRolesKey(groupUuid)] &&\n        groupsState.groups[groupUuid] !== undefined\n    },\n  }\n)\n\nconst combineIdentitiesWithGroupMembers = (\n  members: MemberResponse[],\n  identities: Identity[],\n): GroupMemberWithIdentityFields[] => members.map((member: MemberResponse) => {\n  const identity: Identity | undefined =\n    identities.find((item: Identity) => item.gid_uuid === member.gid_uuid)\n\n  if (identity === undefined) {\n    throw new Error('ERR_MEMBER_IDENTITY_NOT_LOADED')\n  }\n\n  return {\n    ...identity,\n    ...member,\n    gid_name: identity.gid_name,\n    display_name: identity.display_name,\n    display_image_url: identity.display_image_url,\n  }\n})\n\nexport const fetchGroupMembers = createAsyncThunk(\n  'groups/fetchGroupMembers',\n  async (\n    params: GroupMembersParams,\n    thunkAPI\n  ): Promise<GroupMembersResponse> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.group_uuid}${FETCH_GROUP_MEMBERS}`,\n      value: true,\n    }))\n\n    const membersResponse: MembersResponse = await getMembers(params.group_uuid, params.page)\n    const gidUuids = membersResponse.data.map((member: MemberResponse) => member.gid_uuid)\n\n    if (gidUuids.length !== 0) {\n      const identities: Identity[] = await getIdentitiesList(gidUuids)\n\n      return {\n        members: combineIdentitiesWithGroupMembers(membersResponse.data, identities),\n        meta: membersResponse.meta,\n      }\n    }\n\n    return { members: [], meta: membersResponse.meta }\n  }, {\n    condition: ({ group_uuid, page, hasPermission = true }: GroupMembersParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState>thunkAPI.getState()).groups\n\n      const groupMemberVisibility: Member.MemberVisibility | undefined = groupsState.groups[group_uuid]?.member_visibility\n\n      const notHidden: boolean = groupMemberVisibility !== Member.MemberVisibility.hidden\n      const members: GroupMemberWithIdentityFields[] | undefined = groupsState.members[group_uuid]?.members\n\n      const notAlreadyFetched: boolean = (members?.length ?? 0) < page * GROUP_MEMBERS_PER_PAGE\n\n      return notAlreadyFetched && (!groupsState.isFetching[`${group_uuid}${FETCH_GROUP_MEMBERS}`] && (hasPermission || notHidden))\n    },\n  }\n)\n\nexport const fetchGroupMember = createAsyncThunk(\n  'groups/fetchGroupMember',\n  async (\n    params: MemberParams,\n    thunkAPI\n  ): Promise<GroupMemberWithIdentityFields> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.group_uuid}-${params.gid_uuid}`,\n      value: true,\n    }))\n\n    const memberResponse: MemberResponse = await getMember(params)\n\n    const identity: Identity = await getIdentityPublic({ gid_uuid: params.gid_uuid })\n\n    const memberIdentity: GroupMemberWithIdentityFields\n      = combineIdentitiesWithGroupMembers([memberResponse], [identity])[0]\n\n    return memberIdentity\n  }, {\n    condition: (params: MemberParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      return !groupsState.isFetching[`${params.group_uuid}-${params.gid_uuid}`]\n    },\n  }\n)\n\nconst removeMembershipOptions = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  condition: (params: MemberParams, { getState }: any) => {\n    const groupsState: GroupsSlice = (<RootState> getState()).groups\n\n    return !groupsState.isFetching[`${params.group_uuid}${params.gid_uuid}`]\n  },\n}\n\nconst resetRemoveMembershipFetchStatus = (\n  state: GroupsSlice,\n  action: FulfilledAction<GroupMembersResponse, MemberParams> | RejectedAction<MemberParams>\n): void => {\n  state.isFetching[`${action.meta.arg.group_uuid}${action.meta.arg.gid_uuid}`] = false\n}\n\nexport const removeGroupMember = createAsyncThunk(\n  'groups/removeGroupMember',\n  async ({\n    gidName,\n    groupName,\n    ...params\n  }: RemoveGroupMemberParams, { dispatch }): Promise<void> => {\n    dispatch(setIsFetching({\n      key: `${params.group_uuid}${params.gid_uuid}`,\n      value: true,\n    }))\n\n    try {\n      await removeMembership(params)\n\n      dispatch(setToastSuccess({\n        title: getString('remove-member-toast-success-title'),\n        message: getString('remove-member-toast-success-description')\n          .replace('{user}', gidName)\n          .replace('{group}', groupName ?? ''),\n      }))\n    } catch (error) {\n      dispatch(setToastError({\n        title: getString('remove-member-toast-failed-title'),\n        message: getString('remove-member-toast-failed-description'),\n      }))\n\n      throw error\n    }\n\n  },\n  removeMembershipOptions,\n)\n\nexport const leaveGroup = createAsyncThunk(\n  'groups/leaveGroup',\n  async (params: MemberParams, thunkAPI): Promise<void> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.group_uuid}${params.gid_uuid}`,\n      value: true,\n    }))\n\n    try {\n      await removeMembership(params)\n\n      thunkAPI.dispatch(setToastSuccess({\n        title: getString('leave-group-toast-success-title'),\n        message: getString('leave-group-toast-success-description'),\n      }))\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('leave-group-toast-failed-title'),\n        message: getString('leave-group-toast-failed-description'),\n      }))\n\n      throw error\n    }\n  },\n  removeMembershipOptions,\n)\n\nexport const removeGroup = createAsyncThunk(\n  'groups/removeGroup',\n  async (\n    params: GroupParams,\n    thunkAPI\n  ): Promise<void> => {\n    try {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      await releaseGroup(params)\n\n      thunkAPI.dispatch(setToastSuccess({\n        title: getString('delete-group-success-title'),\n        message: getString('delete-group-success-description').replace(\n          '{user}',\n          `${groupsState.groups[params.group_uuid]?.gid_name}`\n        ),\n      }))\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('delete-group-error-title'),\n        message: getString('delete-group-error-description'),\n      }))\n\n      throw error\n    }\n  }\n)\n\nexport const joinGroupMember = createAsyncThunk(\n  'groups/joinGroupMember',\n  async (\n    params: JoinGroupParams,\n    thunkAPI\n  ): Promise<void> => {\n    try {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n      const groupGidName: string | undefined = groupsState.groups[params.group_uuid]?.gid_name\n\n      await joinGroup(params.group_uuid, params.is_hidden)\n\n      thunkAPI.dispatch(setToastSuccess({\n        title: getString('join-group-toast-success-title'),\n        message: getString('join-group-toast-success-description').replace(\n          '{group}',\n          `${groupGidName}`\n        ),\n      }))\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('join-group-toast-error-title'),\n        message: getString('join-group-toast-error-description'),\n      }))\n\n      throw error\n    }\n  }\n)\n\nexport const fetchGroupMemberRoles = createAsyncThunk(\n  'groups/fetchGroupMemberRoles',\n  async (\n    params: RolesForMemberParams,\n    thunkAPI\n  ): Promise<RolesForMemberResponse | undefined> => {\n    try {\n      thunkAPI.dispatch(setIsFetching({\n        key: `${params.group_uuid}${params.gid_uuid}${FETCH_GROUP_MEMBER_ROLES}`,\n        value: true,\n      }))\n\n      const response: RolesForMemberResponse = await getRolesForMember(params)\n\n      return response\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('fetch-member-roles-failed-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n  },\n  {\n    condition: (params: RolesForMemberParams, thunkAPI) => {\n      const groupsState = (<RootState> thunkAPI.getState()).groups\n      const isFetchingMember: boolean | undefined = groupsState.isFetching[`${params.group_uuid}${params.gid_uuid}${FETCH_GROUP_MEMBER_ROLES}`]\n\n      return !isFetchingMember\n    },\n  }\n)\n\nexport const fetchGroupRoleMembers = createAsyncThunk(\n  'groups/fetchGroupRoleMembers',\n  async (\n    params: GroupRoleMembersParams,\n    thunkAPI\n  ): Promise<RoleMembers> => {\n    const { group_uuid, role_uuid, page }: GroupRoleMembersParams = params\n\n    thunkAPI.dispatch(setIsFetching({\n      key: `${group_uuid}${role_uuid}${FETCH_GROUP_ROLE_MEMBERS}`,\n      value: true,\n    }))\n\n    const roleMembersResponse: MembersForRoleResponse = await getMembersForRole({\n      group_uuid,\n      role_uuid,\n    }, page)\n\n    const roleMembersUuids: string[] = roleMembersResponse.members.map((member: MemberResponse) => member.gid_uuid)\n\n    return { members: roleMembersUuids, meta: roleMembersResponse.meta }\n  }, {\n    condition: ({ group_uuid, role_uuid, page }: GroupRoleMembersParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n\n      const roleMembers: string[] | undefined = groupsState.roleMembers[role_uuid]?.members\n      const notAlreadyFetched: boolean = (roleMembers?.length ?? 0) < page * GROUP_ROLE_MEMBERS_PER_PAGE\n\n      return notAlreadyFetched && !groupsState.isFetching[`${group_uuid}${role_uuid}${FETCH_GROUP_ROLE_MEMBERS}`]\n    },\n  }\n)\n\nexport const removeGroupRole = createAsyncThunk(\n  'groups/removeGroupRole',\n  async (params: RemoveGroupRoleParams, { dispatch }): Promise<void> => {\n    dispatch(setIsFetching({\n      key: `${params.groupUuid}${params.roleUuid}${REMOVE_GROUP_MEMBER_ROLE}`,\n      value: true,\n    }))\n\n    try {\n      await removeRole({ group_uuid: params.groupUuid, role_uuid: params.roleUuid })\n\n      dispatch(setToastSuccess({\n        title: getString('remove-role-toast-success-title'),\n        message: getString('remove-role-toast-success-description').replace('{role}', params.roleName),\n      }))\n    } catch (error) {\n      dispatch(setToastError({\n        title: getString('remove-role-toast-error-title'),\n        message: getString('remove-role-toast-error-description'),\n      }))\n\n      throw error\n    }\n  },\n)\n\nexport const removeGroupMemberRoleAssignment = createAsyncThunk(\n  'groups/removeGroupMemberRoleAssignment',\n  async ({\n    roleName,\n    isLoggedUserProfile,\n    gidName,\n    ...params\n  }: ResignGroupMemberRoleParams, { dispatch }): Promise<void> => {\n    dispatch(setIsFetching({\n      key: `${params.groupUuid}${params.gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`,\n      value: true,\n    }))\n    try {\n      await removeRoleAssignment({ group_uuid: params.groupUuid, role_uuid: params.roleUuid, gid_uuid: params.gidUuid })\n      await dispatch(fetchGroupMemberRoles({ group_uuid: params.groupUuid, gid_uuid: params.gidUuid }))\n\n      const toastTitle: string = isLoggedUserProfile ? getString('successfully-resigned-role-title') :\n        getString('successfully-unassigned-role-title')\n      const toastDescription: string = isLoggedUserProfile ?\n        getString('successfully-resigned-role-description')\n          .replace('{role-name}', roleName) : getString('successfully-unassigned-role-description')\n          .replace('{gid-name}', gidName)\n          .replace('{role-name}', roleName)\n\n      dispatch(setToastSuccess({\n        title: toastTitle,\n        message: toastDescription,\n      }))\n    } catch (error) {\n      dispatch(setToastError({\n        title: isLoggedUserProfile ? getString('fail-resigned-title') : getString('fail-unassigned-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n\n  },\n)\n\nexport const fetchGroupPermissions = createAsyncThunk(\n  'groups/fetchGroupPermissions',\n  async (\n    params: GroupParams,\n    thunkAPI\n  ): Promise<PermissionListResponse | undefined> => {\n    try {\n      thunkAPI.dispatch(setIsFetching({\n        key: `${params.group_uuid}${FETCH_GROUP_PERMISSIONS}`,\n        value: true,\n      }))\n\n      const response: PermissionListResponse = await getGroupPermissions(params.group_uuid)\n\n      return response\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('fetch-group-permission-failed-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n\n  }, {\n    condition: (params: GroupParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n      const permissionsLength: number | undefined = groupsState.groupPermissions[params.group_uuid]?.length\n\n      return !groupsState.isFetching[`${params.group_uuid}${FETCH_GROUP_PERMISSIONS}`] && (permissionsLength === undefined || permissionsLength === 0)\n    },\n  }\n)\n\nconst fetchGroupForChannel = async (\n  dispatch: ThunkDispatch,\n  groupsState: GroupsSlice,\n  groupUuid: string\n): Promise<string> => {\n  const groupIsUndefined: boolean = groupsState.groups[groupUuid] === undefined\n\n  if (groupIsUndefined) {\n    await dispatch(fetchGroup({ group_uuid: groupUuid }))\n  }\n\n  return groupUuid\n}\n\nexport const updateGroupMessagingList = createAsyncThunk<string, string, ThunkAPI>(\n  'groups/updateGroupMessagingList',\n  async (\n    channelId: string,\n    { getState, dispatch },\n  ): Promise<string> => {\n    const channelsState: ChannelsSlice = getState().channels\n    const groupsState: GroupsSlice = getState().groups\n\n    const channelFromStore: ChannelWithParticipantsAndParsedMessage | undefined = (\n      channelsState.channels[channelId]?.channel\n    )\n\n    if (channelFromStore !== undefined && channelFromStore.group_uuid) {\n      return fetchGroupForChannel(dispatch, groupsState, channelFromStore.group_uuid)\n    }\n\n    const fetchChannelAction: AsyncThunkReturnAction<ChannelWithParticipantsAndParsedMessage, FetchChannelProps> = (\n      await dispatch(fetchChannel({ channelId: channelId }))\n    )\n\n    const fulfilledAction: FulfilledAction<ChannelWithParticipantsAndParsedMessage, FetchChannelProps> = (\n      <FulfilledAction<ChannelWithParticipantsAndParsedMessage, FetchChannelProps>> fetchChannelAction\n    )\n\n    if (fetchChannelAction.type === fetchChannel.fulfilled.type\n      && fulfilledAction.payload.group_uuid\n    ) {\n      return fetchGroupForChannel(\n        dispatch,\n        groupsState,\n        fulfilledAction.payload.group_uuid\n      )\n    }\n\n    throw new Error('ERR_NOT_GROUP_CHANNEL')\n  }\n)\n\nexport const assignRolesToGroupMember = createAsyncThunk(\n  'groups/assignRolesToGroupMember',\n  async (\n    params: ManageMemberRoleParams,\n    thunkAPI\n  ): Promise<AssignmentResponse[]> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.groupUuid}${params.gidUuid}${FETCH_ASSIGN_ROLES_TO_GROUP_MEMBER}`,\n      value: true,\n    }))\n\n    try {\n      return Promise.all(params.roleUuids.map(async (roleUuid: string) =>\n        assignRole(roleUuid, params.groupUuid, params.gidUuid)\n      ))\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('roles-not-updated'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n  },\n  {\n    condition: (params: ManageMemberRoleParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n      const isAssigningMembers: boolean | undefined = groupsState.isFetching[`${params.groupUuid}${params.gidUuid}${FETCH_ASSIGN_ROLES_TO_GROUP_MEMBER}`]\n\n      return !isAssigningMembers && params.roleUuids.length > 0\n    },\n  }\n)\n\nexport const unassignRolesToGroupMember = createAsyncThunk(\n  'groups/unassignRolesToGroupMember',\n  async (\n    params: ManageMemberRoleParams,\n    thunkAPI\n  ): Promise<RoleListItem[]> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: `${params.groupUuid}${params.gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`,\n      value: true,\n    }))\n\n    try {\n      await Promise.all(params.roleUuids.map(\n        async (roleUuid: string) => removeRoleAssignment({\n          role_uuid: roleUuid,\n          group_uuid: params.groupUuid,\n          gid_uuid: params.gidUuid,\n        })\n      ))\n\n      thunkAPI.dispatch(setToastSuccess({\n        title: getString('changes-saved'),\n        message: getStringWithText('assigned-changes-saved-description', [\n          {\n            match: 'user',\n            replace: (<RootState> thunkAPI.getState()).identities.identities[params.gidUuid]?.gid_name ?? '',\n          },\n        ]),\n      }))\n\n      const groupsState: GroupsSlice = (<RootState>thunkAPI.getState()).groups\n      const roles: RoleListItem[] | undefined = groupsState.memberRoles[`${params.groupUuid}${params.gidUuid}`]\n\n      return roles !== undefined ? roles.filter((role: RoleListItem) => !params.roleUuids.includes(role.uuid)) : []\n\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('roles-not-updated'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n  },\n  {\n    condition: (params: ManageMemberRoleParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n      const isUnassigningMembers: boolean | undefined = groupsState.isFetching[`${params.groupUuid}${params.gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`]\n\n      return !isUnassigningMembers\n    },\n  }\n)\n\nexport const fetchGroupInvitationLinks = createAsyncThunk<InvitationLinks, GroupUuidParam, ThunkAPI>(\n  'groups/fetchGroupInvitationLinks',\n  async (\n    { group_uuid }: GroupUuidParam,\n    { dispatch }\n  ): Promise<InvitationLinks> => {\n    dispatch(setIsFetching({\n      key: getFetchingInvitationLinksKey(group_uuid),\n      value: true,\n    }))\n\n    try {\n      const response: InvitationLinks = await getInvitationLinks(group_uuid)\n\n      return response\n    } catch (error) {\n      dispatch(setToastError({\n        title: getString('fetch-group-invitation-links-failed-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n  },\n  {\n    condition: ({ group_uuid }: GroupUuidParam, { getState }) => {\n      const groupsState: GroupsSlice = getState().groups\n      const currentGroupLinks: InvitationLinkResponse[] | undefined = groupsState.invitationLinks[group_uuid]\n\n      const hasNotBeenFetched: boolean = currentGroupLinks === undefined\n\n      const fetchStatusKey: string = getFetchingInvitationLinksKey(group_uuid)\n      const isNotCurrentlyFetching: boolean = groupsState.isFetching[fetchStatusKey] !== true\n\n      return hasNotBeenFetched && isNotCurrentlyFetching\n    },\n  }\n)\n\nexport const createGroupInvitationLink = createAsyncThunk<InvitationLinkResponse, GroupUuidParam, ThunkAPI>(\n  'groups/createGroupInvitationLink',\n  async (\n    { group_uuid }: GroupUuidParam,\n    { dispatch }\n  ): Promise<InvitationLinkResponse> => {\n    dispatch(setIsFetching({\n      key: getCreatingInvitationLinkKey(group_uuid),\n      value: true,\n    }))\n\n    try {\n      const response: InvitationLinkResponse = await createInvitationLink(group_uuid)\n\n      return response\n    } catch (error) {\n      dispatch(setToastError({\n        title: getString('create-group-invitation-link-failed-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n  },\n  {\n    condition: ({ group_uuid }: GroupUuidParam, { getState }) => {\n      const groupsState: GroupsSlice = getState().groups\n      const currentGroupLinks: InvitationLinkResponse[] | undefined = groupsState.invitationLinks[group_uuid]\n\n      const hasNotBeenCreated: boolean = currentGroupLinks === undefined || currentGroupLinks.length === 0\n\n      const fetchStatusKey: string = getCreatingInvitationLinkKey(group_uuid)\n      const isNotCurrentlyCreating: boolean = groupsState.isFetching[fetchStatusKey] !== true\n\n      return hasNotBeenCreated && isNotCurrentlyCreating\n    },\n  }\n)\n\nexport const deleteGroupInvitationLink = createAsyncThunk(\n  'groups/deleteGroupInvitationLink',\n  async (\n    params: InvitationLinkParams,\n    thunkAPI\n  ): Promise<void> => {\n    thunkAPI.dispatch(setIsFetching({\n      key: getDeleteInvitationLinkKey(params.group_uuid),\n      value: true,\n    }))\n\n    try {\n      await removeInvitationLink(params)\n\n      thunkAPI.dispatch(setToastSuccess({\n        title: getString('invitation-link-deleted'),\n      }))\n    } catch (error) {\n      thunkAPI.dispatch(setToastError({\n        title: getString('delete-invitation-link-failed-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error\n    }\n  },\n  {\n    condition: (params: InvitationLinkParams, thunkAPI) => {\n      const groupsState: GroupsSlice = (<RootState> thunkAPI.getState()).groups\n      const currentGroupLinks: InvitationLinkResponse[] | undefined = groupsState.invitationLinks[params.group_uuid]\n      const isDeleteingLink: boolean | undefined = groupsState.isFetching[getDeleteInvitationLinkKey(params.group_uuid)]\n\n      return (currentGroupLinks && currentGroupLinks.length > 0) || !isDeleteingLink\n    },\n  }\n)\n\nconst concatGroupUuid = (state: string[], uuid: string): string[] => {\n  if (state.includes(uuid)) {\n    return state\n  }\n\n  return [...state, uuid]\n}\n\nconst concatMembers = (\n  baseList: GroupMemberWithIdentityFields[],\n  list: GroupMemberWithIdentityFields[]\n): GroupMemberWithIdentityFields[] => {\n  const filteredNewList: GroupMemberWithIdentityFields[] = list.filter((member: GroupMemberWithIdentityFields) => (\n    !baseList.some((existingMember: GroupMemberWithIdentityFields) => member.gid_uuid === existingMember.gid_uuid)\n  ))\n\n  return [...baseList, ...filteredNewList]\n}\n\nconst getGroupDataByType = (\n  groups: GroupResponse[],\n  initialValue: GroupDataByType\n): GroupDataByType => groups.reduce((\n  groupDataByType: GroupDataByType,\n  group: GroupResponse,\n): GroupDataByType => ({\n  groups: {\n    ...groupDataByType.groups,\n    [group.uuid]: group,\n  },\n  groupUuids: concatGroupUuid(groupDataByType.groupUuids, group.uuid),\n}), initialValue)\n\nconst setGroupIsJoined = (\n  group: GroupResponse | undefined,\n  is_joined: boolean,\n): GroupResponse | undefined => (\n  group !== undefined ? {\n    ...group,\n    is_joined,\n  } : undefined\n)\n\nconst removeMembersByUuid = (groupUuid: string, { [groupUuid]: _, ...members }: GroupMembers): GroupMembers => members\nconst removeGroupByUuid = (groupUuid: string, { [groupUuid]: _, ...groups }: GlobalGroups): GlobalGroups => groups\n\nconst removeMemberFromGroup = (\n  response: GroupMembersResponse | undefined,\n  groupUuid: string,\n  memberUuid: string\n): GroupMembersResponse => {\n  const members: GroupMemberWithIdentityFields[] | undefined = response?.members\n  const meta: PaginationMetaParams | undefined = response?.meta\n  const filteredMembers: GroupMemberWithIdentityFields[] | undefined =\n    members?.filter((member: GroupMemberWithIdentityFields) => member.gid_uuid !== memberUuid)\n\n  return {\n    members: filteredMembers !== undefined ? [...filteredMembers] : [],\n    meta: {\n      ...meta,\n      total: meta?.total !== undefined && meta.total > 0 ? meta.total - 1 : 0,\n    },\n  }\n}\n\nconst removeGroupForFolderTypeByUuid = (groupData: GroupDataByFolderType, groupUuid: string): GroupDataByFolderType => {\n  const groupUuids: string[] | undefined = groupData.groupUuids\n  const meta: PaginationMetaParams | undefined = groupData.meta\n  const filteredGroupUuids: string[] | undefined = groupUuids?.filter((uuid: string) => uuid !== groupUuid)\n\n  return {\n    groupUuids: filteredGroupUuids !== undefined ? [...filteredGroupUuids] : [],\n    meta: {\n      ...meta,\n      total: meta?.total !== undefined && meta.total > 0 ? meta.total - 1 : 0,\n    },\n  }\n}\n\nconst addGroupForFolderTypeByUuid = (groupData: GroupDataByFolderType, groupUuid: string): GroupDataByFolderType => {\n  const groupUuids: string[] | undefined = groupData.groupUuids\n  const meta: PaginationMetaParams | undefined = groupData.meta\n\n  return {\n    groupUuids: groupUuids !== undefined ? [groupUuid, ...groupUuids] : [groupUuid],\n    meta: {\n      ...meta,\n      total: meta?.total !== undefined ? meta.total + 1 : 1,\n    },\n  }\n}\n\nconst addNonIncludedGroupToFolderStart = (\n  state: GroupsSlice,\n  group: GroupResponse,\n  groupFolder: GroupsFolderType\n): void => {\n  if (groupNotIncluded(state[groupFolder].groupUuids, group.uuid)) {\n    state[groupFolder].groupUuids =\n      addGroupToStart(group.uuid, state[groupFolder].groupUuids)\n  }\n}\n\nconst addNonIncludedGroupToListEnd = (\n  groupData: GroupDataByFolderType,\n  group: GroupResponse,\n): GroupDataByFolderType => {\n  if (groupNotIncluded(groupData.groupUuids, group.uuid) && groupData.meta !== undefined) {\n    const groupUuids: string[] = concatGroupUuid(groupData.groupUuids ?? [], group.uuid)\n\n    const meta: PaginationMetaParams = handleAddItemMetaUpdate(groupData.meta, GROUPS_PER_PAGE)\n\n    return {\n      groupUuids,\n      meta,\n    }\n  }\n\n  return groupData\n}\n\nconst handleRemoveMyGroup = (state: GroupsSlice, groupUuid: string): void => {\n  state[GroupsFolderType.MY_GROUPS] = removeGroupForFolderTypeByUuid(state[GroupsFolderType.MY_GROUPS], groupUuid)\n}\n\nconst handleRemoveGroup = (state: GroupsSlice, groupUuid: string, updateDiscoveryTab: boolean): void => {\n  state.messaging = removeGroupForFolderTypeByUuid(state.messaging, groupUuid)\n  handleRemoveMyGroup(state, groupUuid)\n\n  state.groupPermissions[groupUuid] = []\n\n  if (updateDiscoveryTab) {\n    state.members = removeMembersByUuid(groupUuid, state.members)\n    state.groups = removeGroupByUuid(groupUuid, state.groups)\n    state[GroupsFolderType.DISCOVER] = removeGroupForFolderTypeByUuid(state[GroupsFolderType.DISCOVER], groupUuid)\n  }\n}\n\nconst groupNotIncluded = (groupUuids: string[] | undefined, groupUuid: string): boolean =>\n  groupUuids === undefined || !groupUuids.includes(groupUuid)\n\nconst addGroupToStart = (groupUuid: string, groupUuids: string[] | undefined): string[] =>\n  [groupUuid, ...groupUuids ?? []]\n\nconst filterGroupOut = (groupUuid: string, groupUuids: string[] | undefined): string[] | undefined =>\n  groupUuids?.filter((uuid: string) => uuid !== groupUuid)\n\nconst updateSearchResults = (\n  state: SearchGroupsState | undefined,\n  groupUuid: string,\n  action: GroupAction\n): GroupDataByFolderType | undefined => {\n  if (state) {\n    const searchMyGroups: GroupDataByFolderType = {\n      groupUuids: action === GroupAction.JOIN ?\n        addGroupToStart(groupUuid, state.myGroups?.groupUuids) :\n        filterGroupOut(groupUuid, state.myGroups?.groupUuids),\n      meta: state.myGroups?.meta,\n    }\n\n    return searchMyGroups\n  }\n}\n\nconst groupsSlice: Slice<GroupsSlice> = createSlice({\n  name: 'groups',\n  initialState,\n  reducers: {\n    setSearchText (state: GroupsSlice, action: PayloadAction<string>) {\n      state.searchText = action.payload\n    },\n    setIsFetching (state: GroupsSlice, action: PayloadAction<KeyValuePayload<boolean>>) {\n      state.isFetching[action.payload.key] = action.payload.value\n    },\n    setGroup (state: GroupsSlice, action: PayloadAction<KeyValuePayload<GroupResponse>>) {\n      state.groups[action.payload.key] = action.payload.value\n    },\n    setGroupRoles (state: GroupsSlice, action: PayloadAction<KeyValuePayload<RoleListItem[]>>) {\n      state.roles[action.payload.key] = action.payload.value\n    },\n    addGroupRole (state: GroupsSlice, action: PayloadAction<KeyValuePayload<RoleListItem>>) {\n      state.roles[action.payload.key] = (state.roles[action.payload.key] ?? []).concat(action.payload.value)\n    },\n    updateGroupRole (state: GroupsSlice, action: PayloadAction<KeyValuePayload<RoleListItem>>) {\n      const updatedRole: RoleListItem = action.payload.value\n\n      state.roles[action.payload.key] =\n        (state.roles[action.payload.key] ?? [])\n          .map((role: RoleListItem) => role.uuid === updatedRole.uuid ? updatedRole : role)\n    },\n    setGroupForFolders (\n      state: GroupsSlice,\n      action: PayloadAction<{ group: GroupResponse, groupFolderTypes: GroupsFolderType[] }>\n    ) {\n      state.groups[action.payload.group.uuid] = action.payload.group\n\n      action.payload.groupFolderTypes\n        .forEach((groupFolderType: GroupsFolderType) =>\n          addNonIncludedGroupToFolderStart(state, action.payload.group, groupFolderType))\n\n      state.messaging = addNonIncludedGroupToListEnd(state.messaging, action.payload.group)\n    },\n    removeGroupFromStore (state: GroupsSlice, action: PayloadAction<string>) {\n      handleRemoveGroup(state, action.payload, true)\n    },\n    removeMyGroupAndMessagingChannel (state: GroupsSlice, action: PayloadAction<string>) {\n      handleRemoveGroup(state, action.payload, false)\n      state.messaging = removeGroupForFolderTypeByUuid(state.messaging, action.payload)\n    },\n  },\n  extraReducers: {\n    [RESET_STORE_ACTION]: (\n      state: GroupsSlice\n    ) => {\n      Object.assign(state, initialState)\n    },\n    [approveOrRejectInvitation.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<InvitationUpdateResponse, ApproveOrRejectInvitationParams>\n    ) => {\n      state.isFetching[action.meta.arg.invitationUuid] = false\n\n      const isApproveAction: boolean = action.meta.arg.action === InvitationAction.APPROVE\n\n      if (isApproveAction && groupNotIncluded(state[GroupsFolderType.MY_GROUPS].groupUuids, action.payload.group_uuid)) {\n        state[GroupsFolderType.MY_GROUPS].groupUuids =\n          addGroupToStart(action.payload.group_uuid, state[GroupsFolderType.MY_GROUPS].groupUuids)\n      }\n    },\n    [approveOrRejectInvitation.rejected.type]: (\n      state: GroupsSlice,\n      action: RejectedAction<ApproveOrRejectInvitationParams>\n    ) => {\n      state.isFetching[action.meta.arg.invitationUuid] = false\n    },\n    [fetchGroups.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupsResponse, FetchGroupsParams>\n    ) => {\n\n      const {\n        groups,\n        groupUuids,\n      }: GroupDataByType = getGroupDataByType(action.payload.data, {\n        groups: state.groups,\n        groupUuids: state[action.meta.arg.type].groupUuids ?? [],\n      })\n\n      state.groups = groups\n      state[action.meta.arg.type] = {\n        groupUuids,\n        meta: action.payload.meta,\n      }\n\n      state.isFetching[getFetchingPageKey(action.meta.arg.type, action.meta.arg.queryParams.page)] = false\n      state.error[action.meta.arg.type] = false\n    },\n    [fetchGroups.rejected.type]: (state: GroupsSlice, action: RejectedAction<FetchGroupsParams>) => {\n      state.isFetching[getFetchingPageKey(action.meta.arg.type, action.meta.arg.queryParams.page)] = false\n      state.error[action.meta.arg.type] = true\n    },\n    [fetchGroupRoles.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<RoleListItem[], string>\n    ) => {\n      state.roles[action.meta.arg] = action.payload\n      state.isFetching[getGroupRolesKey(action.meta.arg)] = false\n    },\n    [fetchGroupRoles.rejected.type]: (state: GroupsSlice, action: RejectedAction<string>) => {\n      state.isFetching[getGroupRolesKey(action.meta.arg)] = false\n    },\n    [fetchGroupsByUUIDs.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<FetchGroupsByUUIDsResult, FetchGroupsByUUIDsParams>\n    ) => {\n      const { groups: _groups, groupUuids, meta, isJoined }: FetchGroupsByUUIDsResult = action.payload\n\n      const groups: GlobalGroups = _groups.reduce((\n        globalGroups: GlobalGroups,\n        group: GroupResponse,\n      ): GlobalGroups => ({\n        ...globalGroups,\n        [group.uuid]: { ...group, is_joined: group.is_joined ?? isJoined },\n      }), state.groups)\n\n      state.groups = groups\n      state.messaging = {\n        groupUuids: groupUuids.reduce(concatGroupUuid, state.messaging.groupUuids ?? []),\n        meta,\n      }\n\n      state.isFetching.fetchGroupsByUUIDs = false\n      state.error.fetchGroupsByUUIDs = false\n    },\n    [fetchGroupsByUUIDs.rejected.type]: (state: GroupsSlice, _action: RejectedAction<FetchGroupsByUUIDsParams>) => {\n      state.isFetching.fetchGroupsByUUIDs = false\n      state.error.fetchGroupsByUUIDs = true\n    },\n    [fetchGroup.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupResponse, GroupParams>\n    ) => {\n      state.groups[action.meta.arg.group_uuid] = action.payload\n      state.isFetching[action.meta.arg.group_uuid] = false\n    },\n    [fetchGroup.rejected.type]: (state: GroupsSlice, action: RejectedAction<GroupParams>) => {\n      state.isFetching[action.meta.arg.group_uuid] = false\n    },\n    [fetchGroupMembers.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupMembersResponse, GroupParams>\n    ) => {\n      const data: GroupMembersResponse = {\n        members: [],\n        meta: {\n          total: 0,\n        },\n      }\n\n      if (action.payload.meta.page === 1) {\n        data.meta = action.payload.meta\n        data.members = action.payload.members\n      } else {\n        const existingMembers: GroupMemberWithIdentityFields[] = state.members[action.meta.arg.group_uuid]?.members ?? []\n\n        data.meta = action.payload.meta\n        data.members = concatMembers(existingMembers, action.payload.members)\n      }\n      state.members[action.meta.arg.group_uuid] = data\n      state.isFetching[`${action.meta.arg.group_uuid}${FETCH_GROUP_MEMBERS}`] = false\n    },\n    [fetchGroupMembers.rejected.type]: (state: GroupsSlice, action: RejectedAction<GroupParams>) => {\n      state.isFetching[`${action.meta.arg.group_uuid}${FETCH_GROUP_MEMBERS}`] = false\n    },\n    [fetchGroupMember.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupMemberWithIdentityFields, MemberParams>\n    ) => {\n      const { group_uuid, gid_uuid }: MemberParams = action.meta.arg\n      const data: GroupMembersResponse = state.members[group_uuid] ?? {\n        members: [],\n        meta: {\n          total: 0,\n        },\n      }\n\n      data.members = concatMembers(data.members, [action.payload])\n\n      state.members[group_uuid] = data\n\n      state.isFetching[`${group_uuid}-${gid_uuid}`] = false\n    },\n    [fetchGroupMember.rejected.type]: (state: GroupsSlice, action: RejectedAction<MemberParams>) => {\n      const { group_uuid, gid_uuid }: MemberParams = action.meta.arg\n\n      state.isFetching[`${group_uuid}-${gid_uuid}`] = false\n    },\n    [leaveGroup.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupMembersResponse, MemberParams>\n    ) => {\n      const groupUuid: string = action.meta.arg.group_uuid\n      const memberUuid: string = action.meta.arg.gid_uuid\n\n      const searchText: string | undefined = state.searchText\n\n      if (searchText) {\n        const searchResult: SearchGroupsState | undefined = state.search[searchText]\n\n        const updatedSearchResults: GroupDataByFolderType | undefined =\n          updateSearchResults(searchResult, groupUuid, GroupAction.LEAVE)\n\n        state.search[searchText] = {\n          ...state.search[searchText],\n          myGroups: updatedSearchResults,\n        }\n      }\n\n      if (state.groups[groupUuid]?.group_visibility === Group.GroupVisibility.hidden) {\n        state.groups = removeGroupByUuid(groupUuid, state.groups)\n        state.members = removeMembersByUuid(groupUuid, state.members)\n      } else {\n        state.groups[groupUuid] = setGroupIsJoined(state.groups[groupUuid], false)\n        state.members[groupUuid] = removeMemberFromGroup(state.members[groupUuid], groupUuid, memberUuid)\n      }\n      state[GroupsFolderType.MY_GROUPS] = removeGroupForFolderTypeByUuid(state[GroupsFolderType.MY_GROUPS], groupUuid)\n      state.messaging = removeGroupForFolderTypeByUuid(state.messaging, groupUuid)\n\n      resetRemoveMembershipFetchStatus(state, action)\n    },\n    [leaveGroup.rejected.type]: resetRemoveMembershipFetchStatus,\n    [removeGroupMember.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupMembersResponse, MemberParams>\n    ) => {\n      const groupUuid: string = action.meta.arg.group_uuid\n      const memberUuid: string = action.meta.arg.gid_uuid\n\n      state.members[groupUuid] = removeMemberFromGroup(state.members[groupUuid], groupUuid, memberUuid)\n\n      resetRemoveMembershipFetchStatus(state, action)\n    },\n    [removeGroupMember.rejected.type]: resetRemoveMembershipFetchStatus,\n    [removeGroup.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<void, GroupParams>\n    ) => {\n      handleRemoveGroup(state, action.meta.arg.group_uuid, true)\n    },\n    [fetchGroupsSearch.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<GroupsResponse, FetchGroupsSearchParams>\n    ) => {\n      const {\n        myGroups: searchMyGroups,\n        page,\n        text,\n      }: FetchGroupsSearchParams = action.meta.arg\n\n      const fetchingGroupsUuids: string[] | undefined = action.meta.arg.keepFetchedGroups ?\n        searchMyGroups\n          ? state.search[text]?.myGroups?.groupUuids\n          : state.search[text]?.global?.groupUuids\n        : undefined\n\n      const {\n        groups,\n        groupUuids,\n      }: GroupDataByType = getGroupDataByType(action.payload.data, {\n        groups: state.groups,\n        groupUuids: fetchingGroupsUuids ?? [],\n      })\n\n      const searchGroupMeta: GroupDataByFolderType = {\n        groupUuids,\n        meta: action.payload.meta,\n      }\n\n      state.groups = groups\n\n      if (searchMyGroups) {\n        state.search[text] = {\n          ...state.search[text],\n          myGroups: searchGroupMeta,\n        }\n      } else {\n        state.search[text] = {\n          ...state.search[text],\n          global: searchGroupMeta,\n        }\n      }\n\n      const searchKey: string = getSearchFetchingPageKey(searchMyGroups, text, page)\n\n      state.isFetching[searchKey] = false\n      state.error[searchKey] = false\n    },\n    [fetchGroupsSearch.rejected.type]: (state: GroupsSlice, action: RejectedAction<FetchGroupsSearchParams>) => {\n      const {\n        myGroups: searchMyGroups,\n        page,\n        text,\n      }: FetchGroupsSearchParams = action.meta.arg\n\n      const searchKey: string = getSearchFetchingPageKey(searchMyGroups, text, page)\n\n      state.isFetching[searchKey] = false\n      state.error[searchKey] = true\n    },\n    [joinGroupMember.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<RolesForMemberResponse, JoinGroupParams>\n    ) => {\n      const groupUuid: string = action.meta.arg.group_uuid\n\n      const searchText: string | undefined = state.searchText\n\n      if (searchText) {\n        const searchResult: SearchGroupsState | undefined = state.search[searchText]\n\n        const updatedSearchResults: GroupDataByFolderType | undefined =\n          updateSearchResults(searchResult, groupUuid, GroupAction.JOIN)\n\n        state.search[searchText] = {\n          ...state.search[searchText],\n          myGroups: updatedSearchResults,\n        }\n      }\n\n      state.groups[groupUuid] = setGroupIsJoined(state.groups[groupUuid], true)\n      state[GroupsFolderType.MY_GROUPS] = addGroupForFolderTypeByUuid(state[GroupsFolderType.MY_GROUPS], groupUuid)\n      state.messaging = addGroupForFolderTypeByUuid(state.messaging, groupUuid)\n    },\n    [updateGroupMessagingList.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<string, string>\n    ) => {\n      state.messaging.groupUuids = [\n        action.payload,\n        ...state.messaging.groupUuids?.filter((groupUuid: string) => groupUuid !== action.payload) ?? [],\n      ]\n    },\n    [fetchGroupMemberRoles.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<RolesForMemberResponse, RolesForMemberParams>\n    ) => {\n      const { group_uuid, gid_uuid }: RolesForMemberParams = action.meta.arg\n\n      state.memberRoles[`${group_uuid}${gid_uuid}`] = action.payload.roles\n\n      state.isFetching[`${group_uuid}${gid_uuid}${FETCH_GROUP_MEMBER_ROLES}`] = false\n    },\n    [fetchGroupMemberRoles.rejected.type]: (state: GroupsSlice, action: RejectedAction<RolesForMemberParams>) => {\n      const { group_uuid, gid_uuid }: RolesForMemberParams = action.meta.arg\n\n      state.memberRoles[`${group_uuid}${gid_uuid}`] = []\n      state.isFetching[`${group_uuid}${gid_uuid}${FETCH_GROUP_MEMBER_ROLES}`] = false\n    },\n    [fetchGroupPermissions.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<PermissionListResponse, GroupParams>\n    ) => {\n      const { group_uuid }: GroupParams = action.meta.arg\n\n      state.groupPermissions[group_uuid] = action.payload.data\n      state.isFetching[`${action.meta.arg.group_uuid}${FETCH_GROUP_PERMISSIONS}`] = false\n    },\n    [fetchGroupPermissions.rejected.type]: (state: GroupsSlice, action: RejectedAction<GroupParams>) => {\n      const { group_uuid }: GroupParams = action.meta.arg\n\n      state.groupPermissions[group_uuid] = []\n      state.isFetching[`${action.meta.arg.group_uuid}${FETCH_GROUP_PERMISSIONS}`] = false\n    },\n    [removeGroupRole.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<void, RemoveGroupRoleParams>\n    ) => {\n      const groupUuid: string = action.meta.arg.groupUuid\n      const roleUuid: string = action.meta.arg.roleUuid\n\n      state.roles[groupUuid] = (state.roles[groupUuid] ?? [])\n        .filter((role: RoleListItem) => role.uuid !== roleUuid)\n      state.isFetching[`${groupUuid}${roleUuid}${REMOVE_GROUP_MEMBER_ROLE}`] = false\n    },\n    [removeGroupRole.rejected.type]: (\n      state: GroupsSlice,\n      action: RejectedAction<RemoveGroupRoleParams>\n    ) => {\n      const groupUuid: string = action.meta.arg.groupUuid\n      const roleUuid: string = action.meta.arg.roleUuid\n\n      state.isFetching[`${groupUuid}${roleUuid}${REMOVE_GROUP_MEMBER_ROLE}`] = false\n    },\n    [fetchGroupRoleMembers.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<RoleMembers, GroupRoleMembersParams>\n    ) => {\n      const data: RoleMembers = {\n        members: [],\n        meta: {\n          total: 0,\n        },\n      }\n\n      const { group_uuid, role_uuid }: GroupRoleMembersParams = action.meta.arg\n\n      if (action.payload.meta.page === 1) {\n        data.meta = action.payload.meta\n        data.members = action.payload.members\n      } else {\n        const existingRoleMembers: string[] = state.roleMembers[role_uuid]?.members ?? []\n\n        data.meta = action.payload.meta\n        data.members = [...existingRoleMembers, ...action.payload.members]\n      }\n\n      state.roleMembers[role_uuid] = data\n\n      state.isFetching[`${group_uuid}${role_uuid}${FETCH_GROUP_ROLE_MEMBERS}`] = false\n    },\n    [fetchGroupRoleMembers.rejected.type]: (state: GroupsSlice, action: RejectedAction<GroupRoleMembersParams>) => {\n      const { group_uuid, role_uuid }: GroupRoleMembersParams = action.meta.arg\n\n      state.isFetching[`${group_uuid}${role_uuid}${FETCH_GROUP_ROLE_MEMBERS}`] = false\n    },\n    [removeGroupMemberRoleAssignment.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<void, ResignGroupMemberRoleParams>\n    ) => {\n      const gidUuid: string = action.meta.arg.gidUuid\n      const groupUuid: string = action.meta.arg.groupUuid\n      const roleUuid: string = action.meta.arg.roleUuid\n      const members: string[] | undefined = state.roleMembers[roleUuid]?.members\n      const meta: PaginationMetaParams | undefined = state.roleMembers[roleUuid]?.meta\n\n      if (members !== undefined && meta !== undefined && meta.total > 0) {\n        state.roleMembers[roleUuid] = {\n          members: members.filter((memberUuid: string) => memberUuid !== gidUuid),\n          meta: {\n            ...meta,\n            total: meta.total - 1,\n          },\n        }\n      }\n\n      state.isFetching[`${groupUuid}${gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`] = false\n    },\n    [removeGroupMemberRoleAssignment.rejected.type]: (\n      state: GroupsSlice, action: RejectedAction<ResignGroupMemberRoleParams>\n    ) => {\n      const { groupUuid, gidUuid }: ResignGroupMemberRoleParams = action.meta.arg\n\n      state.isFetching[`${groupUuid}${gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`] = false\n    },\n    [assignRolesToGroupMember.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<AssignmentResponse[], ManageMemberRoleParams>\n    ) => {\n\n      const { groupUuid, gidUuid }: ManageMemberRoleParams = action.meta.arg\n\n      state.memberRoles[`${groupUuid}${gidUuid}`] = getMappedGroupMemberRoles(\n        state,\n        action.payload,\n        groupUuid,\n        gidUuid,\n      )\n\n      state.isFetching[`${groupUuid}${gidUuid}${FETCH_ASSIGN_ROLES_TO_GROUP_MEMBER}`] = false\n    },\n    [assignRolesToGroupMember.rejected.type]: (state: GroupsSlice, action: RejectedAction<ManageMemberRoleParams>) => {\n      const { groupUuid, gidUuid }: ManageMemberRoleParams = action.meta.arg\n\n      state.isFetching[`${groupUuid}${gidUuid}${FETCH_ASSIGN_ROLES_TO_GROUP_MEMBER}`] = false\n    },\n    [unassignRolesToGroupMember.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<RoleResponse[], ManageMemberRoleParams>\n    ) => {\n      const { groupUuid, gidUuid }: ManageMemberRoleParams = action.meta.arg\n\n      state.memberRoles[`${groupUuid}${gidUuid}`] = action.payload\n\n      state.isFetching[`${groupUuid}${gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`] = false\n    },\n    [unassignRolesToGroupMember.rejected.type]: (state: GroupsSlice, action: RejectedAction<ManageMemberRoleParams>) => {\n      const { groupUuid, gidUuid }: ManageMemberRoleParams = action.meta.arg\n\n      state.isFetching[`${groupUuid}${gidUuid}${FETCH_UNASSIGN_ROLES_TO_GROUP_MEMBER}`] = false\n    },\n    [fetchGroupInvitationLinks.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<InvitationLinks, GroupUuidParam>\n    ) => {\n      state.invitationLinks[action.meta.arg.group_uuid] = action.payload.invitation_links\n      state.isFetching[getFetchingInvitationLinksKey(action.meta.arg.group_uuid)] = false\n    },\n    [fetchGroupInvitationLinks.rejected.type]: (\n      state: GroupsSlice,\n      action: RejectedAction<GroupUuidParam>\n    ) => {\n      state.isFetching[getFetchingInvitationLinksKey(action.meta.arg.group_uuid)] = false\n    },\n    [createGroupInvitationLink.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<InvitationLinkResponse, GroupUuidParam>\n    ) => {\n      state.invitationLinks[action.meta.arg.group_uuid] = [action.payload]\n      state.isFetching[getCreatingInvitationLinkKey(action.meta.arg.group_uuid)] = false\n    },\n    [createGroupInvitationLink.rejected.type]: (\n      state: GroupsSlice,\n      action: RejectedAction<GroupUuidParam>\n    ) => {\n      state.isFetching[getCreatingInvitationLinkKey(action.meta.arg.group_uuid)] = false\n    },\n    [deleteGroupInvitationLink.fulfilled.type]: (\n      state: GroupsSlice,\n      action: FulfilledAction<void, InvitationLinkParams>\n    ) => {\n      state.invitationLinks[action.meta.arg.group_uuid] = []\n      state.isFetching[getDeleteInvitationLinkKey(action.meta.arg.group_uuid)] = false\n    },\n    [deleteGroupInvitationLink.rejected.type]: (\n      state: GroupsSlice,\n      action: RejectedAction<InvitationLinkParams>\n    ) => {\n      state.isFetching[getDeleteInvitationLinkKey(action.meta.arg.group_uuid)] = false\n    },\n  },\n})\n\nexport const {\n  setIsFetching,\n  setGroup,\n  removeMyGroupAndMessagingChannel,\n  setGroupForFolders,\n  setGroupRoles,\n  removeGroupFromStore,\n  setSearchText,\n  addGroupRole,\n  updateGroupRole,\n} = groupsSlice.actions\n\nexport default groupsSlice.reducer\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/pubnub/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/pubnub/notifications.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/messaging_selectors.ts",["2127"],"import { BlockedUser } from '@globalid/messaging-service-sdk'\nimport {\n  FetchBlockedUsersParameters,\n  FetchStatus,\n  GidUUID,\n} from './interfaces'\nimport { RootState } from 'RootType'\n\nexport const createKeyFromBlockedUsersParameters = (props: FetchBlockedUsersParameters): string => (\n  `${props.page ?? 1}`\n)\n\nexport const getBlockedUserByGidUUID = (state: RootState, gidUuid: GidUUID): BlockedUser | undefined => (\n  state.messaging.blockedUsers[gidUuid]\n)\n\nexport const isBlockedUsersFetchInProgress = (\n  state: RootState,\n): boolean => {\n  const fetchStatusArray = Object.values(state.messaging.blockedUsersFetchStatusByParameters)\n\n  return fetchStatusArray.some((status: FetchStatus | undefined) => status === undefined || status === FetchStatus.PENDING)\n}\n\nexport const getBlockedUsersFetchStatusByParameters = (\n  state: RootState,\n  parameters: FetchBlockedUsersParameters\n): FetchStatus | undefined => {\n  const key: string = createKeyFromBlockedUsersParameters(parameters)\n\n  return state.messaging.blockedUsersFetchStatusByParameters[key]\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_controls/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_details/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/alert_triangle_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/people_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/wallet_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/groups_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/messages_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/profile_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/more_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/auth/auth.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/hooks/use_device_permission_status.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_roster.tsx",["2128"],"/* eslint-disable unicorn/filename-case */\n// Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, ChangeEvent } from 'react'\nimport { useNavigation } from '../providers/navigation_provider'\nimport { RosterAttendeeType } from 'amazon-chime-sdk-component-library-react/lib/types'\nimport { getString } from '../../../utils'\nimport {\n  Roster,\n  RosterHeader,\n  RosterGroup,\n  useRosterState,\n  RosterAttendee,\n} from 'amazon-chime-sdk-component-library-react'\nimport { NavigationContextType, RosterContextValue } from '../providers/interfaces'\n\nexport const MeetingRoster: React.FC = () => {\n  const { roster }: RosterContextValue = useRosterState()\n  const [filter, setFilter] = useState<string>('')\n  const { closeRoster }: NavigationContextType = useNavigation()\n\n  let attendees: RosterAttendeeType[] = Object.values(roster)\n\n  if (filter) {\n    attendees = attendees.filter(attendee =>\n      attendee?.name?.toLowerCase().includes(filter.trim().toLowerCase())\n    )\n  }\n\n  const handleSearch = (e: ChangeEvent<HTMLInputElement>): void => {\n    setFilter(e.target.value)\n  }\n\n  const attendeeItems: JSX.Element[] = attendees.map(attendee => {\n    const { chimeAttendeeId } = attendee || {}\n\n    return (\n      <RosterAttendee key={chimeAttendeeId} attendeeId={chimeAttendeeId} />\n    )\n  })\n\n  return (\n    <Roster className='roster'>\n      <RosterHeader\n        searchValue={filter}\n        onSearch={handleSearch}\n        onClose={closeRoster}\n        title={getString('meeting-present')}\n        badge={attendees.length}\n      />\n      <RosterGroup>{attendeeItems}</RosterGroup>\n    </Roster>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/delete_message/styles.ts",["2129"],"import { makeStyles, Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  dialogWrapper: {\n    width: '327px',\n    height: '160px',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    justifyContent: 'space-between',\n  },\n\n  deleteMessageTitle: {\n    fontFamily: 'Averta-Bold',\n    fontSize: '20px',\n  },\n\n  deleteMessageDescription: {\n    fontFamily: 'Averta-Regular',\n    fontSize: '15px',\n    color: theme.palette.customColors.midGray,\n    width: '280px',\n    placeSelf: 'center',\n  },\n\n  buttonText: {\n    fontFamily: 'Averta-Bold',\n    fontSize: '16px',\n  },\n})\n)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/button_group/button_group.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/transition/transitions.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/chat_infinite_scroll.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/right_sidebar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/quick_menu/quick_menu_item.tsx",["2130"],"import React, { useRef } from 'react'\nimport { MenuItem, ListItemIcon, ListItemText } from '@material-ui/core'\n\nimport { useStyles } from './styles'\nimport { QuickMenuItemProps } from './interfaces'\nimport { ToggledStateResult } from '../../../hooks/interfaces'\nimport { useToggledState } from '../../../hooks/use_toggled_state'\nimport { isString } from 'lodash'\nimport { getString } from '../../../utils'\n\nconst getItemContent = (\n  content: string | JSX.Element,\n  inProgress: boolean\n): JSX.Element => inProgress\n  ? <ListItemText>{getString('loading')}</ListItemText>\n  : isString(content)\n    ? <ListItemText>{content}</ListItemText>\n    : content\n\nconst getIcon = (icon?: JSX.Element): JSX.Element | string => icon\n  ? <ListItemIcon>{icon}</ListItemIcon>\n  : ''\n\nexport const QuickMenuItem: React.FC<QuickMenuItemProps> = (item: QuickMenuItemProps) => {\n  const classes = useStyles()\n\n  const menuItemRef: React.RefObject<HTMLLIElement> = useRef<HTMLLIElement>(null)\n\n  const [inProgress, triggerToggle]: ToggledStateResult = useToggledState({\n    initialState: false,\n    mounted: menuItemRef.current !== null,\n    condition: () => !item.disabled,\n    command: item.onClick,\n  })\n\n  if (item.hidden) {\n    return null\n  }\n\n  return (<MenuItem\n    className={classes.quickMenuItem}\n    onClick={triggerToggle}\n    disabled={inProgress || item.disabled}\n    divider={true}\n    disableGutters={true}\n    key={item.id}\n    ref={menuItemRef}\n  >\n    {getIcon(item.icon)}\n    {getItemContent(item.text, inProgress)}\n  </MenuItem>\n  )}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/infinite_scroll.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/horizontal_infinite_scroll.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/groups_selectors.ts",["2131","2132","2133","2134"],"import {\n  AssignmentResponse,\n  GroupResponse,\n  GroupParams,\n  PermissionListItem,\n  RolesForMemberParams,\n  RoleListItem,\n} from '@globalid/group-service-sdk'\nimport { RootState } from 'RootType'\nimport { FETCH_GROUP_MEMBER_ROLES, FETCH_GROUP_PERMISSIONS } from '../constants'\nimport { GroupsFolderType, GroupsSlice } from './interfaces'\n\nexport const getGroupByUUID = (state: RootState, groupUuid: string): GroupResponse | undefined => (\n  state.groups.groups[groupUuid]\n)\n\nexport const getGroupIsFetchingByUUID = (state: RootState, groupUuid: string): boolean | undefined => (\n  state.groups.isFetching[groupUuid]\n)\n\nexport const getMyGroupsUUIDs = (state: RootState): string[] | undefined => (\n  state.groups[GroupsFolderType.MY_GROUPS].groupUuids\n)\n\nexport const getGroupMemberRolesIsFetchingByUUID = (state: RootState, params: RolesForMemberParams):\n  boolean | undefined => state.groups.isFetching[`${params.group_uuid}${params.gid_uuid}${FETCH_GROUP_MEMBER_ROLES}`]\n\nexport const getGroupMemberRolesByUUID = (state: RootState, params: RolesForMemberParams):\n  RoleListItem[] | undefined => state.groups.memberRoles[`${params.group_uuid}${params.gid_uuid}`]\n\nexport const getMappedGroupMemberRoles = (\n  state: GroupsSlice,\n  roles: AssignmentResponse[],\n  groupUuid: string,\n  gidUuid: string\n): RoleListItem[] => {\n  const mappedRoles: RoleListItem[] = roles.reduce<RoleListItem[]>(\n    (arr: RoleListItem[], roleResponse: AssignmentResponse) => {\n      const assignedRole: RoleListItem | undefined = state.roles[groupUuid]?.find(\n        (role: RoleListItem) => role.uuid === roleResponse.role_uuid\n      )\n\n      if (assignedRole === undefined) {\n        return arr\n      }\n\n      return [\n        ...arr,\n        {\n          name: assignedRole.name,\n          uuid: assignedRole.uuid,\n          group_uuid: assignedRole.group_uuid,\n          permissions: assignedRole.permissions,\n        },\n      ]\n    }, [])\n\n  const existingRoles: RoleListItem[] | undefined = state.memberRoles[`${groupUuid}${gidUuid}`]\n\n  if (existingRoles !== undefined) {\n    return [...existingRoles, ...mappedRoles]\n  }\n\n  return mappedRoles\n}\n\nexport const getGroupPermissionsByUUID = (\n  state: RootState,\n  params: GroupParams\n): PermissionListItem[] | undefined => (\n  state.groups.groupPermissions[params.group_uuid]\n)\n\nexport const getGroupPermissionsIsFetchingByUUID = (\n  state: RootState,\n  params: GroupParams\n): boolean | undefined => state.groups.isFetching[`${params.group_uuid}${FETCH_GROUP_PERMISSIONS}`]\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/api/groups_api.ts",["2135","2136","2137","2138","2139","2140","2141","2142","2143","2144","2145","2146","2147","2148","2149","2150","2151","2152"],"import { GeneralObject } from './../../utils/interfaces'\nimport {\n  getGroups as getGroupsSdk,\n  getGroup as getGroupSdk,\n  getMembers as getMembersSdk,\n  getMember as getMemberSdk,\n  removeMember as removeMemberSdk,\n  releaseGroup as releaseGroupSdk,\n  PaginationQueryParams,\n  GroupsResponse,\n  GroupResponse,\n  MembersResponse,\n  MemberParams,\n  joinToGroup,\n  createGroup as createGroupSdk,\n  GroupRequest,\n  updateGroup,\n  UpdateGroupRequest,\n  UpdateGroupResponse,\n  getIdentityUpdateById,\n  IdentityRequest,\n  acceptInvitation,\n  declineInvitation,\n  InvitationUpdateResponse,\n  invitation as sendInvitationSdk,\n  InvitationRequest,\n  InvitationResponse,\n  searchGroups as searchGroupsSdk,\n  MemberResponse,\n  RolesForMemberResponse,\n  RolesForMemberParams,\n  RoleParams,\n  getRolesForMember as getRolesForMemberSdk,\n  removeRole as removeRoleSdk,\n  getRoles,\n  RoleRequest,\n  RoleResponse,\n  createRole as createRoleSdk,\n  updateRole as updateRoleSdk,\n  PermissionListResponse,\n  removeRoleAssignment as removeRoleAssignmentSdk,\n  AssignmentParams,\n  MembersForRoleParams,\n  MembersForRoleResponse,\n  getMembersForRole as getMembersForRoleSdk,\n  createRoleAssignment,\n  AssignmentResponse,\n  getPermissions as getPermissionsSdk,\n  createVerification,\n  VerificationResponse,\n  VerificationRequest,\n  updateVerification,\n  RolesResponse,\n  AssignmentRequest,\n  CreateAssignmentParams,\n  InvitationLinkResponse,\n  InvitationLinks,\n  getInvitationLinks as getInvitationLinksSdk,\n  createInvitationLink as createInvitationLinkSdk,\n  removeInvitationLink as removeInvitationLinkSdk, InvitationLinkParams,\n  getVerifications,\n  VerificationsResponse,\n  getRole as getRoleSdk,\n  RoleListItem,\n  VerificationParams,\n  removeVerification as removeVerificationSdk,\n  Member,\n  GroupParams,\n  CategoryListItem,\n  createVerificationRequest as createVerificationRequestSdk,\n  CreateVerificationRequestBody,\n  CreatedGroupVerificationRequest,\n} from '@globalid/group-service-sdk'\nimport { getValidToken } from '../../components/auth'\nimport { GROUP_MEMBERS_PER_PAGE, GROUP_ROLE_MEMBERS_PER_PAGE, GROUPS_PER_PAGE, API_BASE_URL } from '../../constants'\nimport { GroupsFolderType } from '../../store/interfaces'\nimport { IdentityRequestModel } from '@globalid/identity-namespace-service-sdk'\nimport pRetry from 'p-retry'\nimport { waitForIdentityRequestStatus } from './identity_api'\nimport { UpdatedIdentityValues, IdentityRequestModelStatus, IdentityStatusArgs } from './interfaces'\nimport Axios, { AxiosResponse } from 'axios'\n\nexport const getGroups = async (\n  type: GroupsFolderType,\n  paginationParams: PaginationQueryParams\n): Promise<GroupsResponse> => {\n  const token: string = await getValidToken()\n\n  const membershipPosition: Member.MembershipPosition | undefined = type === GroupsFolderType.MY_GROUPS\n    ? Member.MembershipPosition.Joined\n    : undefined\n\n  return getGroupsSdk(token, {\n    membershipPosition,\n    ...paginationParams,\n  })\n}\n\nexport const getGroupsByUUID = async (\n  group_uuids: string[]\n): Promise<GroupResponse[]> => {\n  const token: string = await getValidToken()\n\n  return searchGroupsSdk(token, {\n    group_uuids,\n  })\n}\n\nexport const getGroup = async (\n  group_uuid: string\n): Promise<GroupResponse> => {\n  const token: string = await getValidToken()\n\n  return getGroupSdk({ group_uuid }, token)\n}\n\nexport const searchGroups = async (\n  text: string,\n  myGroups: boolean,\n  page: number\n): Promise<GroupsResponse> => {\n  const token: string = await getValidToken()\n\n  const membershipPosition: Member.MembershipPosition | undefined = myGroups\n    ? Member.MembershipPosition.Joined\n    : undefined\n\n  return getGroupsSdk(token, {\n    text,\n    membershipPosition,\n    page,\n    per_page: GROUPS_PER_PAGE,\n  })\n}\n\nexport const getMembers = async (\n  group_uuid: string,\n  page: number,\n): Promise<MembersResponse> => {\n  const token: string = await getValidToken()\n\n  return getMembersSdk(token, { group_uuid }, { page, per_page: GROUP_MEMBERS_PER_PAGE })\n}\n\nexport const getMember = async (\n  params: MemberParams\n): Promise<MemberResponse> => {\n  const token: string = await getValidToken()\n\n  return getMemberSdk(token, params)\n}\n\nexport const removeMembership = async (\n  params: MemberParams,\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  return removeMemberSdk(token, params)\n}\n\nexport const releaseGroup = async (\n  params: GroupParams,\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  await releaseGroupSdk(token, params)\n}\n\nexport const createGroup = async (\n  body: GroupRequest\n): Promise<GroupResponse> => {\n  const token: string = await getValidToken()\n\n  return createGroupSdk(token, body)\n}\n\nexport const joinGroup = async (\n  group_uuid: string,\n  is_hidden: boolean,\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  return joinToGroup(token, { is_hidden }, { group_uuid })\n}\n\nexport const editGroup = async (\n  groupUuid: string,\n  body: UpdateGroupRequest,\n): Promise<UpdateGroupResponse> => {\n  const token: string = await getValidToken()\n\n  const updateGroupResponse: UpdateGroupResponse = await updateGroup(token, { group_uuid: groupUuid }, body)\n\n  const updatedIdentityValues: UpdatedIdentityValues = await (\n    updateGroupResponse.update_requests.reduce(\n      async (\n        updatedValues: Promise<UpdatedIdentityValues>,\n        updateRequest: IdentityRequestModel\n      ): Promise<UpdatedIdentityValues> => {\n        const prevValues: UpdatedIdentityValues = await updatedValues\n\n        const updatedIdentityRequest: IdentityRequest = await waitForIdentityRequestStatus<IdentityRequest>('approved', validateGroupIdentityRequestStatus, {\n          access_token: token,\n          identity_update_request_uuid: updateRequest.uuid,\n          gid_uuid: groupUuid,\n        })\n\n        return new Promise((resolve: Function) => resolve({\n          ...prevValues,\n          [updatedIdentityRequest.field_name]: updatedIdentityRequest.new_value,\n        }))\n      },\n      new Promise((resolve: Function) => resolve({}))\n    )\n  )\n\n  return {\n    ...updateGroupResponse,\n    ...updatedIdentityValues,\n  }\n}\n\nexport const getValidationErrorMessage = (property: string): string => (\n  `${property}-UPDATE_FAILED`\n)\n\nexport const validateGroupIdentityRequestStatus = async (\n  args: IdentityStatusArgs,\n): Promise<IdentityRequest> => {\n  const { identity_update_request_uuid, gid_uuid, access_token } = args\n  const updatedIdentity: IdentityRequest = await getIdentityUpdateById(access_token, {\n    update_request_uuid: identity_update_request_uuid,\n    group_uuid: gid_uuid,\n  })\n\n  const identityRequestStatus: IdentityRequestModelStatus = updatedIdentity.status\n\n  if (identityRequestStatus === args.status) {\n    return updatedIdentity\n  } else if (identityRequestStatus === 'rejected') {\n    throw new pRetry.AbortError(getValidationErrorMessage(updatedIdentity.field_name))\n  }\n  throw new Error('KEEP_POOLING')\n}\n\nexport const approveInvitation = async (\n  invitationUuid: string,\n): Promise<InvitationUpdateResponse> => {\n  const token: string = await getValidToken()\n\n  return acceptInvitation(token, { invitation_uuid: invitationUuid })\n}\n\nexport const rejectInvitation = async (\n  invitationUuid: string,\n): Promise<InvitationUpdateResponse> => {\n  const token: string = await getValidToken()\n\n  return declineInvitation(token, { invitation_uuid: invitationUuid })\n}\n\nexport const sendInvitation = async (\n  groupUuid: string,\n  body: InvitationRequest,\n): Promise<InvitationResponse> => {\n  const token: string = await getValidToken()\n\n  return sendInvitationSdk(token, body, { group_uuid: groupUuid })\n}\n\nexport const getRolesForMember = async (params: RolesForMemberParams\n): Promise<RolesForMemberResponse> => {\n  const token: string = await getValidToken()\n\n  return getRolesForMemberSdk(token, { group_uuid: params.group_uuid, gid_uuid: params.gid_uuid })\n}\n\nexport const getMembersForRole = async (\n  params: MembersForRoleParams,\n  page: number,\n): Promise<MembersForRoleResponse> => {\n  const token: string = await getValidToken()\n\n  return getMembersForRoleSdk(token, params, { page, per_page: GROUP_ROLE_MEMBERS_PER_PAGE })\n}\n\nexport const getRole = async (\n  params: RoleParams\n): Promise<RoleListItem> => {\n  const token: string = await getValidToken()\n\n  return getRoleSdk(token, { group_uuid: params.group_uuid, role_uuid: params.role_uuid })\n}\n\nexport const removeRole = async (\n  params: RoleParams\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  return removeRoleSdk(token, { group_uuid: params.group_uuid, role_uuid: params.role_uuid })\n}\n\nexport const removeRoleAssignment = async (params: AssignmentParams\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  return removeRoleAssignmentSdk(token, {\n    group_uuid: params.group_uuid,\n    role_uuid: params.role_uuid,\n    gid_uuid: params.gid_uuid,\n  })\n}\n\nexport const createRole = async (\n  groupUuid: string,\n  body: RoleRequest\n): Promise<RoleResponse> => {\n  const token: string = await getValidToken()\n\n  return createRoleSdk(token, { group_uuid: groupUuid }, body)\n}\n\nexport const updateRole = async (\n  groupUuid: string,\n  roleUuid: string,\n  body: RoleRequest\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  await updateRoleSdk(token, { group_uuid: groupUuid, role_uuid: roleUuid }, body)\n}\n\nexport const getGroupPermissions = async (\n  groupUuid: string,\n): Promise<PermissionListResponse> => {\n  const token: string = await getValidToken()\n\n  return getPermissionsSdk({ group_uuid: groupUuid }, token)\n}\n\nexport const getGroupRoles = async (\n  groupUuid: string,\n): Promise<RolesResponse> => {\n  const token: string = await getValidToken()\n\n  return getRoles(token, {group_uuid: groupUuid}, { with_member_counts: true })\n}\n\nexport const assignRole = async (\n  roleUuid: string,\n  groupUuid: string,\n  loggedInUserGidUuid: string\n): Promise<AssignmentResponse> => {\n  const token: string = await getValidToken()\n\n  const params: CreateAssignmentParams = {\n    role_uuid: roleUuid,\n    group_uuid: groupUuid,\n  }\n\n  const body: AssignmentRequest = {\n    gid_uuid: loggedInUserGidUuid,\n  }\n\n  return createRoleAssignment(token, params, body)\n}\n\nexport const getInvitationLinks = async (\n  groupUuid: string,\n): Promise<InvitationLinks> => {\n  const token: string = await getValidToken()\n\n  return getInvitationLinksSdk(token, { group_uuid: groupUuid }, {})\n}\n\nexport const createInvitationLink = async (\n  groupUuid: string,\n): Promise<InvitationLinkResponse> => {\n  const token: string = await getValidToken()\n\n  return createInvitationLinkSdk(token, { group_uuid: groupUuid })\n}\n\nexport const removeInvitationLink = async (params: InvitationLinkParams): Promise<void> => {\n  const token: string = await getValidToken()\n\n  return removeInvitationLinkSdk(token, params)\n}\n\nexport const createGroupVerification = async (\n  groupUuid: string,\n  body: VerificationRequest\n): Promise<VerificationResponse> => {\n  const token: string = await getValidToken()\n\n  return createVerification(token, { group_uuid: groupUuid }, body)\n}\n\nexport const editGroupVerification = async (\n  groupUuid: string,\n  {\n    uuid: verification_uuid,\n    ...body\n  }: VerificationResponse\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  return updateVerification({ group_uuid: groupUuid, verification_uuid }, body, token)\n}\n\nexport const getGroupVerifications = async (\n  groupUuid: string\n): Promise<VerificationsResponse> => {\n  const token: string = await getValidToken()\n\n  return getVerifications({ group_uuid: groupUuid }, token)\n}\n\nexport const removeGroupVerification = async (\n  groupUuid: string,\n  verificationUuid: string,\n): Promise<void> => {\n  const token: string = await getValidToken()\n\n  const params: VerificationParams = {\n    group_uuid: groupUuid,\n    verification_uuid: verificationUuid,\n  }\n\n  return removeVerificationSdk(params, token)\n}\n\nexport const createVerificationRequest = async (\n  args: CreateVerificationRequestBody,\n  group_uuid: string,\n): Promise<CreatedGroupVerificationRequest> => {\n  const token: string = await getValidToken()\n\n  return createVerificationRequestSdk(token, args, { group_uuid })\n}\n\nexport const getGroupVerificationCategories = async (group_uuid: string): Promise<CategoryListItem[]> => {\n  const token: string = await getValidToken()\n  const axiosResponse: AxiosResponse<{ data: CategoryListItem[] }> = await Axios.request<{ data: CategoryListItem[] }>({\n    headers: authenticatedHeaders(token),\n    method: 'GET',\n    url: `${API_BASE_URL}/v1/groups/${group_uuid}/categories`,\n  })\n\n  return axiosResponse.data.data\n}\n\nexport const authenticatedHeaders = (accessToken: string): GeneralObject<string> => ({\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n  'Authorization': `Bearer ${accessToken}`,\n})\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/navigation/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_controls/meeting_controls.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_details/meeting_details.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/components/card/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/disconnect_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/get_app_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/close_button/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/popover/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/bottom_drawer/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/button_group/styles.ts",["2153"],"import { makeStyles, Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  buttonGroupWrapper: {\n    backgroundColor: theme.palette.customColors.backgroundGrey,\n    display: 'flex',\n    padding: theme.spacing(0.5),\n    margin: theme.spacing(2),\n    marginTop: theme.spacing(1),\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    borderRadius: '4px',\n  },\n\n  buttonText: {\n    fontFamily: 'Averta-Semibold',\n    fontSize: '12px',\n    lineHeight: '16px',\n  },\n\n  counterText: {\n    color: theme.palette.customColors.electricBlue,\n    marginLeft: theme.spacing(0.3),\n  },\n\n  buttonWrapperNonActive: {\n    '&.MuiButton-root': {\n      backgroundColor: theme.palette.customColors.backgroundGrey,\n      borderRadius: '3px',\n      flexGrow: 1,\n      maxWidth: 'unset',\n    },\n  },\n\n  buttonWrapperActive: {\n    '&.MuiButton-root': {\n      backgroundColor: theme.palette.customColors.white,\n      borderRadius: '3px',\n      flexGrow: 1,\n      maxWidth: 'unset',\n\n      '&:hover': {\n        backgroundColor: theme.palette.customColors.white,\n      },\n    },\n  },\n})\n)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/right_sidebar/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_toggled_state.ts",["2154"],"import { ToggledStateResult, ToggledStateProps } from './interfaces'\nimport { useState } from 'react'\n\nexport const useToggledState = ({\n  initialState,\n  mounted = true,\n  condition,\n  command,\n}: ToggledStateProps): ToggledStateResult => {\n\n  const [state, setState] = useState<boolean>(initialState)\n\n  const triggerStateToggle = async (): Promise<void> => {\n    const evalCondition: boolean = condition?.() ?? true\n\n    if (state === initialState && evalCondition && command) {\n      setState(!initialState)\n      try {\n        await command()\n      } catch (err){\n        setState(initialState)\n      } finally {\n        if (mounted) {\n          setState(initialState)\n        }\n      }\n    }\n  }\n\n  return [ state, triggerStateToggle ]\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/reverse_scroll_container.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/styles.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messages.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/infinite_scroll/use_scroll_ref.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_details/meeting_details.styled.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/meeting_controls/meeting_controls.styled.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/navigation/navigation.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/components/card/card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/disconnect_dialog/disconnect_dialog.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/edit_channel_dialog.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/get_app_dialog/get_app_dialog.tsx",["2155"],"import React from 'react'\nimport { StyledDialog } from '../styled_dialog'\nimport appQrCodeIconLink from '../../../../assets/icons/app-qr-code-icon.svg'\nimport shieldIconLink from '../../../../assets/icons/shield-icon.svg'\nimport singleUserIconLink from '../../../../assets/icons/single-user-icon.svg'\nimport phoneBigIconLink from '../../../../assets/icons/phone-big-icon.svg'\nimport multiChatIconLink from '../../../../assets/icons/multi-chat-icon.svg'\nimport { useStyles } from './style'\nimport { DialogProps } from '../interfaces'\nimport { BRANCH_IO_LINK } from '../../../../constants'\nimport { getString } from '../../../../utils'\nimport { useIsMobileView } from '../../helpers'\n\nconst handleClick = (): void => {\n  window.open(BRANCH_IO_LINK, '_blank',)\n}\n\nexport const GetAppDialog: React.FC<DialogProps> = ({\n  open,\n  handleOpenState,\n}: DialogProps): JSX.Element => {\n  const isMobile: boolean = useIsMobileView()\n\n  const {\n    getAppHeader,\n    getAppSubHeader,\n    appQrcode,\n    getAppInstruction,\n    header,\n    infoItem,\n    verticalLine,\n    phoneIcon,\n  } = useStyles()\n\n  return (\n    <>\n      {isMobile && (\n        <StyledDialog\n          open={open}\n          handleOpenState={handleOpenState}\n          handleClick={handleClick}\n          actionText='Get the app'\n        >\n          <div>\n            <div className={header}>{getString('get-app-get-started')}</div>\n            <div className={getAppHeader}>{getString('get-app-header')}</div>\n            <div className={getAppSubHeader}>\n              {getString('get-app-subheader')}\n            </div>\n            <div className={infoItem}>\n              <img src={shieldIconLink} />\n              <span>{getString('get-app-privacy')}</span>\n            </div>\n            <div className={verticalLine}/>\n            <div className={infoItem}>\n              <img src={singleUserIconLink} />\n              <span>{getString('get-app-build')}</span>\n            </div>\n            <div className={verticalLine}/>\n            <div className={infoItem}>\n              <img src={multiChatIconLink} />\n              <span>{getString('get-app-send')}</span>\n            </div>\n            <div className={phoneIcon}>\n              <img src={phoneBigIconLink} />\n            </div>\n          </div>\n        </StyledDialog>\n      )}\n      {!isMobile && (\n        <StyledDialog\n          open={open}\n          handleOpenState={handleOpenState}\n          name='get-app'\n        >\n          <div>\n            <div>\n              <div className={getAppHeader}>{getString('get-app-header')}</div>\n              <div className={getAppSubHeader}>\n                {getString('get-app-subheader')}\n              </div>\n              <div className={appQrcode}>\n                <img src={appQrCodeIconLink} alt='App QR Code'></img>\n              </div>\n              <div className={getAppInstruction}>\n                <div>{getString('get-app-scan')}</div>\n                <div>{getString('get-app-download')}</div>\n              </div>\n            </div>\n          </div>\n        </StyledDialog>\n      )}\n    </>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/close_button/close_button.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/combined_button.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/popover/popover.tsx",["2156"],"import React from 'react'\nimport clsx from 'clsx'\nimport PopoverMUI from '@material-ui/core/Popover'\nimport { useStyles } from './styles'\nimport { PopoverProps } from './interfaces'\n\nexport const Popover: React.FC<PopoverProps> = ({\n  children,\n  className,\n  compact = false,\n  cursorAt,\n  ...properties\n}: PopoverProps) => {\n  const classes = useStyles()\n  const anchorElement: Element | null | undefined = cursorAt?.current\n\n  return <PopoverMUI\n    anchorEl={anchorElement}\n    className={clsx(\n      classes.popoverRoot,\n      {[classes.popoverCompactRoot]: compact},\n      className\n    )}\n    elevation={0}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: 'bottom',\n      horizontal: 'right',\n    }}\n    transformOrigin={{\n      vertical: 'top',\n      horizontal: 'right',\n    }}\n    {...properties}\n  >\n    {children}\n  </PopoverMUI>\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/bottom_drawer/bottom_drawer.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/icon_button.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/use_messages.ts",["2157"],"import { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useRouteMatch } from 'react-router-dom'\nimport useAsyncEffect from 'use-async-effect'\nimport { deviceKeyManager } from '../../init'\nimport { fetchFileToken, fetchFolders, setLastVisitedFolder } from '../../store/channels_slice/channels_slice'\nimport { ThunkDispatch } from './../../store'\nimport {\n  checkEncryptionAllowedDevices, handleConsentFromCookie, initializeDeviceKeyManager,\n  statusMatcher,\n} from './helpers'\nimport { EncryptionStatus, UseMessagesResponse } from './interfaces'\n\n// eslint-disable-next-line max-lines-per-function\nexport const useMessages = (): UseMessagesResponse => {\n  const dispatch: ThunkDispatch = useDispatch()\n\n  const [encryptionStatus, setEncryptionStatus] = useState<EncryptionStatus>(EncryptionStatus.PENDING)\n\n  const match = useRouteMatch<{\n    type: string\n    channelId?: string\n    groupUuid?: string\n  }>()\n\n  const {\n    type,\n    channelId,\n    groupUuid,\n  } = match.params\n\n  useAsyncEffect(async (isMounted: () => boolean) => {\n    await dispatch(fetchFolders({}))\n    if (!deviceKeyManager.getInitialized()) {\n      await initializeDeviceKeyManager()\n    }\n\n    if (isMounted()) {\n      setEncryptionStatus(EncryptionStatus.KEY_MANAGER_INITIALIZED)\n    }\n  }, [])\n\n  useEffect(() => {\n    dispatch(setLastVisitedFolder(\n      {\n        folderType: type,\n        channelId,\n        groupUuid,\n      }\n    ))\n  }, [type, channelId, groupUuid])\n\n  useAsyncEffect(async () => {\n    if (channelId === undefined) {\n      return\n    }\n\n    await dispatch(fetchFileToken({ channel_id: channelId }))\n  }, [channelId])\n\n  useAsyncEffect(async (isMounted: () => boolean) => {\n    if (statusMatcher(encryptionStatus, [EncryptionStatus.PENDING, EncryptionStatus.DISABLED, EncryptionStatus.ENABLED])) {\n\n      return\n    }\n\n    if (statusMatcher(encryptionStatus, [EncryptionStatus.POLLING])) {\n      const consentStatus: EncryptionStatus = await handleConsentFromCookie(dispatch)\n\n      if (isMounted()) {\n        setEncryptionStatus(consentStatus)\n      }\n\n      return\n    }\n    if (statusMatcher(encryptionStatus, [EncryptionStatus.KEY_MANAGER_INITIALIZED])) {\n      const devicesStatus: EncryptionStatus | null = await checkEncryptionAllowedDevices()\n\n      if (devicesStatus !== null && isMounted()) {\n        setEncryptionStatus(devicesStatus)\n\n        return\n      }\n    }\n\n    setEncryptionStatus(EncryptionStatus.DISABLED)\n  }, [encryptionStatus])\n\n  return {\n    encryptionStatus,\n    type,\n    groupUuid,\n    channelId,\n    setEncryptionStatus,\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/route_with_layout/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/styles.ts",["2158"],"import { makeStyles, Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  channelsWrapper: {\n    height: '100vh',\n    width: '375px',\n    borderRadius: 0.5,\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n    borderRight: `1px solid ${theme.palette.customColors.backgroundGrey}`,\n    position: 'relative',\n  },\n\n  landingPages: {\n    paddingTop: theme.spacing(9),\n  },\n\n  messagesPage: {\n    display: 'flex',\n  },\n\n  fullWidth: {\n    display: 'flex',\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n  },\n\n  messageContentLayout: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n\n  headerWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'relative',\n  },\n\n  actionButtonWrapper: {\n    height: '44px',\n    width: '44px',\n    zIndex: 1101,\n    position: 'absolute',\n    right: '25px',\n    top: '20px',\n  },\n\n  actionButton: {\n    height: '44px',\n    width: '44px',\n    zIndex: 1101,\n    color: theme.palette.customColors.white,\n    backgroundColor: theme.palette.customColors.electricBlue,\n    '&:hover': {\n      backgroundColor: theme.palette.customColors.hoveredElectricBlue,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.customColors.electricBlue,\n      opacity:'0.5',\n      color: theme.palette.customColors.white,\n    },\n    '& .MuiIconButton-label': {\n      height: '20px',\n    },\n  },\n\n  tooltipStyle: {\n    backgroundColor: theme.palette.customColors.lightBlueBackground,\n    zIndex: 9000,\n    fontFamily: 'Averta-Regular',\n    fontSize: '12px',\n    lineHeight: '14px',\n    textAlign: 'center',\n    color: theme.palette.common.black,\n    padding: theme.spacing(1.5, 2),\n    maxWidth: '175px',\n\n    '& span.MuiTooltip-arrow': {\n      color: theme.palette.customColors.lightBlueBackground,\n      height: '1.5em',\n      width: '2em',\n    },\n\n    '&.MuiTooltip-popperArrow span.MuiTooltip-arrow': {\n      marginTop: '-1.2em',\n    },\n  },\n\n  tooltipPopperArrow: {\n    '&[x-placement*=\"bottom\"] span.MuiTooltip-arrow': {\n      marginTop: '-1.2em',\n    },\n  },\n\n  removeButton: {\n    height: '44px',\n    width: '44px',\n    zIndex: 1101,\n    position: 'absolute',\n    right: '25px',\n    top: '20px',\n    color: theme.palette.customColors.midGray,\n    backgroundColor: theme.palette.customColors.brightGray,\n    '&:hover': {\n      backgroundColor: theme.palette.customColors.washedGrey,\n    },\n    '& .MuiIconButton-label': {\n      height: '20px',\n    },\n  },\n\n  doneButton: {\n    width: '240px',\n    position: 'absolute',\n    bottom: '30px',\n    right: '67px',\n  },\n\n  messageComponentWrapper: {\n    paddingTop: theme.spacing(1),\n    paddingRight: theme.spacing(3),\n    paddingBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n    borderRadius: 0.5,\n    borderTop: `1px solid ${theme.palette.customColors.backgroundGrey}`,\n    marginTop: theme.spacing(1),\n  },\n\n  messageInput: {\n    border: 0,\n    fontFamily: 'Averta-Regular',\n    fontSize: '15px',\n    lineHeight: '18px',\n    flexGrow: 1,\n    caretColor: theme.palette.customColors.electricBlue,\n  },\n\n  messageInputPlaceholder: {\n    '&::placeholder': {\n      color: theme.palette.customColors.black,\n    },\n  },\n\n  messageSendIcon: {\n    marginLeft: theme.spacing(1.25),\n    alignSelf: 'flex-end',\n    cursor: 'pointer',\n  },\n\n  messageInputContainer: {\n    borderRadius: '25px',\n    background: theme.palette.customColors.brightGray,\n    display: 'flex',\n    flexDirection: 'row',\n    paddingTop: theme.spacing(0.75),\n    paddingRight: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0),\n    paddingLeft: theme.spacing(2),\n  },\n\n  backToGroupsWrapper: {\n    margin: theme.spacing(2, 1, 1),\n    display: 'flex',\n    flexDirection: 'row',\n    cursor: 'pointer',\n  },\n\n  backToGroupsButton: {\n    marginRight: theme.spacing(1),\n  },\n\n  backToGroupsText: {\n    fontFamily: 'Averta-Semibold',\n    fontSize: '16px',\n    lineHeight: '30px',\n  },\n\n  backToGroupsDivider: {\n    width: '95%',\n    paddingLeft: theme.spacing(2),\n    opacity: 0.1,\n  },\n})\n)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/layout_control/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/end_meeting_control/index.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/components/card/card.styled.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/edit_channel_dialog/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/combined_button/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/disconnect_dialog/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/get_app_dialog/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/popover/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/bottom_drawer/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/styles.ts",["2159"],"import { makeStyles, Theme } from '@material-ui/core'\n\ninterface Props {\n  disabled: boolean\n}\n\nexport const useStyles =\n  makeStyles((theme: Theme) =>\n    ({\n      buttonWrapper: {\n        alignItems: 'center',\n        position: 'relative',\n      },\n      spinner: {\n        width: '40px',\n        height: '40px',\n        position: 'absolute',\n        top: '5%',\n        right: '30%',\n      },\n      iconButton: {\n        height: '50px',\n        width: '50px',\n        margin: 'auto',\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1.6),\n        borderRadius: '25px',\n        background: theme.palette.customColors.electricBlue,\n        opacity: (props: Props) =>\n          !props.disabled ? 1 : 0.3,\n        '&:hover': {\n          cursor: (props: Props) => !props.disabled ? 'pointer' : 'unset',\n        },\n      },\n\n      iconButtonSkeleton: {\n        height: '50px',\n        width: '50px',\n        margin: 'auto',\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1.6),\n        borderRadius: '25px',\n      },\n\n      iconSize: {\n        height: '24px',\n      },\n\n      buttonTitle: {\n        fontFamily: 'Averta-Semibold',\n        maxWidth: '100px',\n        minWidth: '100px',\n        textAlign: 'center',\n        color: theme.palette.customColors.lightGrey,\n        margin: 'auto',\n        '&:hover': {\n          cursor: (props: Props) => !props.disabled ? 'pointer' : 'default',\n        },\n      },\n    })\n  )\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/close_button/styles.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/route_with_layout/route_with_layout.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar.tsx",["2160","2161","2162","2163","2164","2165","2166","2167","2168","2169","2170"],"/* eslint-disable complexity */\nimport React, { useEffect, useState } from 'react'\nimport { useTheme } from '@material-ui/core/styles'\n\nimport { useStyles } from './styles'\nimport { SidebarProfile } from './sidebar_profile'\nimport { SidebarList } from './sidebar_list'\nimport { SideBarOptions } from './sidebar_options'\nimport { DisconnectDialog, GetAppDialog } from '../global/dialogs'\n\nimport globalidLogo from '../../assets/icons/globalid_new_logo.svg'\nimport { Skeleton, SkeletonProvider } from '../global/skeletons'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { useHistory } from 'react-router-dom'\nimport { getAppIcon, messagesIcon, moreIcon, peopleIcon, profileIcon, groupsIcon } from '../global/icons'\nimport { SidebarDrawer } from './sidebar_drawer'\nimport { SideBarSubMenu } from './sidebar_submenu'\nimport { ListOption, OpenState, SidebarListOptions, OnSidebarItemClick, SidebarMenuTab } from './interfaces'\nimport { getString, openInNewTab, pushTo } from '../../utils'\nimport { useLayoutState, LayoutState } from '../layouts/layout_context'\nimport { useIsMobileOrTabletView } from '../global/helpers'\nimport { BASE_GROUPS_URL, BASE_MESSAGES_URL, BASE_CONTACTS_URL } from '../../constants'\nimport { useWindowSize } from '../../hooks/use_window_resize'\nimport { WindowSize } from '../../hooks/interfaces'\nimport { CombinedButton } from '../global/buttons/combined_button'\nimport { MobileViewContent } from '../global/buttons/combined_button/interfaces'\nimport disconnectIconLink from '../../../src/assets/icons/disconnect-icon.svg'\nimport { IdentityResponse } from '@globalid/identity-namespace-service-types'\nimport { getNumberOfUnreadMessages } from '../../utils/counter_helpers'\nimport { GeneralObject } from '../../utils/interfaces'\n\nexport const Sidebar: React.MemoExoticComponent<React.FC> = React.memo(() => {\n  const theme = useTheme()\n  const { darkGrey, almostCometGrey } = theme.palette.customColors\n\n  const isMobileOrTablet: boolean = useIsMobileOrTabletView()\n  const layoutState: LayoutState | undefined = useLayoutState()\n  const identity: PublicIdentity | undefined = useSelector(\n    (root: RootState) => root.identity.identity,\n  )\n\n  const isAppUser: boolean = identity?.signup_type === IdentityResponse.IdentitySignupType.Globalid\n  const isLoggedIn: boolean = layoutState?.isLoggedIn ?? false\n  const isLoading = layoutState?.isLoading ?? true\n\n  const classes = useStyles({ transition: !isLoading })\n\n  const history = useHistory()\n\n  const [openState, setOpenState] = useState<OpenState>({\n    openMoreOptions: false,\n    openSideBar: false,\n    openDisconnectModal: false,\n    openGetAppModal: false,\n    openSubMenu: false,\n    transition: false,\n  })\n\n  const {\n    openMoreOptions,\n    openSideBar,\n    openDisconnectModal,\n    openGetAppModal,\n    openSubMenu,\n  } = openState\n\n  const [currentMenuItem, setCurrentMenuItem] = useState<ListOption>()\n\n  const counters: GeneralObject<number>\n    = useSelector((state: RootState) => state.counters.counters)\n\n  const handleDrawerClose = (): void => {\n    setOpenState({ ...openState, openMoreOptions: false, openSideBar: false })\n  }\n\n  useEffect(() => {\n    setOpenState({\n      ...openState,\n      openSideBar: !isMobileOrTablet,\n    })\n  }, [isMobileOrTablet])\n\n  const handleSubmenuOptionClick = (option: ListOption): void => {\n    if (option.href !== undefined) {\n      if (option.newTab) {\n        openInNewTab(option.href)\n      } else {\n        pushTo(history, option.href)\n        handleSubMenuClose()\n      }\n    }\n  }\n\n  const handleSubMenuBack = (): void => {\n    setCurrentMenuItem(undefined)\n    setOpenState({ ...openState, openSubMenu: false })\n  }\n\n  const handleSubMenuClose = (): void => {\n    setCurrentMenuItem(undefined)\n    setOpenState({ ...openState, openMoreOptions: false, openSideBar: false, openSubMenu: false })\n  }\n\n  const handleOpenState = (value?: string, _menuItem?: ListOption): void => {\n    if (value === 'disconnect') {\n      setOpenState({\n        ...openState,\n        openDisconnectModal: !openDisconnectModal,\n      })\n    }\n    const openSideBarState = isMobileOrTablet ? !openSideBar : true\n\n    if (value === SidebarMenuTab.MESSAGES) {\n      setOpenState({\n        ...openState,\n        openSideBar: openSideBarState,\n        openMoreOptions: false,\n      })\n    }\n  }\n\n  const { height }: WindowSize = useWindowSize()\n\n  const menuList = SideBarOptions({\n    isAppUser,\n    isMobileOrTablet,\n    color: darkGrey,\n    iconColor: almostCometGrey,\n    windowInnerHeight: height ?? window.innerHeight,\n    hasUnreadMessages: getNumberOfUnreadMessages(counters) > 0,\n  })\n\n  const sidebarListOptions: SidebarListOptions = {\n    isLoggedIn,\n    options: menuList,\n    isMobileOrTablet,\n    openState,\n  }\n\n  const sidebarElements = getSidebarElements(identity, sidebarListOptions, isMobileOrTablet, classes, handleDrawerClose, handleOpenState, isLoading)\n\n  const sidebarDrawerProps = { isMobileOrTablet, openSideBar, isLoading, isLoggedIn }\n\n  const subMenuElements = (): JSX.Element => getSubMenuElements(currentMenuItem, openState, handleSubMenuBack, handleSubmenuOptionClick)\n\n  return (\n    <SkeletonProvider loading={isLoading}>\n      <SidebarDrawer {...sidebarDrawerProps}>{sidebarElements}</SidebarDrawer>\n      {isMobileOrTablet && openSubMenu && subMenuElements()}\n      <DisconnectDialog\n        open={openDisconnectModal}\n        handleOpenState={() => handleOpenState('disconnect')}\n      />\n      <GetAppDialog\n        open={openGetAppModal}\n        handleOpenState={() => handleOpenState('getApp')}\n      />\n    </SkeletonProvider>\n  )\n})\n\nconst getSidebarElements = (\n  identity: PublicIdentity | undefined,\n  sidebarListOptions: SidebarListOptions,\n  isMobileOrTablet: boolean,\n  classes: ReturnType<typeof useStyles>,\n  handleDrawerClose: () => void,\n  handleOpenState: (value?: string | undefined) => void,\n  isLoading: boolean,\n): JSX.Element => (<>\n  {!isMobileOrTablet && identity === undefined && (\n    <Skeleton wrapperClassName={classes.globalidLogo} className={classes.skeletonGlobalidLogo}>\n      <img src={globalidLogo}/>\n    </Skeleton>\n  )}\n  <SidebarProfile\n    isLoading={isLoading}\n    user={identity}\n    handleOpenState={handleOpenState}\n    handleDrawerClose={handleDrawerClose}\n  />\n  <SidebarList\n    {...sidebarListOptions}\n    handleOpenState={handleOpenState}\n  />\n\n  {identity && isMobileOrTablet &&\n    <CombinedButton\n      active={sidebarListOptions.openState.openDisconnectModal}\n      handleClick={() => handleOpenState('disconnect')}\n      title='Disconnect'\n      mobileViewContent={MobileViewContent.TEXT}\n      icon={disconnectIconLink}\n      className={classes.disconnectButton}\n    />\n  }\n</>)\n\nconst getSubMenuElements = (\n  menuItem: ListOption | undefined,\n  openState: OpenState,\n  onBack: () => void,\n  onClick: OnSidebarItemClick,\n): JSX.Element => <SideBarSubMenu menuItem={menuItem} openState={openState} onBack={onBack} onClick={onClick}/>\n\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/layout_control/layout_control.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/main_layout.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/end_meeting_control/end_meeting_control.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/styled_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/icon_button/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/messages.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/no_chats.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/messages_mobile.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/e2e_ecryption.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/continue_to_app.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/skeleton_page.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/wallet.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/go_to_groups.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/layout_control/layout_control.styled.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/layout_context.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_window_resize.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_submenu.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_drawer.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_options.tsx",["2171"],"import {\n  messagesIcon,\n  ellipsisIcon,\n  LogoutIcon,\n} from '../global'\nimport { Params, ListOption } from './interfaces'\nimport {\n  BASE_MESSAGES_URL,\n} from '../../constants'\nimport { getString } from '../../utils'\n\nexport const SideBarOptions = (params: Params): ListOption[] => {\n  const { isMobileOrTablet, isAppUser, iconColor, windowInnerHeight, hasUnreadMessages } = params\n\n  const listHiddenItems: ListOption[] = [\n    {\n      key: 'messages',\n      text: getString('sidebar-option-messages'),\n      name: 'messages',\n      href: BASE_MESSAGES_URL,\n      locked: true,\n      icon: () => messagesIcon({ color: iconColor }),\n      canBeActive: true,\n      notificationMark: hasUnreadMessages,\n    },\n  ]\n\n  const quickMenuOption: ListOption = {\n    key: 'quickMenuOption',\n    text: '',\n    name: 'quickMenuOption',\n    href: undefined,\n    locked: true,\n    icon: () => ellipsisIcon({ color: iconColor }),\n    canBeActive: false,\n    subOptions: listHiddenItems,\n  }\n\n  const desktopOptions: ListOption[] = [\n    {\n      key: 'disconnect',\n      text: '',\n      name: 'disconnect',\n      href: undefined,\n      locked: true,\n      icon: () => LogoutIcon({ color: iconColor }),\n      bottomOption: true,\n    },\n  ]\n\n  const options: ListOption[] = desktopOptions\n\n  const filteredItems: ListOption[] = isAppUser ? filterItemsForAppUser(options) : options\n\n  if (isMobileOrTablet){\n    return filteredItems\n  }\n\n  const sidebarItemSizeWithPaddings: number = 68\n\n  const notHiddenItemsHeight: number = ((filteredItems.length + 1) * sidebarItemSizeWithPaddings) + sidebarItemSizeWithPaddings\n\n  const countOfItemsCanBeDisplayed: number = Math.floor((windowInnerHeight - notHiddenItemsHeight) / sidebarItemSizeWithPaddings)\n\n  const displayedItems: ListOption[] = listHiddenItems.slice(0, countOfItemsCanBeDisplayed)\n\n  const subOptions: ListOption[] | undefined = quickMenuOption?.subOptions?.slice(countOfItemsCanBeDisplayed, listHiddenItems.length)\n\n  if (countOfItemsCanBeDisplayed < listHiddenItems.length) {\n    return [...displayedItems, ...filteredItems, {...quickMenuOption, subOptions}]\n  }\n\n  return [...filteredItems, ...listHiddenItems]\n}\n\nconst filterItemsForAppUser = (\n  options: ListOption[]\n): ListOption[] => options.filter((listItem: ListOption) => listItem.key !== 'getApp')\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/styles.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_navigation_listener.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/layouts/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/meetings/containers/end_meeting_control/end_meeting_control.styled.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/styled_dialog/styled_dialog.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/styles.ts",["2172"],"import { makeStyles, Theme, createStyles } from '@material-ui/core'\n\nexport const useStyles =\n  makeStyles((theme: Theme) =>\n    createStyles({\n      contentWrapper:{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: theme.spacing(6.5),\n        position: 'relative',\n      },\n\n      backgroundPic:{\n        height: 353,\n        width: 369,\n        [theme.breakpoints.between('sm','md')]:{\n          height: 250,\n          width: 250,\n        },\n        [theme.breakpoints.down('sm')]:{\n          height: 200,\n          width: 200,\n        },\n      },\n\n      backgroundPicExtra:{\n        height: 353,\n        width: 369,\n        [theme.breakpoints.down('md')]:{\n          height: 180,\n          width: 180,\n        },\n      },\n\n      downloadArea:{\n        marginTop: theme.spacing(6),\n        textAlign: 'center',\n      },\n\n      scanIcon:{\n        [theme.breakpoints.down('md')]:{\n          height: 180,\n          width: 180,\n        },\n      },\n\n      storeIcons: {\n        marginTop: theme.spacing(3),\n      },\n\n      upperMargin:{\n        marginTop: theme.spacing(6),\n      },\n\n      comingSoon: {\n        maxWidth:'288px',\n        marginTop: theme.spacing(6.6),\n        fontFamily: 'Averta-Bold',\n        fontSize: '20px',\n        lineHeight: '23px',\n        textAlign: 'center',\n        wordBreak: 'break-word',\n      },\n\n      description: {\n        maxWidth: '400px',\n        marginTop: theme.spacing(3),\n        color: theme.palette.customColors.midGray,\n        fontFamily: 'Averta-Regular',\n        fontSize: '15px',\n        lineHeight: '18px',\n        textAlign: 'center',\n        [theme.breakpoints.down('xs')]:{\n          paddingRight: theme.spacing(4),\n          paddingLeft: theme.spacing(4),\n        },\n      },\n\n      walletDescriptionBottomPadding: {\n        paddingBottom: theme.spacing(6),\n      },\n\n      flexColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n      },\n\n      groupsDemoLink: {\n        fontSize: '18px',\n        color: theme.palette.customColors.electricBlue,\n        textDecoration: 'none',\n        lineHeight: '40px',\n        fontFamily: 'Averta-Bold',\n      },\n\n      encryptionResend: {\n        fontSize: '14px',\n        color: theme.palette.customColors.electricBlue,\n        textDecoration: 'none',\n        '&:hover': {\n          cursor: 'pointer',\n        },\n      },\n\n      buttonText: {\n        fontSize: '16px',\n      },\n\n      buttonWidth: {\n        '&.MuiButton-root': {\n          width: '180px',\n        },\n      },\n\n      enableEncryptionButtonWidth: {\n        width: '240px',\n      },\n\n      enableEncryptionButtonUpperMargin: {\n        marginTop: theme.spacing(3),\n      },\n\n      appsLinksContainer: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(5),\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '123px',\n      },\n\n      googlePlayButton: {\n        paddingTop: theme.spacing(0.5),\n      },\n\n      centerLoader: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n      },\n\n      chatContainer: {\n        display: 'flex',\n        flexGrow: 1,\n        flexDirection: 'column',\n        height: '100vh',\n        width: 'min-content',\n      },\n\n      paddingTopGroupChat: {\n        paddingTop: theme.spacing(16),\n      },\n\n      paddingTopGoToGroups: {\n        paddingTop: theme.spacing(17),\n      },\n    })\n  )\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/header/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/page_content_header/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/route_with_layout/interfaces.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/styled_dialog/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list.tsx",["2173"],"import { Location } from 'history'\nimport React, { useEffect, useState } from 'react'\nimport { List } from '@material-ui/core'\nimport { SidebarListItem } from './sidebar_list_item'\nimport { useStyles } from './style'\nimport { SidebarListProps } from './interfaces'\nimport { ListOption } from '../interfaces'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { openInNewTab, pushTo } from '../../../utils'\nimport { QuickMenu } from '../../global/quick_menu'\nimport { QuickMenuItemProps } from '../../global/quick_menu/interfaces'\nimport clsx from 'clsx'\n\nexport const SidebarList: React.FC<SidebarListProps> = ({\n  options,\n  openState,\n  isMobileOrTablet,\n  handleOpenState,\n  isLoggedIn,\n}: SidebarListProps) => {\n  const { listItem, activeItem, getAppActive, list, bottomOptionsWrapper, quickMenu } = useStyles()\n\n  const { openMoreOptions, openSideBar, openGetAppModal } = openState\n  const [anchorEl, setAnchorEl] = useState<HTMLDivElement | null>(null)\n  const [selectedOption, setSelectedOption] = useState<ListOption | null>(null)\n\n  const history = useHistory()\n  const location: Location = useLocation()\n\n  const handleDesktopOnClick = (name: string, isSubmenu: boolean, option?: ListOption, value?: ListOption): void => {\n    if (isSubmenu) {\n      handleOpenState(name)\n    } else {\n      handleOpenState(name, value)\n    }\n\n    if (option?.href !== undefined) {\n      if (option?.newTab) {\n        openInNewTab(option.href)\n      } else if (!window.location.href.includes(option.href)) {\n        pushTo(history, option.href)\n      }\n    }\n  }\n\n  const highlightMenuListItemFromLocation = (): void => {\n    options.filter((option: ListOption) => (option.href && option.canBeActive)).every((option: ListOption) => !location.pathname.includes(option.href as string))\n  }\n\n  useEffect(() => {\n    highlightMenuListItemFromLocation()\n  }, [location])\n\n  const getMenuStyle = (name: string, href?: string, canBeActive?: boolean): string => {\n    if (name === 'getApp' && openGetAppModal) {\n      return openGetAppModal && name === 'getApp' ? getAppActive : ''\n    }\n\n    return (canBeActive && href && location.pathname.includes(href)) ? activeItem : ''\n  }\n\n  const createDesktopSidebar = (option: ListOption, index: number): JSX.Element => (\n    <div\n      key={option.key}\n    >\n      <SidebarListItem\n        option={option}\n        openSideBar={openSideBar}\n        inset={false}\n        className={clsx(listItem, getMenuStyle(option.name, option.href, option.canBeActive))}\n        tabIndex={index}\n        onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n          setAnchorEl(e.currentTarget)\n          setSelectedOption(option)\n          handleDesktopOnClick(option.name, false, option)\n        }}\n      />\n    </div>\n  )\n\n  const createMobileSidebar = (option: ListOption, index: number): JSX.Element => {\n    const menuState: string = option.subOptions && option.subOptions.length > 0 ? 'subMenu' : option.name\n    const menuValue: ListOption | undefined = option.subOptions && option.subOptions.length > 0 ? option : undefined\n\n    return (\n      <div key={option.key}>\n        <SidebarListItem\n          option={option}\n          openSideBar={openSideBar}\n          inset={false}\n          className={clsx(listItem, getMenuStyle(option.name, option.href))}\n          tabIndex={index}\n          onClick={() => handleDesktopOnClick(menuState, false, option, menuValue)}\n        />\n      </div>\n    )\n  }\n\n  const createSidebar = (option: ListOption, index: number): JSX.Element => {\n    if (isMobileOrTablet) {\n      return createMobileSidebar(option, index)\n    }\n\n    return createDesktopSidebar(option, index)\n  }\n\n  const topOptions: ListOption[] = options.filter((option: ListOption) =>\n    !option.bottomOption\n  )\n\n  const bottomOptions: ListOption[] = options.filter((option: ListOption) => option.bottomOption)\n\n  const quickMenuItems: QuickMenuItemProps[] | undefined = selectedOption?.subOptions?.map((item: ListOption) => ({\n    id: item.name,\n    text: item.text,\n    icon: item.icon ? item.icon() : undefined,\n    onClick: () => {\n      handleDesktopOnClick(item.name, true, item)\n      handleDesktopOnClick(selectedOption?.name, true, selectedOption)\n    },\n    disabled: false,\n  }))\n\n  const createSideBarCallback = (option: ListOption, index: number): JSX.Element | null => {\n    if (option.locked && !isLoggedIn) {\n      return null\n    }\n\n    return createSidebar(option, index)\n  }\n\n  const renderQuickMenu = (): JSX.Element | null => {\n    if (anchorEl && selectedOption && openMoreOptions && quickMenuItems && quickMenuItems.length > 0) {\n      return <QuickMenu\n        compact={false}\n        title=''\n        items={quickMenuItems}\n        open={openMoreOptions}\n        anchorEl={anchorEl}\n        onClose={() => {\n          handleDesktopOnClick(selectedOption?.name, true, selectedOption)\n        }}\n        className={quickMenu}\n      />\n    }\n\n    return null\n  }\n\n  return (\n    <List className={list}>\n      {topOptions.map(createSideBarCallback)}\n\n      <div className={bottomOptionsWrapper}>\n        {bottomOptions.map(createSideBarCallback)}\n      </div>\n\n      {renderQuickMenu()}\n    </List>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/sidebar_profile.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/header/header.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/page_content_header/page_content_header.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/header/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/app_store_buttons/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/qr_utils.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/sidebar_list_item.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_profile/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/links/app_store_links.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/sidebar_list_item_content.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/page_content_header/styles.ts",["2174"],"import { makeStyles, createStyles, Theme } from '@material-ui/core'\n\ninterface Props {\n  border: boolean\n}\n\nexport const useStyles =\n  makeStyles((theme: Theme) => createStyles({\n    titleHeader: {\n      height: '76px',\n      fontFamily: 'Averta-Semibold',\n      fontSize: '22px',\n      letterSpacing: '0.523308px',\n      [theme.breakpoints.down('xs')]: {\n        paddingTop: theme.spacing(1.5),\n      },\n      paddingTop: theme.spacing(1),\n      background: theme.palette.customColors.white,\n      position: 'relative',\n      boxShadow: (props: Props) => props.border ? `0px 0px 10px ${theme.palette.customColors.shadowGrey}` : 'none',\n    },\n\n    titleLogo: {\n      marginRight: theme.spacing(3),\n    },\n  })\n  )\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/app_store_buttons/app_store_buttons.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/general_avatar/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/links/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/link_wrapper.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/sidebar/sidebar_list/sidebar_list_item/style.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/buttons/app_store_buttons/constants.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/general_avatar/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/general_avatar/general_avatar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messages_content.tsx",["2175","2176","2177"],"import React, { useEffect } from 'react'\nimport { MessagesContentProps, MessagesType, EncryptionStatus } from './interfaces'\nimport { Messages, GoToGroups, SkeletonPage, E2eEncryption, NoChats } from '../landing_pages'\nimport { useStyles } from './styles'\nimport { ChatContainer } from './messenger_chat/chat_container'\nimport { useSelector } from 'react-redux'\nimport { getChannelArray } from '../../store/channels_slice/helpers'\nimport { RootState } from 'RootType'\nimport { useHistory } from 'react-router-dom'\nimport { ChannelWithMembers, ChannelsType, GroupDataByFolderType, ChannelType } from '../../store/interfaces'\nimport { GroupsChat } from '../landing_pages/groups_chat'\nimport { useHandleChannelLoading } from '../../hooks/use_handle_channel_loading_hook'\nimport { History } from 'history'\nimport { BASE_MESSAGES_URL } from '../../constants'\nimport clsx from 'clsx'\n\nconst getMessagingLandingPage = (\n  messagesType: MessagesType,\n  channelsIds?: string[]\n): JSX.Element => !channelsIds ? <SkeletonPage/> :\n  channelsIds.length > 0\n    ? <Messages type={messagesType}/>\n    : messagesType === MessagesType.GROUPS ? <GoToGroups/> : <NoChats/>\n\nconst getGroupsContainerOrLandingPage = (\n  encryptionStatus: EncryptionStatus,\n  setEncryptionStatus: (status: EncryptionStatus) => void,\n  messagesType: MessagesType,\n  groupIds?: string[],\n  channelId?: string,\n  groupUuid?: string,\n  groupChannelId?: string\n): JSX.Element => encryptionStatus === EncryptionStatus.ENABLED ?\n  !groupIds ? <SkeletonPage/> :\n    groupIds.length > 0\n      ? channelId !== undefined\n        ? <ChatContainer messagesType={messagesType} channelId={channelId}/>\n        : <GroupsChat groupUuid={groupUuid} channelId={groupChannelId}/>\n      : <GoToGroups/>\n  : <E2eEncryption encryptionStatus={encryptionStatus} setEncryptionStatus={setEncryptionStatus}/>\n\nconst getMessageContainerOrLandingPage = (\n  messagesType: MessagesType,\n  channelsIds?: string[],\n  channelId?: string,\n): JSX.Element => channelId !== undefined\n  ? <ChatContainer messagesType={messagesType} channelId={channelId}/>\n  : getMessagingLandingPage(messagesType, channelsIds)\n\nconst getMessageContainerOrEncryptionPage = (\n  encryptionStatus: EncryptionStatus,\n  setEncryptionStatus: (status: EncryptionStatus) => void,\n  messagesType: MessagesType,\n  channelsIds?: string[],\n  channelId?: string,\n): JSX.Element =>\n  encryptionStatus === EncryptionStatus.ENABLED\n    ? getMessageContainerOrLandingPage(messagesType, channelsIds, channelId)\n    : <E2eEncryption encryptionStatus={encryptionStatus} setEncryptionStatus={setEncryptionStatus}/>\n\nconst getMessageContainer = (\n  type: string,\n  encryptionStatus: EncryptionStatus,\n  setEncryptionStatus: (status: EncryptionStatus) => void,\n  channelsIds?: string[],\n  groupIds?: string[],\n  channelId?: string,\n  groupUuid?: string,\n  groupChannelId?: string\n): JSX.Element => {\n  switch (type) {\n  case MessagesType.GROUPS:\n    return getGroupsContainerOrLandingPage(\n      encryptionStatus,\n      setEncryptionStatus,\n      MessagesType.GROUPS,\n      groupIds,\n      channelId,\n      groupUuid,\n      groupChannelId,\n    )\n  case MessagesType.OTHER:\n    return getMessageContainerOrEncryptionPage(\n      encryptionStatus,\n      setEncryptionStatus,\n      MessagesType.OTHER,\n      channelsIds,\n      channelId,\n    )\n  case MessagesType.PRIMARY:\n    return getMessageContainerOrEncryptionPage(\n      encryptionStatus,\n      setEncryptionStatus,\n      MessagesType.PRIMARY,\n      channelsIds,\n      channelId,\n    )\n  default:\n    return <GoToGroups/>\n  }\n}\n\nexport const MessagesContent: React.FC<MessagesContentProps> = (props: MessagesContentProps) => {\n  const classes = useStyles()\n  const { channelId, groupUuid, type, encryptionStatus, setEncryptionStatus } = props\n\n  const history: History = useHistory()\n\n  const fetchTimeoutRunning: boolean = useHandleChannelLoading({ channelId, groupUuid })\n\n  const channels: ChannelsType = useSelector((root: RootState) => root.channels.channels)\n  const isListLoading: boolean = useSelector((root: RootState) => root.channels.isFetchingAll)\n\n  const channelIds: string[] | undefined = isListLoading ? undefined : getChannelArray(channels)\n    .filter((channel: ChannelWithMembers) => !channel.channel.deleted)\n    .map((channel: ChannelWithMembers) => channel.channel.id)\n\n  const groups: GroupDataByFolderType = useSelector((root: RootState) => root.groups.messaging)\n  const isGroupsLoading: boolean = useSelector((root: RootState) => root.groups.isFetching.messaging) ?? false\n\n  const groupIds: string[] | undefined = isGroupsLoading ? undefined : groups.groupUuids\n\n  const isChannelIncluded: boolean = (channelId !== undefined && channelIds?.includes(channelId)) ?? false\n\n  const groupChannelId: string | undefined = isListLoading ? undefined : getChannelArray(channels)\n    .find((groupChannel: ChannelWithMembers) =>\n      groupChannel.channel.type === ChannelType.GROUP && groupChannel.channel.group_uuid === groupUuid)?.channel.id\n\n  const isLoadingGroupChannelList: boolean | undefined = useSelector((root: RootState) =>\n    groupUuid !== undefined ? root.channels.isFetching[groupUuid] : undefined)\n\n  useEffect(() => {\n    if (groupUuid && !groupChannelId && isLoadingGroupChannelList === false && !fetchTimeoutRunning) {\n      history.push(`${BASE_MESSAGES_URL}/${MessagesType.GROUPS}`)\n    }\n  }, [groupChannelId, isLoadingGroupChannelList])\n\n  useEffect(() => {\n    if (!isListLoading && channelIds !== undefined && !isChannelIncluded && !fetchTimeoutRunning && !groupUuid) {\n      history.push(`${BASE_MESSAGES_URL}/${type}`)\n    }\n  }, [isListLoading, isChannelIncluded, fetchTimeoutRunning])\n\n  return (\n    <div\n      data-testid={'messages_content'}\n      className={clsx([classes.fullWidth, 'messages-content'])}\n    >\n      {getMessageContainer(type, encryptionStatus, setEncryptionStatus, channelIds, groupIds, channelId, groupUuid, groupChannelId)}\n    </div>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_wrapper.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channels_list.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_handle_channel_loading_hook.ts",["2178","2179","2180","2181"],"import { useEffect, useCallback } from 'react'\nimport { ChannelWithParticipantsAndParsedMessage, AsyncThunkReturnAction, FetchChannelProps } from '../store/interfaces'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { fetchChannel } from '../store/channels_slice/channels_slice'\nimport { useHistory, useRouteMatch, match as Match } from 'react-router-dom'\nimport { Folder } from '@globalid/messaging-service-sdk'\nimport { goToChannel, getRouteFolderType } from '../utils/channel_helpers'\nimport { History } from 'history'\nimport { ThunkDispatch } from '../store'\nimport { FETCH_CHANNEL_TIMEOUT, BASE_MESSAGES_URL } from '../constants'\nimport { HandleChannelLoadingParams } from './interfaces'\nimport { debounce } from '@material-ui/core'\nimport { useBooleanState } from './use_boolean_state'\nimport { pushTo } from '../utils'\n\n// eslint-disable-next-line max-lines-per-function\nexport const useHandleChannelLoading = ({ channelId, groupUuid }: HandleChannelLoadingParams): boolean => {\n\n  const storeChannel: ChannelWithParticipantsAndParsedMessage | undefined = useSelector(\n    (state: RootState) => channelId ? state.channels.channels[channelId]?.channel : undefined\n  )\n\n  const history: History = useHistory()\n\n  const dispatch: ThunkDispatch = useDispatch()\n\n  const match: Match = useRouteMatch()\n\n  const folders: Folder[] = useSelector((state: RootState) => state.channels.folders)\n\n  const [isDebounced, setIsDebounced, setClearedDebounce] = useBooleanState(false)\n\n  const debounceFetch = useCallback(debounce(async (channelToFetch: string): Promise<void> => {\n    const action: AsyncThunkReturnAction<ChannelWithParticipantsAndParsedMessage, FetchChannelProps> = (\n      await dispatch(fetchChannel({ channelId: channelToFetch }))\n    )\n\n    if (action.type === fetchChannel.fulfilled.type && action.payload) {\n      const channel: ChannelWithParticipantsAndParsedMessage = <ChannelWithParticipantsAndParsedMessage> action.payload\n\n      goToChannel(\n        history,\n        channelToFetch,\n        getRouteFolderType(folders, channel.folder_id, groupUuid),\n        { currentPath: match.path, groupUuid }\n      )\n    } else {\n      const redirectTo: string = groupUuid !== undefined\n        ? `${BASE_MESSAGES_URL}/g/${groupUuid}`\n        : history.location.pathname.replace(channelId ?? '', '')\n\n      pushTo(history, redirectTo)\n    }\n  }, FETCH_CHANNEL_TIMEOUT), [folders.length])\n\n  useEffect(() => {\n    if (storeChannel !== undefined && !isDebounced) {\n      goToChannel(\n        history,\n        storeChannel.id,\n        getRouteFolderType(folders, storeChannel.folder_id, groupUuid),\n        { currentPath: match.path, groupUuid }\n      )\n    }\n  }, [storeChannel])\n\n  useEffect(() => {\n    if (storeChannel?.id === undefined && channelId !== undefined && (groupUuid !== undefined || folders.length > 0)) {\n      // eslint-disable-next-line no-void\n      void debounceFetch(channelId)\n      setIsDebounced()\n    } else {\n      debounceFetch.clear()\n      setClearedDebounce()\n\n      if (storeChannel !== undefined) {\n        goToChannel(\n          history,\n          storeChannel.id,\n          getRouteFolderType(folders, storeChannel.folder_id, groupUuid),\n          { currentPath: match.path, groupUuid }\n        )\n      }\n    }\n  }, [storeChannel?.id, channelId, folders])\n\n  useEffect(() => () => {\n    debounceFetch.clear()\n    setClearedDebounce()\n  }, [])\n\n  return isDebounced\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_create.tsx",["2182"],"import React, { useState, useEffect } from 'react'\nimport { GidUUID, Participant } from '../../store/interfaces'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { CONVERSATION_PARTICIPANTS_LIMIT } from '../../constants'\nimport { getParticipantsByGidUUIDs } from '../../store/participants_selectors'\nimport { fetchIdentityByGidUUID } from '../../store/identities_slice'\nimport { ParticipantsHeader } from '../participants_header'\nimport { IconButton } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { getString } from '../../utils'\nimport { ButtonState, PrimaryButton } from 'globalid-react-ui'\nimport { IdentitiesSearch } from '../identities_search'\nimport { ParticipantsBar } from '../participants_bar'\nimport { useStyles } from './styles'\nimport { ChannelCreateProps } from './interfaces'\nimport { createConversation } from '../../utils/channel_helpers'\nimport { useHistory } from 'react-router-dom'\nimport { Folder } from '@globalid/messaging-service-sdk'\n\nexport const ChannelCreate: React.FC<ChannelCreateProps> = ({\n  onCreate,\n}: ChannelCreateProps) => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const [selectedIdentities, setSelectedIdentities] = useState<GidUUID[]>([])\n  const [buttonState, setButtonState] = useState<ButtonState>(ButtonState.DISABLED)\n\n  const canAddToChat: boolean = selectedIdentities.length < CONVERSATION_PARTICIPANTS_LIMIT\n\n  const participants: (Participant | undefined)[] = useSelector((state: RootState) => (\n    getParticipantsByGidUUIDs(state, selectedIdentities)\n  ))\n\n  const loggedInIdentityUuid: GidUUID | undefined =\n    useSelector((root: RootState) => root.identity.identity?.gid_uuid)\n\n  const folders: Folder[] = useSelector((state: RootState) => state.channels.folders)\n\n  const clearSelection = (): void => {\n    onCreate()\n    setSelectedIdentities([])\n  }\n\n  useEffect(() => {\n    if (buttonState !== ButtonState.INPROGRESS) {\n      if (selectedIdentities.length > 0) {\n        setButtonState(ButtonState.DEFAULT)\n      } else {\n        setButtonState(ButtonState.DISABLED)\n      }\n    }\n  }, [selectedIdentities.length])\n\n  const handleCreateConversation = async (): Promise<void> => {\n    setButtonState(ButtonState.INPROGRESS)\n    try {\n      if (loggedInIdentityUuid !== undefined){\n        await createConversation(\n          selectedIdentities,\n          loggedInIdentityUuid,\n          folders,\n          dispatch,\n          history,\n          { actionBeforeRedirect: clearSelection }\n        )\n      }\n    }\n    finally {\n      setButtonState(ButtonState.DEFAULT)\n    }\n  }\n\n  const removeIdentityFromSelection = (gidUuid: GidUUID): void => {\n    const result: GidUUID[] = selectedIdentities.filter((uuid: GidUUID) => uuid !== gidUuid)\n\n    setSelectedIdentities(result)\n  }\n\n  const addIdentityToSelection = (gidUuid: GidUUID): void => {\n    dispatch(fetchIdentityByGidUUID(gidUuid))\n    setSelectedIdentities([gidUuid, ...selectedIdentities])\n  }\n\n  const handleOnSelect = (gidUuid: GidUUID, selected: boolean): void => {\n    if (selected && canAddToChat) {\n      addIdentityToSelection(gidUuid)\n    } else {\n      removeIdentityFromSelection(gidUuid)\n    }\n  }\n\n  const renderHeader = (): JSX.Element => (\n    <>\n      <ParticipantsHeader participantsCount={selectedIdentities.length}/>\n      <IconButton aria-label='clear-participants' className={classes.removeButton} onClick={clearSelection}>\n        <CloseIcon/>\n      </IconButton>\n    </>\n  )\n\n  const renderContent = (): JSX.Element => (\n    <>\n      <IdentitiesSearch onSelect={handleOnSelect} selectedIdentities={selectedIdentities} showSelection={true} excludeMe enableSearchFieldAutoFocus>\n        <ParticipantsBar participants={participants} removeFromParticipants={removeIdentityFromSelection}/>\n      </IdentitiesSearch>\n      <PrimaryButton buttonState={buttonState} className={classes.doneButton} onClick={handleCreateConversation}>\n        <span>{getString('done')}</span>\n      </PrimaryButton>\n    </>\n  )\n\n  return (<>\n    {renderHeader()}\n    {renderContent()}\n  </>)\n\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_folders.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/landing_pages/groups_chat.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_container.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_boolean_state.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/use_get_channels_hook.tsx",["2183"],"import { Folder } from '@globalid/messaging-service-sdk'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { fetchChannels } from '../../../store/channels_slice/channels_slice'\nimport { getChannelArray } from '../../../store/channels_slice/helpers'\nimport { GetChannelsHook, FetchChannelsParams, GetChannelsHookProps } from './interfaces'\nimport { actionByFolder, sortChannelsByDate } from './helpers'\nimport _ from 'lodash'\nimport { ChannelFoldersType, MessagesType, PaginationMetaParams } from '../interfaces'\nimport { CHANNELS_PER_PAGE } from '../../../constants'\n\nimport {\n  ChannelsType,\n  ChannelWithParticipantsAndParsedMessage,\n  ChannelType,\n  ChannelWithMembers,\n} from '../../../store/interfaces'\nimport useAsyncEffect from 'use-async-effect'\n\nconst folderTypesParamMap = new Map<MessagesType,ChannelFoldersType | undefined>([\n  [MessagesType.PRIMARY, ChannelFoldersType.GENERAL],\n  [MessagesType.OTHER, ChannelFoldersType.UNKNOWN],\n  [MessagesType.GROUPS, undefined],\n]\n)\n\nexport const useGetChannelsHook = ({\n  folderType,\n  folders,\n  groupUuid,\n}: GetChannelsHookProps): GetChannelsHook => {\n  const channels: ChannelsType = useSelector((root: RootState) => root.channels.channels)\n  const getFolder = (): Folder => folders.filter((folderItem: Folder) => folderItem.type === folderTypesParamMap.get(folderType))[0]\n  const folder: Folder | undefined = getFolder()\n  const channelStoreKey: string = groupUuid !== undefined ? groupUuid : folder?.id !== undefined ? folder?.id : ChannelType.GROUP\n\n  const isListLoadingAll = useSelector((root: RootState) => root.channels.isFetching)\n  const isListLoading: boolean = isListLoadingAll[channelStoreKey ?? ''] ?? false\n\n  const total: number = useSelector((root: RootState) => root.channels.meta[channelStoreKey]?.total ?? 0)\n  const page: number = useSelector((root: RootState) => root.channels.meta[channelStoreKey]?.page ?? 0)\n\n  const dispatch = useDispatch()\n\n  const channelArray: ChannelWithParticipantsAndParsedMessage[] = getChannelArray(channels).map((channel: ChannelWithMembers) => channel.channel)\n\n  const sortedArrayOfChannels: ChannelWithParticipantsAndParsedMessage[] = channelArray.sort(sortChannelsByDate)\n  const initialMeta: PaginationMetaParams = {\n    total,\n    per_page: CHANNELS_PER_PAGE,\n    page: page,\n  }\n\n  const channelFilter: string | undefined = groupUuid ?? folder?.id\n\n  const [channelsIds, meta] = actionByFolder(folderType)(sortedArrayOfChannels, { ...initialMeta }, channelFilter)\n\n  const channelsIdList = _.isEmpty(channelsIds) && isListLoading ? undefined : channelsIds\n\n  const hasNextPage: boolean = channelsIdList === undefined ? false : !meta.isLastPage\n\n  const loadNextPage = async (currentPage: number): Promise<void> => {\n    const params: FetchChannelsParams = getChannelsQueryParams(folder, folderType)\n    const nextPage: number = currentPage + 1\n\n    updateChannels(dispatch, nextPage, params, groupUuid)\n  }\n\n  const handleLoadNextPage = async (): Promise<void> => {\n    if (isListLoading || _.isEmpty(channelsIdList)) {\n      return\n    }\n    await loadNextPage(page)\n  }\n\n  useAsyncEffect(async () => {\n    if (meta.filteredOneOrMorePage) {\n      await handleLoadNextPage()\n    }\n  }, [channelArray.length])\n\n  useEffect(() => {\n    if (page !== undefined && page >= 1) {\n      return\n    }\n    const params: FetchChannelsParams = getChannelsQueryParams(folder, folderType)\n\n    updateChannels(dispatch, 1, params, groupUuid)\n  }, [folderType])\n\n  return {\n    channelsIds: channelsIdList,\n    loadNextPage: handleLoadNextPage,\n    hasNextPage,\n    areChannelsLoading: isListLoading,\n  }\n}\n\nconst updateChannels = (dispatch: Dispatch<any>, page: number, params: FetchChannelsParams, groupUuid?: string): void => {\n  dispatch(fetchChannels({\n    ...params,\n    page,\n    per_page: CHANNELS_PER_PAGE,\n    groupUuid,\n  }))\n}\n\nconst getChannelsQueryParams = (folder: Folder | undefined, folderType: MessagesType): FetchChannelsParams => {\n  if (folderType === MessagesType.GROUPS) {\n    return {\n      channelTypes: [ChannelType.GROUP, ChannelType.MULTI, ChannelType.PERSONAL],\n    }\n  }\n\n  return {\n    device_id: undefined,\n    folder_id: folder?.id,\n    channelTypes: [ChannelType.PERSONAL, ChannelType.MULTI],\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channels_list_item.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/styles.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/store/participants_selectors.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/use_chat_container.tsx",["2184"],"import { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { MessagesType, UseChatContainerResponse } from '../interfaces'\nimport { ChannelWithParticipantsAndParsedMessage, GroupMemberWithIdentityFields } from '../../../store/interfaces'\nimport { ChannelPermission } from './interfaces'\nimport { ChannelPermission as ChannelPermissionSdk} from '@globalid/messaging-service-sdk'\nimport useAsyncEffect from 'use-async-effect'\nimport { fetchGroupMember } from '../../../store/groups_slice'\nimport { ThunkDispatch } from '../../../store'\nimport { Member } from '@globalid/group-service-sdk'\n\nexport const useChatContainer = (type: MessagesType, channel_id: string): UseChatContainerResponse => {\n\n  const dispatch: ThunkDispatch = useDispatch()\n\n  const identity: PublicIdentity | undefined = useSelector((state: RootState) => (\n    state.identity.identity\n  ))\n\n  const channel: ChannelWithParticipantsAndParsedMessage | undefined =\n    useSelector((state: RootState) => state.channels.channels[channel_id]?.channel)\n\n  const groupUuid: string | null | undefined = channel?.group_uuid\n\n  useAsyncEffect(async () => {\n    if (groupUuid && identity?.gid_uuid){\n      await dispatch(fetchGroupMember({group_uuid: groupUuid, gid_uuid: identity?.gid_uuid}))\n    }\n  }, [groupUuid, identity?.gid_uuid])\n\n  const members: GroupMemberWithIdentityFields[] | undefined=\n    useSelector((state: RootState) => state.groups.members[groupUuid ?? '']?.members)\n\n  const groupMember: GroupMemberWithIdentityFields | undefined = members?.find((member: GroupMemberWithIdentityFields) => member.gid_uuid === identity?.gid_uuid)\n\n  const showOwner: boolean | undefined = useSelector((state: RootState) => groupUuid\n    ? state.groups.groups[groupUuid]?.show_owner_name\n    : undefined\n  )\n\n  const readOnly: boolean =\n    channel?.permissions?.some((permission: ChannelPermissionSdk) =>\n      permission.name === ChannelPermission.READONLY && permission.value) ?? false\n\n  const hiddenMembers: boolean = useSelector((state: RootState) => (\n    groupUuid ?\n      state.groups.groups[groupUuid]?.member_visibility === Member.MemberVisibility.hidden &&\n      state.groups.groups[groupUuid]?.owner_uuid !== identity?.gid_uuid\n      : false\n  ))\n\n  if (identity === undefined) {\n    return null\n  }\n\n  return {\n    identity,\n    showOwner,\n    readOnly: readOnly,\n    isHiddenMember: groupMember ? groupMember.is_hidden : false,\n    hiddenMembers,\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_messages.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/message_input.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/helpers.ts",["2185","2186","2187","2188","2189","2190"],"import { PaginationMeta, MessagesType, PaginationMetaParams } from '../interfaces'\nimport { sortByDateDesc } from '../../../utils'\nimport { MESSAGE_BOT_IDENTITY_UUID } from '../../../constants'\nimport { ChannelWithParticipantsAndParsedMessage, ChannelType } from '../../../store/interfaces'\n\nconst placeholderAction: FilterChannelsType = () => [\n  [],\n  {\n    per_page: 0,\n    page: 1,\n    total: 0,\n    filteredOneOrMorePage: false,\n    isLastPage: true,\n  },\n]\n\nexport type FilterChannelsType = (\n  channels: ChannelWithParticipantsAndParsedMessage[],\n  paginationMeta: PaginationMetaParams,\n  folderId?: string\n) => [string[], PaginationMeta]\n\nconst getMetaData = (\n  channelsInTab: number,\n  participantChannels: number,\n  paginationMeta: PaginationMetaParams\n): PaginationMeta => {\n  const nonParticipantChannels: number = channelsInTab - participantChannels\n  const diff: number = paginationMeta.per_page - nonParticipantChannels\n\n  const isLastPage: boolean = paginationMeta.total/paginationMeta.per_page <= paginationMeta.page\n\n  const newPaginationMeta: PaginationMeta = {\n    ...paginationMeta,\n    filteredOneOrMorePage: diff < 1,\n    isLastPage,\n  }\n\n  return newPaginationMeta\n}\n\nconst reduceAndGetChannelsIds = (channels: ChannelWithParticipantsAndParsedMessage[], predicate: Predicate): string[] =>\n  channels.reduce<string[]>((filtered: string[], channel: ChannelWithParticipantsAndParsedMessage) => {\n    if (predicate(channel)) {\n      return [...filtered, channel.id]\n    }\n\n    return filtered\n  }, [])\n\nconst isActiveChannel = (channel: ChannelWithParticipantsAndParsedMessage): boolean =>\n  !channel.deleted && channel.message !== undefined\n\nconst filterGroupChannels: FilterChannelsType = (\n  channels: ChannelWithParticipantsAndParsedMessage[],\n  paginationMeta: PaginationMetaParams,\n  groupUuid?: string\n): [string[], PaginationMeta] => {\n  const filteredChannels = channels.filter((channel: ChannelWithParticipantsAndParsedMessage) =>\n    (channel.type === ChannelType.MULTI ||\n    channel.type === ChannelType.GROUP ||\n    channel.type === ChannelType.PERSONAL) &&\n    channel.group_uuid === groupUuid)\n\n  const participantChannelIds: string[] =\n    reduceAndGetChannelsIds(\n      filteredChannels,\n      (channel: ChannelWithParticipantsAndParsedMessage) => isActiveChannel(channel)\n    )\n\n  return [participantChannelIds, getMetaData(filteredChannels.length, participantChannelIds.length, paginationMeta)]\n}\n\nconst filterPrimaryOtherChannels: FilterChannelsType = (\n  channels: ChannelWithParticipantsAndParsedMessage[],\n  paginationMeta: PaginationMetaParams,\n  folderId?: string,\n): [string[], PaginationMeta] => {\n  const channelsInTab = channels.filter((channel: ChannelWithParticipantsAndParsedMessage) =>\n    (channel.type === ChannelType.MULTI ||\n      channel.type === ChannelType.PERSONAL) &&\n    channel.folder_id === folderId &&\n    !channel.group_uuid\n  )\n\n  const participantChannels: string[] = reduceAndGetChannelsIds(\n    channelsInTab,\n    (channel: ChannelWithParticipantsAndParsedMessage) => isActiveChannel(channel)\n  )\n\n  return [participantChannels, getMetaData(channelsInTab.length, participantChannels.length, paginationMeta)]\n}\n\nconst folderActionMap: Map<MessagesType, FilterChannelsType> = new Map([\n  [MessagesType.GROUPS, filterGroupChannels],\n  [MessagesType.PRIMARY, filterPrimaryOtherChannels],\n  [MessagesType.OTHER, filterPrimaryOtherChannels],\n])\n\nexport const actionByFolder = (folderType: MessagesType): FilterChannelsType =>\n  folderActionMap.get(folderType) ?? placeholderAction\n\nexport const sortChannelsByDate = (\n  x: ChannelWithParticipantsAndParsedMessage,\n  y: ChannelWithParticipantsAndParsedMessage\n): number => {\n  const firstDate: string\n   = x.message?.created_at ?? x.updated_at ?? x.created_at\n  const secondDate: string\n   = y.message?.created_at ?? y.updated_at ?? y.created_at\n\n  return sortByDateDesc(firstDate, secondDate)\n}\n\nexport const isBotChannel = (channel: ChannelWithParticipantsAndParsedMessage): boolean =>\n  (channel.type === ChannelType.PERSONAL && channel.participants.includes(MESSAGE_BOT_IDENTITY_UUID))\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channel_list_counter.tsx",["2191"],"import React from 'react'\nimport { ListCounterProps } from './interfaces'\nimport { useStyles } from './styles'\n\nexport const ChannelListCounter: React.FC<ListCounterProps> = ({ unreadMessagesCount }: ListCounterProps) => {\n  const { unreadMessagesCountCircle, unreadMessagesCountNumber } = useStyles(\n    { unreadMessageLength: unreadMessagesCount.length }\n  )\n\n  return (\n    <div className={unreadMessagesCountCircle}>\n      <span className={unreadMessagesCountNumber}>{unreadMessagesCount}</span>\n    </div>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/use_channels_list_item.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_bar/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_header/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/use_message_input.ts",["2192"],"import { KeyEvent } from './../../../../constants'\nimport { useState, KeyboardEvent, ChangeEvent, useEffect, useRef, useCallback, RefObject } from 'react'\nimport { Theme, useTheme } from '@material-ui/core'\nimport { SendComponentState, MessageInputHooksProps, ComposerProps, MessageStates, MessageInputHookResult } from './interfaces'\nimport { throttle } from 'lodash'\nimport { MIN_IMAGE_SIZE_BYTES, IMAGE_PNG, IMAGE_JPEG } from '../../../../constants'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setToastError } from 'globalid-react-ui'\nimport { ChannelWithParticipantsAndParsedMessage } from '../../../../store/interfaces'\nimport { RootState } from 'RootType'\nimport { trimTextLeftAndRightSideWhiteSpaces } from './helpers'\nimport { getString, sendImageToChannel, sendMessageToChannel } from '../../../../utils'\nimport { sendTypingNotification } from '../../../../services/api'\nimport { store } from '../../../../store'\nimport { openGameForm } from '../../../../store/ui_slice'\n\nconst createStates = (theme: Theme): MessageStates => {\n  const { electricBlue, white, brightGray } = theme.palette.customColors\n\n  const stateSwitch: MessageStates = {\n    [SendComponentState.ACTIVE]: {\n      iconInterface: { lineColor: white, backgroundColor: electricBlue, opacity: 1 },\n      placeholder: getString('empty-message-input'),\n    },\n    [SendComponentState.PICTURE_INPUT]: {\n      iconInterface: {\n        lineColor: white,\n        backgroundColor: electricBlue,\n        opacity: 1,\n      }, placeholder: '',\n    },\n    [SendComponentState.DISABLED]: {\n      iconInterface: {\n        lineColor: brightGray,\n        backgroundColor: electricBlue,\n        opacity: 0.2,\n      }, placeholder: getString('disabled-message-input'),\n    },\n    [SendComponentState.INACTIVE]: {\n      iconInterface: { lineColor: white, backgroundColor: electricBlue, opacity: 0.5 },\n      placeholder: getString('empty-message-input'),\n    },\n  }\n\n  return stateSwitch\n}\n\nenum Command {\n  GAME = 'game'\n}\n\nconst isValidCommand = (command: string):command is Command => Object.values(Command).includes(<Command>command)\n\nconst isString = (x: string | File): x is string => typeof x === 'string'\n\nconst isCommand = (x: string): boolean => x.startsWith('/')\n\nexport const sentMessage = (channel_id: string, gid_uuid: string, encryptedChannelSecret?: string) =>\n  async (data: string | File): Promise<boolean> => {\n    if (isString(data)) {\n      if (isCommand(data)){\n        const command = data.replace('/', '')\n\n        if (isValidCommand(command)){\n          if (command === Command.GAME){\n            const channel = (store.getState()).channels.channels[channel_id]?.channel\n\n            if (channel)\n            {\n              store.dispatch(openGameForm({key: channel_id, value: true}))\n            }\n          }\n\n          return true\n        }\n\n      }\n\n      return sendMessageToChannel(data, channel_id, gid_uuid, undefined, encryptedChannelSecret)\n    }\n\n    const assetUuid: string | undefined = await sendImageToChannel(data, channel_id, gid_uuid, undefined)\n\n    return assetUuid !== undefined\n  }\n\nconst getMultilineLimit = (isMobile: boolean): number => isMobile ? 3 : 9\n\ninterface ChannelInput {\n  [key: string]: string\n}\n\n// eslint-disable-next-line max-lines-per-function\nexport const useMessageInput = (props: MessageInputHooksProps): MessageInputHookResult => {\n  const inputElementRef: RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null)\n  const { disabled, onSend, channel_id } = props\n  const defaultState: SendComponentState = disabled ? SendComponentState.DISABLED : SendComponentState.INACTIVE\n  const [componentState, setComponentState] = useState<SendComponentState>(defaultState)\n  const [uploadedImageFile, setUploadedImageFile] = useState<File | null>(null)\n  const [channelMessages, setChannelMessage] = useState<ChannelInput | undefined>(undefined)\n\n  const dispatch: Dispatch = useDispatch()\n\n  const setMessage = (newMessage: string): void => {\n    setChannelMessage((prevValue: ChannelInput | undefined) => ({\n      ...prevValue,\n      [channel_id]: newMessage,\n    }))\n  }\n\n  const channel: ChannelWithParticipantsAndParsedMessage | undefined = useSelector((state: RootState) => (\n    state.channels.channels[props.channel_id]?.channel\n  ))\n\n  const message = channelMessages?.[channel_id] ?? ''\n\n  useEffect(() => {\n    focusInput()\n\n    const clearText: boolean = channelMessages?.[channel_id] === undefined\n      || channelMessages[channel_id].length === 0\n\n    applyState(clearText)\n\n    if (disabled) {\n      setComponentState(SendComponentState.DISABLED)\n    }\n  }, [channel_id])\n\n  const applyState = (textCleared: boolean): void => {\n    setComponentState(textCleared ? SendComponentState.INACTIVE : SendComponentState.ACTIVE)\n  }\n\n  const sendMessage = async (): Promise<void> => {\n    if (!disabled && componentState !== SendComponentState.INACTIVE) {\n      setMessage('')\n      applyState(true)\n\n      if (message.length > 0) {\n        const trimmed = trimTextLeftAndRightSideWhiteSpaces(message)\n\n        await onSend(trimmed)\n\n      } else if (uploadedImageFile !== null) {\n\n        const imageFile: File = uploadedImageFile\n\n        setUploadedImageFile(null)\n\n        await onSend(imageFile)\n      }\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  const onKeyPress = async (keyboardEvent: KeyboardEvent<HTMLDivElement>): Promise<void> => {\n    if (keyboardEvent.key === KeyEvent.Enter) {\n      if (!keyboardEvent.shiftKey){\n        keyboardEvent.preventDefault()\n        await sendMessage()\n      }\n    }\n  }\n\n  const throttleSendTypingNotification = useCallback(throttle(sendTypingNotification, 5000), [])\n\n  const onChange = async (changeEvent: ChangeEvent<HTMLInputElement>): Promise<void> => {\n    setMessage(changeEvent.target.value)\n\n    const messageText: string = trimTextLeftAndRightSideWhiteSpaces(changeEvent.target.value)\n\n    if (messageText.length > 0) {\n\n      applyState(false)\n      await throttleSendTypingNotification(channel_id)\n\n      return\n    }\n\n    if (messageText.length === 0) {\n      applyState(true)\n    }\n\n    await throttleSendTypingNotification(channel_id)\n  }\n\n  const focusInput = (): void => {\n    if (inputElementRef.current) {\n      inputElementRef.current.focus()\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (e.target.files !== null && e.target.files.length === 1) {\n\n      const imageFile: File = e.target.files[0]\n\n      if (![IMAGE_PNG, IMAGE_JPEG].includes(imageFile.type)) {\n\n        dispatch(setToastError({\n          title: getString('image-data-format-error-title-toast'),\n          message: getString('image-data-format-error-toast'),\n        }))\n\n        return\n      }\n\n      if (imageFile.size <= MIN_IMAGE_SIZE_BYTES) {\n\n        dispatch(setToastError({\n          title: getString('image-data-size-error-title'),\n          message: getString('image-data-size-error'),\n        }))\n\n        return\n      }\n\n      setUploadedImageFile(imageFile)\n      setComponentState(SendComponentState.PICTURE_INPUT)\n      focusInput()\n    }\n\n    e.target.value = ''\n  }\n\n  const handleRemoveImage = (): void => {\n    setUploadedImageFile(null)\n    setComponentState(SendComponentState.INACTIVE)\n  }\n\n  const theme: Theme = useTheme()\n  const composerCharacteristics = createStates(theme)\n  const getComposerProperties: ComposerProps = composerCharacteristics[componentState]\n\n  const readOnly: boolean = uploadedImageFile !== null\n\n  return {\n    message,\n    onChange,\n    onKeyPress,\n    sendMessage,\n    getIconStyle: () => getComposerProperties.iconInterface,\n    getMultilineLimit,\n    textPlaceholder: getComposerProperties.placeholder,\n    disabled,\n    readOnly,\n    inputElementRef,\n    uploadedImageFile,\n    handleInputChange,\n    handleRemoveImage,\n    onInputClick: focusInput,\n    channel,\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/use_chat_messages.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/style.tsx",["2193"],"import { makeStyles, Theme } from '@material-ui/core'\n\ninterface StyleProps {\n  inputLength: number\n  disabled: boolean\n}\n\nexport const useStyles =\n  makeStyles((theme: Theme) => ({\n    messageInput: {\n      border: 0,\n      flexGrow: 1,\n      textAlign: 'center',\n      caretColor: theme.palette.customColors.electricBlue,\n      '& .MuiInputBase-root':{\n        fontFamily: 'Averta-Regular',\n        fontSize: '15px',\n        lineHeight: '18px',\n      },\n      alignSelf: 'center',\n      '& .MuiInputBase-multiline': {\n        paddingTop: theme.spacing(1),\n      },\n    },\n\n    messageInputPlaceholder: {\n      '&::placeholder': {\n        color: theme.palette.customColors.black,\n      },\n    },\n\n    messageSendIcon: {\n      marginLeft: theme.spacing(1.25),\n      alignSelf: 'flex-end',\n      cursor: (props: StyleProps) => props.disabled ? 'inherit' : 'pointer',\n      height: '36px',\n      marginBottom: theme.spacing(0.5),\n      marginTop: theme.spacing(0.5),\n    },\n\n    messageInputContainer: {\n      borderRadius: theme.spacing(3),\n      background: theme.palette.customColors.brightGray,\n      display: 'flex',\n      flexDirection: 'row',\n      paddingRight: theme.spacing(0.5),\n      paddingBottom: theme.spacing(0),\n      paddingLeft: theme.spacing(2),\n      transition: 'width 0.5s',\n      maxWidth: (props: StyleProps) => props.inputLength > 0 ? '100%' : 'calc(100% - 50px)',\n      flexGrow: 1,\n      '& ::-webkit-scrollbar-thumb': {\n        background: theme.palette.customColors.white,\n      },\n    },\n\n    pickImageWrapper: {\n      background: (props: StyleProps) => props.disabled ? theme.palette.customColors.white : theme.palette.customColors.brightGray,\n      width: '44px',\n      height: '44px',\n      padding: theme.spacing(1.2),\n      borderRadius: theme.spacing(3),\n      '&:hover': {\n        cursor: (props: StyleProps) => props.disabled ? 'inherit' : 'pointer',\n      },\n      position: 'absolute',\n      right: '20px',\n    },\n\n    messageInputWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n\n    imagePlaceholder: {\n      background: theme.palette.customColors.white,\n      borderRadius: theme.spacing(3),\n      height: theme.spacing(3.5),\n      paddingRight: theme.spacing(1),\n      paddingLeft: theme.spacing(1),\n      marginLeft: theme.spacing(-1),\n      maxWidth: '28vw',\n    },\n\n    imageText: {\n      fontFamily: 'Averta-Regular',\n      fontSize: '15px',\n      color: 'black',\n      '&:hover': {\n        cursor: 'text',\n      },\n      maxWidth: '100%',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    },\n\n    removeIcon: {\n      width: '20px',\n      height: '20px',\n      marginRight: theme.spacing(1),\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n\n    displayNone: {\n      display: 'none',\n    },\n  })\n  )\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/channels_list_item_helpers.ts",["2194","2195","2196","2197","2198","2199"],"import {\n  MessageTemplateCardView,\n  MessageTemplateEncryptedText,\n  MessageTemplateMedia,\n  MessageTemplateMediaWithEncryptedText,\n  MessageTemplateText,\n} from '@globalid/messaging-service-sdk'\nimport { deviceKeyManager } from '../../../init'\nimport { getEncryptedMediaMessageContent, getMediaMessageContent } from '../../../store/messages_slice'\nimport { IdentityByUUID } from '../interfaces'\nimport {\n  getString,\n  getStringWithText,\n  getEncryptedMessageContent,\n  getMessageContent,\n} from '../../../utils'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { ChannelWithParticipantsAndParsedMessage, ChannelType, MessagePreviewData } from '../../../store/interfaces'\nimport { MessageType } from '../messenger_chat/interfaces'\nimport { LastMessage, MediaAssetType } from './interfaces'\n\nexport const getMessageAuthorName = (\n  channel: ChannelWithParticipantsAndParsedMessage,\n  gidName: string | undefined,\n  showOwner: boolean,\n): string => {\n  const lastMessageAuthorName: string = gidName ?? ''\n\n  if (channel.message?.type !== MessageType.SYSTEM) {\n    if (channel.type === ChannelType.GROUP) {\n      return `${lastMessageAuthorName}${channel.created_by === channel.message?.author && showOwner\n        ? ` ${getString('group-owner')}:`\n        : ':'}`\n    }\n\n    if (channel.type === ChannelType.MULTI || channel.message?.type === MessageType.CARD_VIEW) {\n      return `${lastMessageAuthorName}:`\n    }\n  }\n\n  return ''\n}\n\nexport const getChannelParticipant = (\n  identities: IdentityByUUID | null,\n  participantUuid: string | undefined\n): PublicIdentity | undefined => {\n  if (!identities || !participantUuid) {\n    return undefined\n  }\n\n  return identities[participantUuid]\n}\n\nexport const getChannelParticipantsByChannelType = (\n  identities: IdentityByUUID | null,\n  type: ChannelType,\n  participants: string[]\n): (PublicIdentity | undefined)[] => {\n  if (type === ChannelType.MULTI) {\n    const firstParticipant: PublicIdentity | undefined = getChannelParticipant(identities, participants[0])\n    const secondParticipant: PublicIdentity | undefined = getChannelParticipant(identities, participants[1])\n\n    return [firstParticipant, secondParticipant]\n  }\n\n  if (type === ChannelType.PERSONAL) {\n    const firstParticipant: PublicIdentity | undefined = getChannelParticipant(identities, participants[0])\n\n    return [firstParticipant]\n  }\n\n  return []\n}\n\nexport const getLastMessageAuthor = (\n  identities: IdentityByUUID | null,\n  channel: ChannelWithParticipantsAndParsedMessage\n): PublicIdentity | undefined =>\n  (channel.type === ChannelType.MULTI || channel.type === ChannelType.GROUP || channel.type === ChannelType.PERSONAL)\n    ? getChannelParticipant(identities, channel.message?.author)\n    : undefined\n\nexport const getImageTextBasedOnAuthorAssetsAndText = (\n  message: MessagePreviewData,\n  content: MessageTemplateMediaWithEncryptedText | MessageTemplateMedia | null,\n  text: string | null,\n  identities: IdentityByUUID,\n  identity: PublicIdentity | undefined\n): string => {\n  const isAuthorLoggedInIdentity: boolean = message.author === identity?.gid_uuid\n\n  if (isAuthorLoggedInIdentity && !text && content && content.assets.length > 0) {\n    return content.assets.length === 1 ? getString('you-sent-image') : getString('you-sent-images')\n  }\n\n  const author: PublicIdentity | undefined = getChannelParticipant(identities, message.author)\n\n  if (author && content && content.assets.length > 0) {\n    return content.assets.length === 1 ?\n      getStringWithText('user-sent-image', [{ match: 'user', replace: author.gid_name }])\n      :\n      getStringWithText('user-sent-images', [{ match: 'user', replace: author.gid_name }])\n  }\n\n  return ''\n}\n\n// eslint-disable-next-line complexity,max-lines-per-function\nexport const getLastMessage = async (\n  channel: ChannelWithParticipantsAndParsedMessage,\n  identities: IdentityByUUID,\n  identity: PublicIdentity | undefined,\n  encryptedChannelSecret?: string,\n): Promise<LastMessage> => {\n  try {\n    const message: MessagePreviewData | undefined = channel.message\n\n    const isMultiOrGroupChannel: boolean = channel.type === ChannelType.GROUP || channel.type === ChannelType.MULTI\n    const isLoggedInIdentityMessageAuthor: boolean = message?.author === identity?.gid_uuid\n\n    if (encryptedChannelSecret !== undefined && message?.type === MessageType.ENCRYPTED_TEXT) {\n      const encryptedContent: MessageTemplateEncryptedText | null = getEncryptedMessageContent(message)\n\n      return (encryptedContent === null) ?\n        { text: null}\n        :\n        { text: await deviceKeyManager.decrypt(encryptedChannelSecret, encryptedContent), showAuthor: true }\n    }\n\n    if (encryptedChannelSecret !== undefined && message?.type === MessageType.MEDIA_WITH_ENCRYPTED_TEXT) {\n      const encryptedContent: MessageTemplateEncryptedText | null = getEncryptedMediaMessageContent(message)\n\n      const content: MessageTemplateMediaWithEncryptedText = JSON.parse(message.content)\n\n      if (content.assets.length > 0 && content.assets[0].type === MediaAssetType.IMAGE) {\n        const decryptedText: string | null = (encryptedContent === null) ?\n          null : await deviceKeyManager.decrypt(encryptedChannelSecret, encryptedContent)\n\n        const imageInfoText: string = getImageTextBasedOnAuthorAssetsAndText(\n          message,\n          content,\n          decryptedText,\n          identities,\n          identity\n        )\n\n        return decryptedText?.length ? { text: decryptedText, showAuthor: true }: { text: imageInfoText }\n      }\n    }\n\n    if (message?.type === MessageType.MEDIA_WITH_TEXT) {\n      const content: MessageTemplateMedia | null = getMediaMessageContent(message)\n\n      if (content && content.assets.length > 0 && content.assets[0].type === MediaAssetType.IMAGE) {\n        const imageInfoText: string = getImageTextBasedOnAuthorAssetsAndText(\n          message,\n          content,\n          content.text ?? null,\n          identities,\n          identity\n        )\n\n        return content.text?.length ?\n          { text: content.text, showAuthor: true } : { text: imageInfoText }\n      }\n    }\n\n    if (message?.type === MessageType.TEXT ||\n      message?.type === MessageType.DELETED ||\n      message?.type === MessageType.SYSTEM) {\n      const content: MessageTemplateText | null = getMessageContent(message)\n\n      const isDeletedByMe: boolean = message.deleted_by ? message.deleted_by === identity?.gid_name : false\n\n      if (isDeletedByMe) {\n        return { text: getString('you-deleted-msg') }\n      }\n\n      return (content === null) ?\n        { text: null }\n        :\n        { text: content.text, showAuthor: isMultiOrGroupChannel && message.type !== MessageType.DELETED }\n    }\n\n    const mediaContent: MessageTemplateMedia | undefined =\n      message?.type === MessageType.MEDIA ? JSON.parse(message.content) : undefined\n\n    const isImageAsset: boolean | undefined =\n      mediaContent && mediaContent.assets.length > 0 && mediaContent.assets[0].type === MediaAssetType.IMAGE\n    const isImageSentByMe: boolean = (isImageAsset ?? false) && isLoggedInIdentityMessageAuthor\n\n    const author: PublicIdentity | undefined = getChannelParticipant(identities, message?.author)\n\n    const cardViewContent: MessageTemplateCardView | undefined =\n      message?.type === MessageType.CARD_VIEW ? JSON.parse(message.content) : undefined\n\n    if (cardViewContent !== undefined) {\n      return { text: cardViewContent.text }\n    }\n\n    if (isImageAsset && author !== undefined) {\n      return isImageSentByMe ?\n        { text: getString('you-sent-image')}\n        :\n        { text: getStringWithText('user-sent-image',[{ match: 'user', replace: author.gid_name}]) }\n    }\n\n    return { text: null }\n  } catch (error) {\n    return { text: null }\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/channel_header.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/channel_header_bar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/channel_members_sidebar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_bar/participants_bar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/identities_search.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_header/participants_header.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/get_avatar_by_channel_type.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/helpers.ts",["2200"],"import { Identity } from '@globalid/identity-namespace-service-sdk'\nimport {\n  IdentityByUUID,\n} from '../interfaces'\nimport { IdentityListItemProps } from '../../identity_list/interfaces'\nimport { GidUUID, ChannelType, GidName } from '../../../store/interfaces'\nimport { ProfilePageTarget } from '../../../utils/interfaces'\n\nexport const getChannelMemberListItems = (\n  memberUuids: GidUUID[],\n  membersByUuid: IdentityByUUID,\n  owner: GidUUID | undefined,\n  hideOwner?: boolean,\n): IdentityListItemProps[] => (\n  memberUuids.reduce<Identity[]>((identities: Identity[], memberUuid: GidUUID) => {\n    const identity: Identity | undefined = membersByUuid[memberUuid]\n\n    if (identity !== undefined) {\n      const isOwner: boolean = identity.gid_uuid === owner\n\n      return [\n        ...identities,\n        {\n          ...identity,\n          isOwner,\n          hideOwner,\n          profilePageTarget: ProfilePageTarget.BLANK,\n        },\n      ]\n    }\n\n    return identities\n  }, [])\n)\n\nexport const getOtherChannelMemberUuidInOneOnOneConversation = (\n  loggedInIdentityUuid: GidUUID,\n  channelType?: ChannelType,\n  memberUuids?: GidUUID[]\n): GidUUID | undefined => {\n  if (channelType === ChannelType.PERSONAL && memberUuids !== undefined && memberUuids.length === 2) {\n    return memberUuids.find((memberUuid: GidUUID) => memberUuid !== loggedInIdentityUuid)\n  }\n\n  return undefined\n}\n\nexport const getGidNamesByChannelType = (type: ChannelType, gidNames: GidName[]): string | null => {\n  if (gidNames.length === 0){\n    return null\n  }\n\n  if (type === ChannelType.PERSONAL || gidNames.length === 1) {\n    return gidNames[0]\n  }\n\n  if (gidNames.length === 2) {\n    return gidNames.join(', ')\n  }\n\n  return `${gidNames.splice(0, 2).join(', ')}, ...`\n}\n\nexport const disableActionLink = (isOneOnOne: boolean, hiddenMembers: boolean): boolean =>\n  !isOneOnOne && hiddenMembers\n\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/message_input/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/helpers.tsx",["2201"],"import React from 'react'\n\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { Folder } from '@globalid/messaging-service-sdk'\nimport { addSeconds, isAfter, isBefore } from 'date-fns'\n\nimport { ChannelType } from '../../../store/interfaces'\nimport { getAvatarUrl, getString } from '../../../utils'\nimport { ChannelFoldersType } from '../interfaces'\nimport { SystemMessageCard } from './chat_message_cards'\nimport { MessageDivider } from './chat_message_cards/message_divider'\nimport { TypingMessageCard } from './chat_message_cards/typing_message_card'\nimport { ChatMessageCards, classesType, TypingDetails } from './interfaces'\n\nconst getTypingCard = (participant: PublicIdentity | undefined): JSX.Element | null => {\n  if (participant === undefined) {\n    return null\n  }\n\n  const imageSrc: string = participant.display_image_url ?? getAvatarUrl(participant.gid_uuid)\n\n  return <TypingMessageCard key={'typing-card'} avatar={imageSrc} />\n}\n\nconst addTyping = (\n  typingDetails: TypingDetails\n): ChatMessageCards[] => {\n  if (typingDetails.typing === undefined) {\n    return typingDetails.mappedMessages\n  }\n\n  const typingCard: ChatMessageCards | null = typingDetails.channelType === ChannelType.PERSONAL ? getTypingCard(typingDetails.identities[typingDetails.membersWithoutUser[0]]) : null\n  const timeNow: number = Date.now()\n  const typingStartedAt: Date = new Date(typingDetails.typing.started_at)\n  const typingExpirationTime: Date = addSeconds(typingStartedAt, 7)\n\n  if (\n    typingDetails.typing && typingCard !== null\n    && isAfter(typingExpirationTime, timeNow)\n    && (typingDetails.lastMessageTime === undefined || isBefore(new Date(typingDetails.lastMessageTime), typingStartedAt))\n  ) {\n    return [typingCard, ...typingDetails.mappedMessages]\n  }\n\n  return typingDetails.mappedMessages\n}\n\nexport const addBottomCards = (\n  typingDetails: TypingDetails,\n  folderId: string | undefined | null,\n  folders: Folder[],\n  classes: classesType,\n): ChatMessageCards[] => {\n  const otherFolderId: string | undefined = folders.find((folder: Folder) => folder.type === ChannelFoldersType.UNKNOWN)?.id\n\n  if (folderId === otherFolderId) {\n    const systemMessageText: string = typingDetails.channelType === ChannelType.PERSONAL ? getString('change-folder-description-personal') : getString('change-folder-description-multi')\n\n    return [\n      <div key={'add_to_contact_message'} className={classes.moveChatText}><SystemMessageCard text={systemMessageText} /></div>,\n      <div key={'add_to_contact_divider'} className={classes.moveChatDivider}><MessageDivider/></div>,\n      ...addTyping(typingDetails),\n    ]\n  }\n\n  return addTyping(typingDetails)\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/get_messages_card_by_type.tsx",["2202"],"import { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { MessageTemplateCardView } from '@globalid/messaging-service-sdk'\nimport React from 'react'\nimport { ChannelType, MessageData } from '../../../store/interfaces'\nimport { IdentityByUUID } from '../interfaces'\nimport {\n  BaseMessageCardProps,\n  DeletedMessageCard,\n  MessageContext,\n  MessageDataParsed,\n  SystemMessageCard,\n  TextMessageCard,\n  TextMessageCardProps,\n} from './chat_message_cards'\nimport { CardViewMessageCard } from './chat_message_cards/card_view_message'\nimport { MessageCardType } from './chat_message_cards/card_view_message/interfaces'\nimport { retrieveMessageCardTypeFromButtons } from './chat_message_cards/helpers'\nimport { ImageMessageCard } from './chat_message_cards/image_message_card'\nimport { UnsupportedMessageCard } from './chat_message_cards/unsupported_message_card'\nimport {\n  ChatMessageCards,\n  MessageCardByTypeMap,\n  MessageType,\n} from './interfaces'\n\nexport const messageCardByType = (\n  me: PublicIdentity,\n  admin: string | undefined,\n  participants: IdentityByUUID,\n  messageSeenId: string | undefined,\n  channelType: ChannelType,\n  showOwner: boolean | undefined,\n  encryptedChannelSecret?: string,\n  isHiddenMember?: boolean,\n): MessageCardByTypeMap => (prevMessage: MessageData | null , message: MessageData, nextMessage: MessageData | null): ChatMessageCards => {\n  const author: PublicIdentity | undefined = participants[message.author]\n\n  const messageContext: MessageContext = {\n    prevMessage,\n    message,\n    nextMessage,\n  }\n\n  const seen: boolean = messageSeenId !== undefined && messageSeenId === message.id\n  const hideOwner: boolean = showOwner !== undefined && !showOwner && ChannelType.GROUP === channelType\n\n  const baseCardProps: BaseMessageCardProps = {\n    messageContext,\n    me,\n    admin,\n    author,\n    channelType,\n    seen,\n    hideOwner,\n    isHiddenMember,\n  }\n\n  const messageCardMap: Map<MessageType, JSX.Element> = new Map([\n    [MessageType.SYSTEM, <SystemMessageCard key={message.uuid} text={message.content ? JSON.parse(message.content).text: ''} />],\n    [MessageType.MEDIA, <ImageMessageCard key={message.uuid} {...baseCardProps}/>],\n    [MessageType.MEDIA_WITH_ENCRYPTED_TEXT, <ImageMessageCard key={message.uuid} encryptedChannelSecret={encryptedChannelSecret} {...baseCardProps}/>],\n    [MessageType.MEDIA_WITH_TEXT, <ImageMessageCard key={message.uuid} {...baseCardProps}/>],\n    [MessageType.ENCRYPTED_MEDIA, <ImageMessageCard key={message.uuid} encryptedChannelSecret={encryptedChannelSecret} {...baseCardProps}/>],\n    [MessageType.CARD_VIEW, <CardViewMessageCardComponent key={message.uuid} message={message} {...baseCardProps}/>],\n    [MessageType.TEXT, <TextOrEncryptedTextMessageCard key={message.uuid} message={message} encryptedChannelSecret={encryptedChannelSecret} {...baseCardProps}/>],\n    [MessageType.ENCRYPTED_TEXT, <TextOrEncryptedTextMessageCard key={message.uuid} message={message} encryptedChannelSecret={encryptedChannelSecret} {...baseCardProps}/>],\n    [MessageType.DELETED, <DeletedMessageCard key={message.uuid} {...baseCardProps}/>],\n  ])\n\n  return messageCardMap.get(message.type as MessageType) ?? <UnsupportedMessageCard key={message.uuid} {...baseCardProps}/>\n}\ntype BaseProps = BaseMessageCardProps<MessageData> & {message: MessageData, encryptedChannelSecret?: string}\nexport const CardViewMessageCardComponent: React.FC<BaseProps> = props => {\n  const {message, ...baseCardProps}: BaseProps = props\n  const messageContent: MessageTemplateCardView = JSON.parse(message.content) as MessageTemplateCardView\n  const messageCardType: MessageCardType = messageContent.elements.buttons ?\n    retrieveMessageCardTypeFromButtons(messageContent.elements.buttons) : MessageCardType.UNKNOWN\n\n  // if (messageCardType === MessageCardType.UNKNOWN) {\n  //   return <UnsupportedMessageCard key={message.uuid} {...baseCardProps} />\n  // }\n\n  return <CardViewMessageCard key={message.uuid} {...baseCardProps} />\n}\n\nexport const TextOrEncryptedTextMessageCard: React.FC<BaseProps> = props => {\n  const {message, messageContext, encryptedChannelSecret ,...baseCardProps} = props\n\n  if (message.parsedContent === null) {\n    return <UnsupportedMessageCard messageContext={messageContext} {...baseCardProps}/>\n  }\n\n  const textMessageCardContext: MessageContext<MessageDataParsed> = {\n    ...messageContext,\n    message: message as MessageDataParsed,\n  }\n\n  const textMessageCardProps: TextMessageCardProps = {\n    ...baseCardProps,\n    messageContext: textMessageCardContext,\n    encryptedChannelSecret,\n  }\n\n  return <TextMessageCard {...textMessageCardProps}/>\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channels_list/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_fetch_members.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_header/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_identity_menu_options.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/services/fuse/fuse.ts",["2203"],"import { Identity } from '@globalid/identity-namespace-service-sdk'\nimport Fuse from 'fuse.js'\nimport _ from 'lodash'\n\nexport const optimizeIdentitiesSearchResults = (\n  identities: Identity[] | undefined,\n  searchText: string\n): Identity[] | undefined => {\n\n  if (!identities || _.isEmpty(searchText)) {\n    return identities\n  }\n\n  const options = {\n    keys: [\n      {\n        name: 'gid_name',\n        weight: 0.6,\n      },\n      {\n        name: 'display_name',\n        weight: 0.4,\n      },\n    ],\n    includeMatches: true,\n    minMatchCharLength: searchText.length,\n  }\n\n  return fuseSearch(identities, options, searchText)\n}\n\nconst fuseSearch = <T> (list: T[], options: Fuse.IFuseOptions<T>, searchText: string): T[] => {\n\n  const fuse = new Fuse(list, options)\n\n  const results: T[] =\n    fuse.search(searchText).map(((result: Fuse.FuseResult<T>) => ({ ...result.item, matches: result.matches })))\n\n  return results\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_channel_header.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_channel_update.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/use_leave_conversation_hook.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/use_channel_details.tsx",["2204"],"import { useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { ChannelType, ChannelWithParticipantsAndParsedMessage, GidUUID } from '../../../store/interfaces'\nimport { PublicIdentity } from '@globalid/identity-namespace-service-sdk'\nimport { ChannelDetails, GetChannelAvatarParams } from './interfaces'\nimport { IdentityByUUID } from '../interfaces'\nimport { getAvatarByChannelType } from '../channel_avatars/get_avatar_by_channel_type'\nimport { getChannelParticipantsByChannelType } from '../channels_list/channels_list_item_helpers'\nimport { isBotChannel } from '../channels_list/helpers'\nimport { getString } from '../../../utils'\n\nconst membersText = (channel: ChannelWithParticipantsAndParsedMessage): string =>\n  (channel.participants.length === 1) ? getString('member') : getString('members')\n\nconst getMembersDescription = (\n  channel: ChannelWithParticipantsAndParsedMessage,\n  displayName: string,\n): string => {\n  const numberOfMembers: string = `${channel.members_count} ${membersText(channel)}`\n\n  if (channel.type === ChannelType.GROUP) {\n    return numberOfMembers\n  }\n\n  return channel.members_count > 1 && channel.type !== ChannelType.PERSONAL ? numberOfMembers : `${displayName}`\n}\n\nconst getChannelDescription = (\n  channel: ChannelWithParticipantsAndParsedMessage,\n  firstParticipant: PublicIdentity | undefined\n): string | null | undefined => {\n  const personalChannelDescription: string =\n    (firstParticipant?.display_name !== undefined && firstParticipant?.country_name !== undefined && channel)\n      ? `${firstParticipant?.display_name} • ${firstParticipant?.country_name}`\n      : ''\n\n  if (isBotChannel(channel)) {\n    return firstParticipant?.display_name\n  }\n\n  return channel.type === ChannelType.PERSONAL ? personalChannelDescription : channel.description\n}\n\nconst isFirstParticipantUndefined =\n  (firstParticipant: PublicIdentity | undefined, type: ChannelType | undefined): boolean =>\n    firstParticipant === undefined && (type === ChannelType.PERSONAL || type === ChannelType.MULTI)\n\nexport const useChannelDetails = (\n  channelId: string,\n  gidUuid: GidUUID,\n): ChannelDetails | null => {\n\n  const channel: ChannelWithParticipantsAndParsedMessage | undefined = useSelector((state: RootState) => (\n    state.channels.channels?.[channelId]?.channel\n  ))\n\n  const membersWithoutUser: GidUUID[] | undefined = channel?.participants?.filter((participantUuid: GidUUID) => participantUuid !== gidUuid)\n\n  const identities: IdentityByUUID | undefined = useSelector((state: RootState) => state.channels.members)\n\n  if (channel === undefined || identities === undefined || membersWithoutUser === undefined) {\n    return null\n  }\n\n  const [firstParticipant, secondParticipant]: (PublicIdentity | undefined)[] =\n    getChannelParticipantsByChannelType(identities, channel?.type as ChannelType, [...membersWithoutUser, gidUuid])\n\n  if (isFirstParticipantUndefined(firstParticipant, channel?.type as ChannelType)) {\n    return null\n  }\n\n  const getChannelAvatar = (params?: GetChannelAvatarParams): JSX.Element => getAvatarByChannelType({\n    channel,\n    firstParticipant,\n    secondParticipant,\n    multiAvatarSize: 54,\n    ...params,\n  })\n\n  const displayName: string = firstParticipant?.display_name ?? ''\n  const groupUuid: GidUUID | null | undefined = channel.group_uuid\n\n  return {\n    getChannelAvatar,\n    channelType: channel.type as ChannelType,\n    description: getChannelDescription(channel, firstParticipant),\n    memberUuids: channel.participants,\n    members: identities,\n    membersDescription: getMembersDescription(channel, displayName),\n    title: channel.title ?? '',\n    otherMemberIdentity: firstParticipant,\n    owner: channel.created_by,\n    groupUuid,\n    isBotChannel: isBotChannel(channel),\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identities_search/helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/participants_bar/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_search_identities_hook.tsx",["2205"],"import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Identity,\n  PaginationMetaParams,\n} from '@globalid/identity-namespace-service-sdk'\nimport { SearchIdentitiesHookResult } from './interfaces'\nimport { RootState } from 'RootType'\nimport { FetchIdentitiesParameters, FetchStatus } from '../store/interfaces'\nimport { fetchIdentities } from '../store/identities_slice'\nimport {\n  getIdentitiesByText,\n  getIdentitiesPaginationMetaByText,\n  getIdentityFetchStatusByParameters,\n} from '../store/identities_selectors'\nimport { OPTIMIZED_SEARCH_PER_PAGE } from '../constants'\n\nexport const useSearchIdentitiesHook = (): SearchIdentitiesHookResult => {\n  const dispatch = useDispatch()\n\n  const [firstPageParameters, setFirstPageParameters] = useState<FetchIdentitiesParameters>({\n    page: 1,\n    text: '',\n  })\n  const [hasNextPage, setHasNextPage] = useState<boolean>(false)\n  const [isSearching, setIsSearching] = useState<boolean>(false)\n  const [searchText, setSearchText] = useState<string>('')\n\n  const identities: Identity[] = useSelector((root: RootState) => (\n    getIdentitiesByText(root, searchText)\n  ))\n\n  const meta: PaginationMetaParams | undefined = useSelector((root: RootState) => (\n    getIdentitiesPaginationMetaByText(root, searchText))\n  )\n\n  const firstPageFetchStatus: FetchStatus | undefined = useSelector((root: RootState) => (\n    getIdentityFetchStatusByParameters(root, firstPageParameters)\n  ))\n\n  const fetchFirstPage = (text: string): void => {\n    const parameters: FetchIdentitiesParameters = { page: 1, text, per_page: OPTIMIZED_SEARCH_PER_PAGE }\n\n    dispatch(fetchIdentities(parameters))\n  }\n\n  const fetchNextPage = (text: string, currentPage?: number): void => {\n    if (currentPage === undefined) {\n      return\n    }\n    const nextPage: number = currentPage + 1\n    const parameters: FetchIdentitiesParameters = { page: nextPage, text }\n\n    dispatch(fetchIdentities(parameters))\n  }\n\n  const loadNextPage = (): void => {\n    if (searchText.length === 0 || !hasNextPage) {\n      return\n    }\n    fetchNextPage(searchText, meta?.page)\n  }\n\n  const handleSearchRequest = (text: string): void => {\n    setSearchText(text)\n\n    if (text.length > 0) {\n      fetchFirstPage(text)\n      setFirstPageParameters({ page: 1, text })\n    }\n  }\n\n  useEffect((): void => {\n    if (firstPageParameters.text.length > 0 && (firstPageFetchStatus === undefined || firstPageFetchStatus === FetchStatus.PENDING)) {\n      setIsSearching(true)\n    } else if (isSearching) {\n      setIsSearching(false)\n    }\n  }, [firstPageFetchStatus, firstPageParameters.text])\n\n  useEffect((): void => {\n    if (meta !== undefined && identities.length < meta.total) {\n      setHasNextPage(true)\n    } else if (hasNextPage) {\n      setHasNextPage(false)\n    }\n  }, [identities.length, meta?.total])\n\n  return {\n    handleSearchInputChange: handleSearchRequest,\n    hasNextPage,\n    loadNextPage,\n    identities,\n    isSearching,\n    searchText,\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/use_get_contacts_hook.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/channel_avatar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/channel_multi_avatar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/typing_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/unsupported_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/image_message_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/init_video_call/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/search_input/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_info_message/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_header/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/hooks/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/removable_item/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/user_avatar/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_avatars/styles.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/use_image_message_card.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/image_message_card_components.tsx",["2206"],"import React, { useCallback } from 'react'\nimport {\n  ImageDisplayWrapperProps,\n  ImageMessageCardComponentProps,\n  MediaAssetParsedData,\n  GetImagesFromMediaAssetsProps,\n} from './interfaces'\nimport ReactLinkify from 'react-linkify'\n\nimport { CircularProgress } from '@material-ui/core'\nimport { linkComponentDecorator } from './helpers'\nimport { isEmpty } from 'lodash'\n\ntype ComponentType = {\n    wrapperProps: ImageDisplayWrapperProps\n    isSending?: boolean\n    onLoadAction?: () => void\n    onErrorAction: () => void\n    onClickAction?: () => Promise<void>\n    showImage?: boolean\n    loadingError?: boolean\n}\n\nconst LoadingComponent: React.FC<ComponentType> = ({\n  wrapperProps,\n  onLoadAction,\n  onErrorAction,\n}) => (\n  <div className={`${wrapperProps.relative} ${wrapperProps.placeholderBackground}`} data-testid='loading-component'>\n    {wrapperProps.imageSrc && <div className={wrapperProps.imageGridContainer}>\n      <img\n        className={wrapperProps.imageStyling}\n        src={wrapperProps.imageSrc}\n        onLoad={onLoadAction}\n        onError={onErrorAction}\n        alt={'download_image'}\n      />\n    </div>}\n    <div className={wrapperProps.infoIconForeground}>\n      <CircularProgress className={wrapperProps.circularProgress} size={25} thickness={6} />\n    </div>\n  </div>\n)\n\nconst ErrorComponent: React.FC<ComponentType> = ({\n  wrapperProps,\n  showImage = false,\n  loadingError,\n  onErrorAction,\n  onClickAction,\n}) => (\n  <div className={`${wrapperProps.relative} ${wrapperProps.background}`} onClick={onClickAction} data-testid='error-component'>\n    {showImage && wrapperProps.imageSrc && !loadingError && <div className={wrapperProps.imageGridContainer}>\n      <img\n        className={wrapperProps.imageStyling}\n        src={wrapperProps.imageSrc}\n        onError={onErrorAction}\n        alt={'download_image'}\n      />\n    </div>}\n    <div className={wrapperProps.infoIconForeground}>\n      <img src={wrapperProps.warningIcon} />\n    </div>\n  </div>\n)\n\nexport const ImageComponent: React.FC<ComponentType> = ({\n  wrapperProps,\n  isSending,\n  onLoadAction,\n  onErrorAction,\n  onClickAction,\n}) => {\n\n  const imageElement = (altText: string): JSX.Element =>\n    <div className={wrapperProps.imageGridContainer}>\n      <img\n        className={wrapperProps.imageStyling}\n        src={wrapperProps.imageSrc}\n        onLoad={onLoadAction}\n        onError={onErrorAction}\n        onClick={onClickAction}\n        alt={altText}\n      />\n    </div>\n\n  if (isSending) {\n    return (\n      <div className={wrapperProps.relative}>\n        {imageElement('sent_image')}\n        <div className={wrapperProps.imageLoadingContent}>\n          <CircularProgress className={wrapperProps.circularProgress} size={25} thickness={6} />\n        </div>\n      </div>\n    )\n  }\n\n  return imageElement('download_image')\n}\n\nconst getImagesFromMediaAssets = ({\n  imageComponentStates,\n  mediaAssets,\n  isLoadingError,\n  onRetry,\n  isSending,\n  downloadLoadedHandling,\n  downloadErrorHandling,\n  handleOnClickFullImageOpen,\n}: GetImagesFromMediaAssetsProps): JSX.Element[] => (\n  Object.keys(mediaAssets).reduce((images: JSX.Element[], assetUuid: string) => {\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    const onRetryMedia = async (): Promise<void> => onRetry(assetUuid)\n    const onDownloadLoaded = (): void | null => downloadLoadedHandling(assetUuid)\n    const onDownloadError = (): void => downloadErrorHandling(assetUuid)\n    const onClickFullImageOpen = async (): Promise<void> => handleOnClickFullImageOpen(assetUuid)\n\n    if (asset !== undefined && asset.styleWrapperProps !== undefined) {\n\n      if (imageComponentStates[assetUuid]?.showLoading) {\n        return [...images,\n          <LoadingComponent\n            key={`${assetUuid}-loading`}\n            wrapperProps={asset.styleWrapperProps}\n            onLoadAction={onDownloadLoaded}\n            onErrorAction={onDownloadError}\n          />]\n      }\n\n      if (imageComponentStates[assetUuid]?.showError) {\n        return [...images,\n          <ErrorComponent\n            key={`${assetUuid}-error`}\n            wrapperProps={asset.styleWrapperProps}\n            showImage={imageComponentStates[assetUuid]?.showImage ?? false}\n            loadingError={isLoadingError}\n            onErrorAction={onDownloadError}\n            onClickAction={onRetryMedia}\n          />]\n      }\n\n      if (imageComponentStates[assetUuid]?.showImage) {\n        return [...images,\n          <ImageComponent\n            key={`${assetUuid}-image`}\n            wrapperProps={asset.styleWrapperProps}\n            isSending={isSending}\n            onLoadAction={onDownloadLoaded}\n            onErrorAction={onDownloadError}\n            onClickAction={onClickFullImageOpen} />]\n      }\n    }\n\n    return images\n  }, [])\n)\n\nexport const ImageMessageCardComponent: React.FC<ImageMessageCardComponentProps> = ({\n  gridStyle,\n  containerStyle,\n  textStyle,\n  text,\n  ...props\n}: ImageMessageCardComponentProps) => {\n\n  const getImages: () => JSX.Element[] = useCallback(\n    () => getImagesFromMediaAssets(props),\n    [props.isLoadingError, props.isSending, props.mediaAssets, props.imageComponentStates]\n  )\n\n  return (\n    <div className={containerStyle}>\n      {text !== undefined && !isEmpty(text.trim()) && <div className={textStyle}>\n        <ReactLinkify componentDecorator={linkComponentDecorator}>\n          {text}\n        </ReactLinkify>\n      </div>}\n      <div className={gridStyle}>\n        { getImages() }\n      </div>\n    </div>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/init_video_call/init_video_call.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/identity_list.tsx",["2207"],"import React from 'react'\nimport { IdentityListItem } from './identity_list_item'\nimport {\n  IdentityAlias,\n  IdentityItem,\n  IdentityListProps,\n} from './interfaces'\nimport { useStyles } from './styles'\nimport { InfiniteScroll } from '../global/infinite_scroll/infinite_scroll'\nimport { ListInfoMessage } from '../global/list_info_message'\nimport { IDENTITY_LIST_ITEM_SIZE } from '../../constants'\nimport { useSelector } from 'react-redux'\nimport { RootState } from 'RootType'\nimport clsx from 'clsx'\nimport { GlobalidLoader } from '../global'\n\nexport const IdentityList: React.FC<IdentityListProps> = ({\n  emptyListMessage,\n  hasNextPage,\n  height,\n  isLoading,\n  items,\n  loadNextPage,\n  onSelect,\n  selectedIdentities = [],\n  showSelection = false,\n  excludeMe = false,\n  handleBottomSelectionOverlap,\n  selectDisabled,\n  adornment,\n  adornmentCondition,\n  itemDisabled,\n  disabledItemTooltip,\n}: IdentityListProps) => {\n\n  const classes = useStyles({ height, showSelection, endOfList: !hasNextPage, handleBottomSelectionOverlap })\n\n  const myGidUuid: string | undefined = useSelector((state: RootState) => state.identity.identity?.gid_uuid)\n\n  const centerLoader: JSX.Element = <div key='loader' className={classes.loaderWrapper}>\n    <GlobalidLoader />\n  </div>\n\n  if (items === undefined) {\n    return centerLoader\n  }\n\n  if (items.length === 0) {\n    return <ListInfoMessage message={emptyListMessage}/>\n  }\n\n  const listItems: IdentityItem[] = items.reduce<IdentityItem[]>((\n    identityList: IdentityItem[],\n    identity: IdentityAlias\n  ): IdentityItem[] => {\n    if (excludeMe && myGidUuid !== undefined && myGidUuid === identity.gid_uuid) {\n      return identityList\n    }\n\n    return [...identityList, {\n      ...identity,\n      selectDisabled,\n      isSelected: selectedIdentities.includes(identity.gid_uuid),\n      onSelect: onSelect?.bind(null, identity.gid_uuid),\n      showCheckbox: showSelection,\n      adornment,\n      adornmentCondition,\n      itemDisabled,\n      disabledItemTooltip,\n    }]\n  }, [])\n\n  return (\n    <div className={clsx(classes.contactsList, handleBottomSelectionOverlap && classes.flexGrow)}>\n      <InfiniteScroll\n        isLoading={isLoading}\n        items={listItems}\n        hasNextPage={hasNextPage}\n        loadNextPage={loadNextPage}\n        ListItem={IdentityListItem}\n        listClassName={classes.listElement}\n        itemHeightSize={IDENTITY_LIST_ITEM_SIZE}\n      />\n    </div>\n  )\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/leave_channel_dialog.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/action_card.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/identity_list_item.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/search_input/search_input.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_info_message/list_info_message.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_header/list_header.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/removable_item/removable_item.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/user_avatar/user_avatar.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/use_get_media_data_by_type.ts",["2208","2209","2210","2211","2212"],"/* eslint-disable complexity */\nimport { sendImageToChannel, hasParsedText } from '../../../../utils'\nimport {\n  UseImageMessageCardHooksResponse,\n  GetMediaByTypeParams,\n  MediaAssetParsedData,\n  CommonImageMediaType,\n  ImageMessageContentTemplate,\n  MediaAssetTemplate,\n  ImageState,\n  ImageComponentStates,\n  AssetWithIndex,\n} from './interfaces'\nimport {\n  FileToken,\n  MessageTemplateMedia,\n  MessageTemplateEncryptedMedia,\n  MessageTemplateMediaWithEncryptedText,\n  MediaAsset,\n  EncryptedMediaAsset,\n  MessageEncryptionHeader,\n} from '@globalid/messaging-service-sdk'\nimport { ImageDisplayWrapperProps } from '.'\nimport { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from 'RootType'\nimport { useStyles } from './styles'\nimport { handleFullImageOpen, handleFullEncryptedImageOpen } from '../../../../utils/dialog_utils'\nimport useAsyncEffect from 'use-async-effect'\nimport {\n  getParsedImageMessageContent,\n  getImageMessageTemplateContent,\n  getMediaText,\n  getStylesWrapperProps,\n  retrieveImageFile,\n  getImageComponentState,\n  getImagesCount,\n  getAssetByUuid,\n  getMediaErrorAdornment,\n  getDownloadImageHandler,\n} from './image_media_helpers'\nimport { Dispatch } from '@reduxjs/toolkit'\n\n// eslint-disable-next-line max-lines-per-function\nexport const useGetMediaDataByType = ({\n  message,\n  mediaAssets,\n  isMessageMine,\n  isTextEncrypted,\n  isMediaEncrypted,\n  hasText,\n  replaceMediaAssets,\n  setMediaData,\n  encryptedChannelSecret,\n  renderAvatar,\n}: GetMediaByTypeParams): UseImageMessageCardHooksResponse => {\n\n  const parsedMessageContent: CommonImageMediaType | null = getParsedImageMessageContent(message.content)\n  const parsedMessageContentTemplate: ImageMessageContentTemplate | null = (\n    getImageMessageTemplateContent(message.parsedContent)\n  )\n\n  const encryptionHeader: MessageEncryptionHeader | undefined = isMediaEncrypted\n    ? (<MessageTemplateEncryptedMedia | null> parsedMessageContent)?.encryption_header\n    : undefined\n\n  const dispatch: Dispatch = useDispatch()\n\n  const numberOfImages: number = getImagesCount(parsedMessageContent, parsedMessageContentTemplate)\n\n  const [errorMessage, setErrorMessage] = useState<string>()\n  const [isResending, setIsResending] = useState<boolean>(false)\n  const [text, setText] = useState<string | undefined>()\n\n  const hasError: boolean = errorMessage !== undefined\n\n  const fileToken: FileToken | undefined =\n    useSelector((root: RootState) => root.channels.fileTokens[message.channel_id])\n\n  const classes = useStyles({\n    me: isMessageMine,\n    deleted: message.deleted,\n    resending: isResending,\n    receiving: false,\n    errorAdornment: hasError,\n    numberOfImages,\n    renderAvatar,\n  })\n\n  const handleDownloadBatch = async (): Promise<void> => {\n    await Promise.all(Object.values(mediaAssets).map(async (mediaAssetParsed: MediaAssetParsedData | undefined) => {\n      if (mediaAssetParsed !== undefined && mediaAssetParsed.imageState === ImageState.ERROR) {\n        if (!isMediaEncrypted && mediaAssetParsed.mediaAsset !== undefined) {\n          await handleDownloadImage(() => true, mediaAssetParsed.mediaAsset, mediaAssetParsed.index,)\n        } else if (!isMediaEncrypted && mediaAssetParsed.encryptedMediaAsset !== undefined) {\n          await handleDownloadImage(() => true, mediaAssetParsed.encryptedMediaAsset, mediaAssetParsed.index)\n        }\n      }\n    }))\n  }\n\n  const handleDownloadImage = getDownloadImageHandler({\n    classes,\n    fileToken,\n    setMediaData,\n    isMediaEncrypted,\n    numberOfImages,\n    encryptedChannelSecret,\n    encryptionHeader,\n    text,\n    isMessageMine,\n  })\n\n  // eslint-disable-next-line max-lines-per-function\n  const handleMediaData = async (isMounted: () => boolean): Promise<void> => {\n    const messageText: string | null = await getMediaText(\n      hasText,\n      isTextEncrypted,\n      parsedMessageContent,\n      parsedMessageContentTemplate,\n      encryptedChannelSecret\n    )\n\n    if (hasParsedText(messageText) && isMounted()) {\n      setText(messageText)\n    }\n\n    if (parsedMessageContentTemplate !== null && numberOfImages > 0) {\n      parsedMessageContentTemplate.assets.forEach((asset: MediaAssetTemplate, index: number) => {\n        const imageLink: string = asset.thumbnail\n\n        const styleWrapperProps: ImageDisplayWrapperProps = getStylesWrapperProps({\n          classes,\n          imageLink,\n          hasLoaded: false,\n          hasErrored: false,\n          isLoading: true,\n          isMessageMine,\n          index,\n          numberOfImages,\n          hasText: hasParsedText(messageText),\n        })\n\n        if (isMounted()) {\n          setMediaData({\n            assetUuid: asset.uuid,\n            imageSrc: imageLink,\n            styleWrapperProps,\n            index,\n          })\n        }\n      })\n\n    } else if (parsedMessageContent !== null && numberOfImages > 0 && fileToken !== undefined) {\n      if (isMediaEncrypted) {\n        await Promise.all((<MessageTemplateEncryptedMedia> parsedMessageContent).assets.map(async (\n          asset: EncryptedMediaAsset,\n          index: number\n        ) => {\n          await handleDownloadImage(isMounted, asset, index)\n        }))\n      } else {\n        await Promise.all((\n          <MessageTemplateMedia | MessageTemplateMediaWithEncryptedText> parsedMessageContent\n        ).assets.map(async (asset: MediaAsset, index: number) => {\n          await handleDownloadImage(isMounted, asset, index)\n        }))\n      }\n    }\n  }\n\n  useAsyncEffect(handleMediaData, [message.content, fileToken, text])\n\n  const isSendingError: boolean = message.errored\n\n  const downloadErrorHandling = (assetUuid: string): void => {\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    if (asset !== undefined) {\n      setMediaData({\n        assetUuid,\n        imageState: ImageState.ERROR,\n        index: asset.index,\n      })\n      setErrorMessage(getMediaErrorAdornment(isResending, isSendingError, mediaAssets, assetUuid, ImageState.ERROR))\n    }\n  }\n\n  useEffect(() => {\n    if (isSendingError) {\n      setErrorMessage(getMediaErrorAdornment(isResending, isSendingError, mediaAssets))\n    }\n  }, [isSendingError])\n\n  const downloadLoadedHandling = (assetUuid: string): void => {\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    if (asset !== undefined && !isSendingError) {\n      const styleWrapperProps: ImageDisplayWrapperProps = getStylesWrapperProps({\n        classes,\n        imageLink: asset.imageSrc,\n        hasLoaded: true,\n        hasErrored: false,\n        isLoading: false,\n        isMessageMine,\n        index: asset.index,\n        numberOfImages,\n        hasText: hasParsedText(text),\n      })\n\n      setMediaData({\n        assetUuid,\n        imageState: ImageState.LOADED,\n        styleWrapperProps,\n        index: asset.index,\n      })\n      setErrorMessage(getMediaErrorAdornment(isResending, isSendingError, mediaAssets, assetUuid, ImageState.LOADED))\n    }\n  }\n\n  const resetImageState = (assetUuid: string): void => {\n\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    if (asset !== undefined) {\n      setMediaData({\n        assetUuid,\n        imageState: ImageState.LOADING,\n        index: asset.index,\n      })\n      setErrorMessage(getMediaErrorAdornment(isResending, isSendingError, mediaAssets,assetUuid, ImageState.LOADING))\n    }\n  }\n\n  const onRetry = async (assetUuid: string): Promise<void> => isSendingError\n    ? retrySendImage()\n    : retryDownloadImage(assetUuid)\n\n  const onAdornmentClick = async (): Promise<void> => isSendingError\n    ? retrySendImage()\n    : handleDownloadBatch()\n\n  const retryDownloadImage = async (assetUuid: string): Promise<void> => {\n    if (!isSendingError) {\n      resetImageState(assetUuid)\n\n      const assetWithIndex: AssetWithIndex | undefined = getAssetByUuid(\n        assetUuid,\n        parsedMessageContent,\n        isMediaEncrypted,\n      )\n\n      if (assetWithIndex !== undefined) {\n        await handleDownloadImage(() => true, assetWithIndex.asset, assetWithIndex.index)\n      }\n    }\n  }\n\n  const retrySendImage = async (): Promise<void> => {\n    const assetUuid: string = Object.keys(mediaAssets)[0]\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    if (isSendingError && isMessageMine && message.parsedContent && asset !== undefined) {\n      resetImageState(assetUuid)\n      setIsResending(true)\n      const resendFile: File = retrieveImageFile(message.parsedContent)\n\n      const newAssetUuid: string | undefined = await sendImageToChannel(\n        resendFile,\n        message.channel_id,\n        message.author,\n        {\n          resending: true,\n          uuid: message.uuid,\n        }\n      )\n\n      setIsResending(false)\n\n      if (newAssetUuid === undefined) {\n        setMediaData({\n          assetUuid,\n          imageState: ImageState.ERROR,\n          index: asset.index,\n        })\n        setErrorMessage(getMediaErrorAdornment(isResending, true, mediaAssets, assetUuid, ImageState.ERROR))\n      } else {\n        replaceMediaAssets({ oldAssetUuid: assetUuid, newAssetUuid})\n        setErrorMessage(getMediaErrorAdornment(isResending, false, mediaAssets))\n      }\n    }\n  }\n\n  const handleOnClickFullImageOpen = async (assetUuid: string): Promise<void> => {\n    const asset: MediaAssetParsedData | undefined = mediaAssets[assetUuid]\n\n    if (\n      fileToken\n      && asset !== undefined\n      && isMediaEncrypted\n      && encryptedChannelSecret !== undefined\n      && parsedMessageContent !== null\n    ) {\n      await handleFullEncryptedImageOpen(\n        message,\n        asset.encryptedMediaAsset ?? null,\n        encryptedChannelSecret,\n        (<MessageTemplateEncryptedMedia> parsedMessageContent).encryption_header,\n        fileToken,\n        dispatch\n      )\n    } else if (fileToken && asset !== undefined) {\n      handleFullImageOpen(message, asset.mediaAsset ?? null, fileToken, dispatch)\n    }\n  }\n\n  const imageComponentStates: ImageComponentStates\n    = getImageComponentState(mediaAssets, isSendingError)\n\n  return {\n    classes,\n    adornmentProps: {\n      resending: isResending,\n      onAdornmentClick,\n      errorMessage,\n    },\n    componentProps: {\n      text,\n      containerStyle: classes.mediaMessageContainer,\n      gridStyle: classes.mediaContainer,\n      textStyle: classes.mediaMessageTextContainer,\n      mediaAssets,\n      isSending: isResending,\n      imageComponentStates,\n      isLoadingError: hasError && !isSendingError,\n      onRetrySend: retrySendImage,\n      onRetry,\n      downloadLoadedHandling,\n      downloadErrorHandling,\n      handleOnClickFullImageOpen,\n    },\n  }\n}\n\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/init_video_call/use_init_video_call.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/channel_header/leave_channel/styles.ts",["2213"],"import { makeStyles, Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  dialogWrapper: {\n    width: '327px',\n    height: '182px',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    justifyContent: 'space-between',\n  },\n\n  leaveChannelTitle: {\n    fontFamily: 'Averta-Bold',\n    fontSize: '20px',\n  },\n\n  leaveChannelDescription: {\n    fontFamily: 'Averta-Regular',\n    fontSize: '15px',\n    color: theme.palette.customColors.midGray,\n    width: '280px',\n    placeSelf: 'center',\n  },\n\n  buttonText: {\n    fontFamily: 'Averta-Bold',\n    fontSize: '16px',\n  },\n})\n)\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/action_card/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/identity_list/interfaces.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/search_input/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_info_message/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/icons/video_call_icon.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/list_header/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/removable_item/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/user_avatar/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/utils/dialog_utils.ts",["2214","2215"],"import { FileToken, MediaAsset, EncryptedMediaAsset, MessageEncryptionHeader } from '@globalid/messaging-service-sdk'\nimport { getPrettyTimestamp, getImageFromAws } from '.'\nimport { setFullImageView } from '../store/image_slice'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport { MessageData } from '../store/interfaces'\nimport { retrieveMediumThumbnail, retrieveOriginalMedia, retrieveEncryptedMediumThumbnail, retrieveEncryptedOriginalMedia } from '../components/messages/messenger_chat/chat_message_cards/image_media_helpers'\n\nexport const handleFullImageOpen = (\n  message: MessageData,\n  asset: MediaAsset | null,\n  fileToken: FileToken,\n  dispatcher: Dispatch,\n): void => {\n\n  const timestamp: string = getPrettyTimestamp(message.created_at)\n\n  const imageThumbnail: string | null = retrieveMediumThumbnail(asset)\n  const imageOriginal: string | null = retrieveOriginalMedia(asset)\n\n  if (imageThumbnail === null || imageOriginal === null) {\n    return\n  }\n\n  dispatcher(setFullImageView({\n    title: timestamp,\n    thumbnail: getImageFromAws(imageThumbnail, fileToken),\n    original: getImageFromAws(imageOriginal, fileToken),\n  }))\n}\n\nexport const handleFullEncryptedImageOpen = async (\n  message: MessageData,\n  asset: EncryptedMediaAsset | null,\n  encryptedChannelSecret: string,\n  encryptionHeader: MessageEncryptionHeader,\n  fileToken: FileToken,\n  dispatcher: Dispatch,\n): Promise<void> => {\n\n  const timestamp: string = getPrettyTimestamp(message.created_at)\n\n  const imageThumbnail: string | null = await retrieveEncryptedMediumThumbnail(\n    asset,\n    encryptedChannelSecret,\n    encryptionHeader\n  )\n  const imageOriginal: string | null = await retrieveEncryptedOriginalMedia(\n    asset,\n    encryptedChannelSecret,\n    encryptionHeader\n  )\n\n  if (imageThumbnail === null || imageOriginal === null) {\n    return\n  }\n\n  dispatcher(setFullImageView({\n    title: timestamp,\n    thumbnail: getImageFromAws(imageThumbnail, fileToken),\n    original: getImageFromAws(imageOriginal, fileToken),\n  }))\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message_content.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/tooltip/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/checkbox/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message_buttons_wrapper.tsx",["2216"],"import React from 'react'\nimport { CardViewButtonsType, CardViewMessageButtonsWrapperProps, ButtonTypes } from './interfaces'\nimport { MessageTemplateButtonItem } from '@globalid/messaging-service-sdk'\nimport { CardViewPrimaryButton, CardViewSecondaryButton } from './card_view_message_buttons'\n\nexport const CardViewMessageButtonsWrapper: React.FC<CardViewMessageButtonsWrapperProps> = (\n  { buttons, ...rest }: CardViewMessageButtonsWrapperProps\n) => {\n\n  const cardViewButtonsMap: Map<ButtonTypes, CardViewButtonsType> = new Map([\n    [ButtonTypes.PRIMARY, (button: MessageTemplateButtonItem) => <CardViewPrimaryButton button={button} {...rest} />],\n    [ButtonTypes.SECONDARY, (button: MessageTemplateButtonItem) => <CardViewSecondaryButton button={button} {...rest} />],\n    [ButtonTypes.ADDITIONAL, (button: MessageTemplateButtonItem) => <CardViewPrimaryButton button={button} {...rest} />],\n  ])\n\n  const buttonElements: JSX.Element[] | undefined = buttons?.map(\n    (button: MessageTemplateButtonItem, index: number) => <div key={index}>\n      {cardViewButtonsMap.get(button.mode as ButtonTypes)?.(button, index)}\n    </div>)\n\n  return (<>{buttonElements}</>)\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/use_card_view_message.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/checkbox/checkbox.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/tooltip/tooltip.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/reject_invitation_dialog/index.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/meeting_helpers.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/card_view_message_buttons.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/messages/messenger_chat/chat_message_cards/card_view_message/group_invitation_helpers.tsx",["2217","2218"],"import { ThunkDispatch } from '../../../../../store'\nimport { approveOrRejectInvitation } from '../../../../../store/groups_slice'\nimport { InvitationAction } from '../../../../../store/interfaces'\nimport { MessageTemplateButtonItem } from '@globalid/messaging-service-sdk'\nimport { rejectOrApproveAction } from '../helpers'\nimport { SetStateAction, Dispatch } from 'react'\nimport { getUuidFromURL } from '../../../../../utils'\n\nexport const handleRejectInvitation = async (\n  invitationUuid: string,\n  dispatch: ThunkDispatch,\n  closeRejectInvitationDialog: () => void\n): Promise<void> => {\n  await dispatch(approveOrRejectInvitation({\n    invitationUuid,\n    action: InvitationAction.REJECT,\n  }))\n\n  closeRejectInvitationDialog()\n}\n\nexport const handleInvitationButtonClick = async (\n  button: MessageTemplateButtonItem,\n  setInvitationUuid: Dispatch<SetStateAction<string>>,\n  dispatch: ThunkDispatch,\n  openRejectInvitationDialog: () => void\n): Promise<void> => {\n  const action: InvitationAction = rejectOrApproveAction(button.cta_link)\n  const uuid: string | null = getUuidFromURL(button.cta_link)\n\n  if (uuid === null){\n    return\n  }\n\n  setInvitationUuid(uuid)\n\n  if (action === InvitationAction.APPROVE) {\n    await dispatch(approveOrRejectInvitation({\n      invitationUuid: uuid,\n      action: action,\n    }))\n  } else {\n    openRejectInvitationDialog()\n  }\n}\n","/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/tooltip/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/checkbox/styles.ts",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/reject_invitation_dialog/reject_invitation_dialog.tsx",[],"/home/majster/Documents/globalid/hackaton/hackathon-quiz/src/components/global/dialogs/reject_invitation_dialog/styles.ts",[],{"ruleId":"2219","replacedBy":"2220"},{"ruleId":"2221","replacedBy":"2222"},{"ruleId":"2219","replacedBy":"2220"},{"ruleId":"2221","replacedBy":"2222"},{"ruleId":"2223","severity":2,"message":"2224","line":19,"column":28,"nodeType":"2225","messageId":"2226","endLine":20,"endColumn":1,"fix":"2227"},{"ruleId":"2223","severity":2,"message":"2224","line":29,"column":56,"nodeType":"2225","messageId":"2226","endLine":30,"endColumn":1,"fix":"2228"},{"ruleId":"2229","severity":2,"message":"2230","line":72,"column":17,"nodeType":"2225","messageId":"2231","endLine":72,"endColumn":26,"fix":"2232"},{"ruleId":"2223","severity":2,"message":"2224","line":73,"column":30,"nodeType":"2233","messageId":"2226","endLine":74,"endColumn":1,"fix":"2234"},{"ruleId":"2229","severity":2,"message":"2235","line":87,"column":12,"nodeType":"2225","messageId":"2231","endLine":87,"endColumn":15,"fix":"2236"},{"ruleId":"2223","severity":2,"message":"2224","line":102,"column":40,"nodeType":"2225","messageId":"2226","endLine":103,"endColumn":1,"fix":"2237"},{"ruleId":"2223","severity":2,"message":"2224","line":56,"column":40,"nodeType":"2225","messageId":"2226","endLine":57,"endColumn":1,"fix":"2238"},{"ruleId":"2223","severity":2,"message":"2224","line":212,"column":14,"nodeType":"2225","messageId":"2226","endLine":213,"endColumn":1,"fix":"2239"},{"ruleId":"2223","severity":2,"message":"2224","line":276,"column":56,"nodeType":"2240","messageId":"2226","endLine":277,"endColumn":1,"fix":"2241"},{"ruleId":"2223","severity":2,"message":"2224","line":295,"column":25,"nodeType":"2225","messageId":"2226","endLine":296,"endColumn":1,"fix":"2242"},{"ruleId":"2243","severity":2,"message":"2244","line":2,"column":31,"nodeType":"2225","messageId":"2245","endLine":2,"endColumn":44},{"ruleId":"2243","severity":2,"message":"2246","line":2,"column":46,"nodeType":"2225","messageId":"2245","endLine":2,"endColumn":57},{"ruleId":"2243","severity":2,"message":"2247","line":8,"column":10,"nodeType":"2225","messageId":"2245","endLine":8,"endColumn":25},{"ruleId":"2243","severity":2,"message":"2248","line":8,"column":27,"nodeType":"2225","messageId":"2245","endLine":8,"endColumn":37},{"ruleId":"2243","severity":2,"message":"2249","line":8,"column":39,"nodeType":"2225","messageId":"2245","endLine":8,"endColumn":52},{"ruleId":"2243","severity":2,"message":"2250","line":8,"column":54,"nodeType":"2225","messageId":"2245","endLine":8,"endColumn":71},{"ruleId":"2243","severity":2,"message":"2251","line":40,"column":11,"nodeType":"2225","messageId":"2245","endLine":40,"endColumn":38},{"ruleId":"2243","severity":2,"message":"2252","line":52,"column":11,"nodeType":"2225","messageId":"2245","endLine":52,"endColumn":25},{"ruleId":"2253","severity":2,"message":"2254","line":69,"column":23,"nodeType":"2233","messageId":"2255","endLine":69,"endColumn":28},{"ruleId":"2253","severity":2,"message":"2254","line":117,"column":24,"nodeType":"2233","messageId":"2255","endLine":117,"endColumn":29},{"ruleId":"2223","severity":2,"message":"2224","line":94,"column":31,"nodeType":"2225","messageId":"2226","endLine":95,"endColumn":1,"fix":"2256"},{"ruleId":"2223","severity":2,"message":"2224","line":119,"column":63,"nodeType":"2257","messageId":"2226","endLine":120,"endColumn":1,"fix":"2258"},{"ruleId":"2223","severity":2,"message":"2224","line":144,"column":23,"nodeType":"2225","messageId":"2226","endLine":145,"endColumn":1,"fix":"2259"},{"ruleId":"2223","severity":2,"message":"2224","line":174,"column":32,"nodeType":"2225","messageId":"2226","endLine":175,"endColumn":1,"fix":"2260"},{"ruleId":"2223","severity":2,"message":"2224","line":267,"column":40,"nodeType":"2261","messageId":"2226","endLine":268,"endColumn":1,"fix":"2262"},{"ruleId":"2223","severity":2,"message":"2224","line":275,"column":9,"nodeType":"2257","messageId":"2226","endLine":276,"endColumn":1,"fix":"2263"},{"ruleId":"2223","severity":2,"message":"2224","line":121,"column":28,"nodeType":"2225","messageId":"2226","endLine":122,"endColumn":1,"fix":"2264"},{"ruleId":"2223","severity":2,"message":"2224","line":142,"column":19,"nodeType":"2225","messageId":"2226","endLine":143,"endColumn":1,"fix":"2265"},{"ruleId":"2223","severity":2,"message":"2224","line":193,"column":31,"nodeType":"2225","messageId":"2226","endLine":194,"endColumn":1,"fix":"2266"},{"ruleId":"2223","severity":2,"message":"2224","line":306,"column":28,"nodeType":"2225","messageId":"2226","endLine":307,"endColumn":1,"fix":"2267"},{"ruleId":"2268","severity":2,"message":"2269","line":12,"column":136,"nodeType":"2270","messageId":"2271","endLine":12,"endColumn":156},{"ruleId":"2268","severity":2,"message":"2269","line":13,"column":132,"nodeType":"2270","messageId":"2271","endLine":13,"endColumn":152},{"ruleId":"2219","replacedBy":"2220"},{"ruleId":"2221","replacedBy":"2222"},{"ruleId":"2223","severity":2,"message":"2224","line":204,"column":47,"nodeType":"2272","messageId":"2226","endLine":205,"endColumn":1,"fix":"2273"},{"ruleId":"2223","severity":2,"message":"2224","line":226,"column":33,"nodeType":"2225","messageId":"2226","endLine":227,"endColumn":1,"fix":"2274"},{"ruleId":"2223","severity":2,"message":"2224","line":62,"column":4,"nodeType":"2233","messageId":"2226","endLine":63,"endColumn":1,"fix":"2275"},{"ruleId":"2223","severity":2,"message":"2224","line":84,"column":4,"nodeType":"2233","messageId":"2226","endLine":85,"endColumn":1,"fix":"2276"},{"ruleId":"2223","severity":2,"message":"2224","line":112,"column":4,"nodeType":"2272","messageId":"2226","endLine":113,"endColumn":1,"fix":"2277"},{"ruleId":"2223","severity":2,"message":"2224","line":121,"column":58,"nodeType":"2225","messageId":"2226","endLine":122,"endColumn":1,"fix":"2278"},{"ruleId":"2223","severity":2,"message":"2224","line":129,"column":64,"nodeType":"2225","messageId":"2226","endLine":130,"endColumn":1,"fix":"2279"},{"ruleId":"2223","severity":2,"message":"2224","line":137,"column":64,"nodeType":"2225","messageId":"2226","endLine":138,"endColumn":1,"fix":"2280"},{"ruleId":"2223","severity":2,"message":"2224","line":145,"column":103,"nodeType":"2225","messageId":"2226","endLine":146,"endColumn":1,"fix":"2281"},{"ruleId":"2223","severity":2,"message":"2224","line":159,"column":70,"nodeType":"2225","messageId":"2226","endLine":160,"endColumn":1,"fix":"2282"},{"ruleId":"2223","severity":2,"message":"2224","line":61,"column":78,"nodeType":"2283","messageId":"2226","endLine":62,"endColumn":1,"fix":"2284"},{"ruleId":"2223","severity":2,"message":"2224","line":223,"column":53,"nodeType":"2225","messageId":"2226","endLine":224,"endColumn":1,"fix":"2285"},{"ruleId":"2223","severity":2,"message":"2224","line":339,"column":34,"nodeType":"2225","messageId":"2226","endLine":340,"endColumn":1,"fix":"2286"},{"ruleId":"2223","severity":2,"message":"2224","line":19,"column":51,"nodeType":"2287","messageId":"2226","endLine":20,"endColumn":1,"fix":"2288"},{"ruleId":"2223","severity":2,"message":"2224","line":98,"column":13,"nodeType":"2225","messageId":"2226","endLine":99,"endColumn":1,"fix":"2289"},{"ruleId":"2223","severity":2,"message":"2224","line":156,"column":29,"nodeType":"2225","messageId":"2226","endLine":157,"endColumn":1,"fix":"2290"},{"ruleId":"2243","severity":2,"message":"2291","line":1,"column":46,"nodeType":"2225","messageId":"2245","endLine":1,"endColumn":77},{"ruleId":"2243","severity":2,"message":"2292","line":2,"column":63,"nodeType":"2225","messageId":"2245","endLine":2,"endColumn":75},{"ruleId":"2243","severity":2,"message":"2293","line":11,"column":55,"nodeType":"2225","messageId":"2245","endLine":11,"endColumn":69},{"ruleId":"2223","severity":2,"message":"2224","line":37,"column":4,"nodeType":"2233","messageId":"2226","endLine":38,"endColumn":1,"fix":"2294"},{"ruleId":"2223","severity":2,"message":"2224","line":54,"column":4,"nodeType":"2272","messageId":"2226","endLine":55,"endColumn":1,"fix":"2295"},{"ruleId":"2223","severity":2,"message":"2224","line":73,"column":4,"nodeType":"2272","messageId":"2226","endLine":74,"endColumn":1,"fix":"2296"},{"ruleId":"2223","severity":2,"message":"2224","line":113,"column":4,"nodeType":"2272","messageId":"2226","endLine":114,"endColumn":1,"fix":"2297"},{"ruleId":"2223","severity":2,"message":"2224","line":110,"column":59,"nodeType":"2233","messageId":"2226","endLine":111,"endColumn":1,"fix":"2298"},{"ruleId":"2223","severity":2,"message":"2224","line":172,"column":4,"nodeType":"2272","messageId":"2226","endLine":173,"endColumn":1,"fix":"2299"},{"ruleId":"2223","severity":2,"message":"2224","line":210,"column":4,"nodeType":"2233","messageId":"2226","endLine":211,"endColumn":1,"fix":"2300"},{"ruleId":"2223","severity":2,"message":"2224","line":231,"column":40,"nodeType":"2225","messageId":"2226","endLine":232,"endColumn":1,"fix":"2301"},{"ruleId":"2223","severity":2,"message":"2224","line":250,"column":27,"nodeType":"2272","messageId":"2226","endLine":251,"endColumn":1,"fix":"2302"},{"ruleId":"2223","severity":2,"message":"2224","line":263,"column":4,"nodeType":"2272","messageId":"2226","endLine":264,"endColumn":1,"fix":"2303"},{"ruleId":"2223","severity":2,"message":"2224","line":271,"column":29,"nodeType":"2304","messageId":"2226","endLine":272,"endColumn":1,"fix":"2305"},{"ruleId":"2223","severity":2,"message":"2224","line":303,"column":57,"nodeType":"2233","messageId":"2226","endLine":304,"endColumn":1,"fix":"2306"},{"ruleId":"2223","severity":2,"message":"2224","line":311,"column":6,"nodeType":"2272","messageId":"2226","endLine":312,"endColumn":1,"fix":"2307"},{"ruleId":"2223","severity":2,"message":"2224","line":357,"column":4,"nodeType":"2272","messageId":"2226","endLine":358,"endColumn":1,"fix":"2308"},{"ruleId":"2223","severity":2,"message":"2224","line":362,"column":50,"nodeType":"2233","messageId":"2226","endLine":363,"endColumn":1,"fix":"2309"},{"ruleId":"2223","severity":2,"message":"2224","line":368,"column":64,"nodeType":"2304","messageId":"2226","endLine":369,"endColumn":1,"fix":"2310"},{"ruleId":"2223","severity":2,"message":"2224","line":372,"column":75,"nodeType":"2233","messageId":"2226","endLine":373,"endColumn":1,"fix":"2311"},{"ruleId":"2223","severity":2,"message":"2224","line":373,"column":8,"nodeType":"2257","messageId":"2226","endLine":374,"endColumn":1,"fix":"2312"},{"ruleId":"2223","severity":2,"message":"2224","line":374,"column":6,"nodeType":"2233","messageId":"2226","endLine":375,"endColumn":1,"fix":"2313"},{"ruleId":"2223","severity":2,"message":"2224","line":380,"column":70,"nodeType":"2233","messageId":"2226","endLine":381,"endColumn":1,"fix":"2314"},{"ruleId":"2223","severity":2,"message":"2224","line":388,"column":31,"nodeType":"2261","messageId":"2226","endLine":389,"endColumn":1,"fix":"2315"},{"ruleId":"2223","severity":2,"message":"2224","line":392,"column":4,"nodeType":"2233","messageId":"2226","endLine":393,"endColumn":1,"fix":"2316"},{"ruleId":"2223","severity":2,"message":"2224","line":489,"column":27,"nodeType":"2225","messageId":"2226","endLine":490,"endColumn":1,"fix":"2317"},{"ruleId":"2223","severity":2,"message":"2224","line":495,"column":94,"nodeType":"2225","messageId":"2226","endLine":496,"endColumn":1,"fix":"2318"},{"ruleId":"2223","severity":2,"message":"2224","line":514,"column":90,"nodeType":"2225","messageId":"2226","endLine":515,"endColumn":1,"fix":"2319"},{"ruleId":"2223","severity":2,"message":"2224","line":574,"column":100,"nodeType":"2225","messageId":"2226","endLine":575,"endColumn":1,"fix":"2320"},{"ruleId":"2223","severity":2,"message":"2224","line":583,"column":96,"nodeType":"2225","messageId":"2226","endLine":584,"endColumn":1,"fix":"2321"},{"ruleId":"2223","severity":2,"message":"2224","line":591,"column":67,"nodeType":"2225","messageId":"2226","endLine":592,"endColumn":1,"fix":"2322"},{"ruleId":"2223","severity":2,"message":"2224","line":63,"column":27,"nodeType":"2323","messageId":"2226","endLine":64,"endColumn":1,"fix":"2324"},{"ruleId":"2223","severity":2,"message":"2224","line":83,"column":16,"nodeType":"2323","messageId":"2226","endLine":84,"endColumn":1,"fix":"2325"},{"ruleId":"2223","severity":2,"message":"2224","line":104,"column":16,"nodeType":"2323","messageId":"2226","endLine":105,"endColumn":1,"fix":"2326"},{"ruleId":"2223","severity":2,"message":"2224","line":112,"column":30,"nodeType":"2257","messageId":"2226","endLine":113,"endColumn":1,"fix":"2327"},{"ruleId":"2223","severity":2,"message":"2224","line":13,"column":20,"nodeType":"2225","messageId":"2226","endLine":14,"endColumn":1,"fix":"2328"},{"ruleId":"2223","severity":2,"message":"2224","line":50,"column":26,"nodeType":"2225","messageId":"2226","endLine":51,"endColumn":1,"fix":"2329"},{"ruleId":"2223","severity":2,"message":"2224","line":84,"column":3,"nodeType":"2233","messageId":"2226","endLine":85,"endColumn":1,"fix":"2330"},{"ruleId":"2223","severity":2,"message":"2224","line":34,"column":66,"nodeType":"2225","messageId":"2226","endLine":35,"endColumn":1,"fix":"2331"},{"ruleId":"2223","severity":2,"message":"2224","line":50,"column":33,"nodeType":"2225","messageId":"2226","endLine":51,"endColumn":1,"fix":"2332"},{"ruleId":"2223","severity":2,"message":"2224","line":35,"column":31,"nodeType":"2225","messageId":"2226","endLine":36,"endColumn":1,"fix":"2333"},{"ruleId":"2223","severity":2,"message":"2224","line":43,"column":32,"nodeType":"2225","messageId":"2226","endLine":44,"endColumn":1,"fix":"2334"},{"ruleId":"2223","severity":2,"message":"2224","line":62,"column":24,"nodeType":"2272","messageId":"2226","endLine":63,"endColumn":1,"fix":"2335"},{"ruleId":"2223","severity":2,"message":"2224","line":69,"column":26,"nodeType":"2225","messageId":"2226","endLine":70,"endColumn":1,"fix":"2336"},{"ruleId":"2223","severity":2,"message":"2224","line":90,"column":29,"nodeType":"2225","messageId":"2226","endLine":91,"endColumn":1,"fix":"2337"},{"ruleId":"2223","severity":2,"message":"2224","line":54,"column":83,"nodeType":"2233","messageId":"2226","endLine":55,"endColumn":1,"fix":"2338"},{"ruleId":"2223","severity":2,"message":"2224","line":31,"column":22,"nodeType":"2225","messageId":"2226","endLine":32,"endColumn":1,"fix":"2339"},{"ruleId":"2223","severity":2,"message":"2224","line":38,"column":55,"nodeType":"2233","messageId":"2226","endLine":39,"endColumn":1,"fix":"2340"},{"ruleId":"2223","severity":2,"message":"2224","line":41,"column":68,"nodeType":"2233","messageId":"2226","endLine":42,"endColumn":1,"fix":"2341"},{"ruleId":"2223","severity":2,"message":"2224","line":44,"column":68,"nodeType":"2233","messageId":"2226","endLine":45,"endColumn":1,"fix":"2342"},{"ruleId":"2223","severity":2,"message":"2224","line":81,"column":34,"nodeType":"2225","messageId":"2226","endLine":82,"endColumn":1,"fix":"2343"},{"ruleId":"2223","severity":2,"message":"2224","line":117,"column":35,"nodeType":"2225","messageId":"2226","endLine":118,"endColumn":1,"fix":"2344"},{"ruleId":"2223","severity":2,"message":"2224","line":140,"column":34,"nodeType":"2225","messageId":"2226","endLine":141,"endColumn":1,"fix":"2345"},{"ruleId":"2223","severity":2,"message":"2224","line":23,"column":82,"nodeType":"2233","messageId":"2226","endLine":24,"endColumn":1,"fix":"2346"},{"ruleId":"2223","severity":2,"message":"2224","line":7,"column":66,"nodeType":"2287","messageId":"2226","endLine":8,"endColumn":1,"fix":"2347"},{"ruleId":"2223","severity":2,"message":"2224","line":15,"column":19,"nodeType":"2225","messageId":"2226","endLine":16,"endColumn":1,"fix":"2348"},{"ruleId":"2223","severity":2,"message":"2224","line":19,"column":75,"nodeType":"2287","messageId":"2226","endLine":20,"endColumn":1,"fix":"2349"},{"ruleId":"2223","severity":2,"message":"2224","line":36,"column":44,"nodeType":"2287","messageId":"2226","endLine":37,"endColumn":1,"fix":"2350"},{"ruleId":"2223","severity":2,"message":"2224","line":44,"column":47,"nodeType":"2287","messageId":"2226","endLine":45,"endColumn":1,"fix":"2351"},{"ruleId":"2223","severity":2,"message":"2224","line":52,"column":48,"nodeType":"2287","messageId":"2226","endLine":53,"endColumn":1,"fix":"2352"},{"ruleId":"2223","severity":2,"message":"2224","line":197,"column":34,"nodeType":"2225","messageId":"2226","endLine":198,"endColumn":1,"fix":"2353"},{"ruleId":"2223","severity":2,"message":"2224","line":27,"column":27,"nodeType":"2304","messageId":"2226","endLine":28,"endColumn":1,"fix":"2354"},{"ruleId":"2229","severity":2,"message":"2355","line":44,"column":14,"nodeType":"2225","messageId":"2231","endLine":44,"endColumn":17,"fix":"2356"},{"ruleId":"2223","severity":2,"message":"2224","line":64,"column":19,"nodeType":"2304","messageId":"2226","endLine":65,"endColumn":1,"fix":"2357"},{"ruleId":"2223","severity":2,"message":"2224","line":71,"column":4,"nodeType":"2272","messageId":"2226","endLine":72,"endColumn":1,"fix":"2358"},{"ruleId":"2223","severity":2,"message":"2224","line":78,"column":17,"nodeType":"2304","messageId":"2226","endLine":79,"endColumn":1,"fix":"2359"},{"ruleId":"2229","severity":2,"message":"2355","line":89,"column":14,"nodeType":"2225","messageId":"2231","endLine":89,"endColumn":17,"fix":"2360"},{"ruleId":"2223","severity":2,"message":"2224","line":101,"column":19,"nodeType":"2304","messageId":"2226","endLine":102,"endColumn":1,"fix":"2361"},{"ruleId":"2223","severity":2,"message":"2224","line":108,"column":4,"nodeType":"2272","messageId":"2226","endLine":109,"endColumn":1,"fix":"2362"},{"ruleId":"2223","severity":2,"message":"2224","line":125,"column":68,"nodeType":"2225","messageId":"2226","endLine":126,"endColumn":1,"fix":"2363"},{"ruleId":"2223","severity":2,"message":"2224","line":138,"column":50,"nodeType":"2225","messageId":"2226","endLine":139,"endColumn":1,"fix":"2364"},{"ruleId":"2223","severity":2,"message":"2224","line":146,"column":65,"nodeType":"2225","messageId":"2226","endLine":147,"endColumn":1,"fix":"2365"},{"ruleId":"2223","severity":2,"message":"2224","line":159,"column":47,"nodeType":"2225","messageId":"2226","endLine":160,"endColumn":1,"fix":"2366"},{"ruleId":"2223","severity":2,"message":"2224","line":77,"column":4,"nodeType":"2272","messageId":"2226","endLine":78,"endColumn":1,"fix":"2367"},{"ruleId":"2223","severity":2,"message":"2224","line":175,"column":69,"nodeType":"2225","messageId":"2226","endLine":176,"endColumn":1,"fix":"2368"},{"ruleId":"2223","severity":2,"message":"2224","line":48,"column":8,"nodeType":"2272","messageId":"2226","endLine":49,"endColumn":1,"fix":"2369"},{"ruleId":"2223","severity":2,"message":"2224","line":36,"column":37,"nodeType":"2225","messageId":"2226","endLine":37,"endColumn":1,"fix":"2370"},{"ruleId":"2229","severity":2,"message":"2355","line":122,"column":12,"nodeType":"2225","messageId":"2231","endLine":122,"endColumn":15,"fix":"2371"},{"ruleId":"2223","severity":2,"message":"2224","line":129,"column":20,"nodeType":"2225","messageId":"2226","endLine":130,"endColumn":1,"fix":"2372"},{"ruleId":"2223","severity":2,"message":"2224","line":138,"column":20,"nodeType":"2225","messageId":"2226","endLine":139,"endColumn":1,"fix":"2373"},{"ruleId":"2223","severity":2,"message":"2224","line":129,"column":44,"nodeType":"2287","messageId":"2226","endLine":130,"endColumn":1,"fix":"2374"},{"ruleId":"2223","severity":2,"message":"2224","line":145,"column":24,"nodeType":"2272","messageId":"2226","endLine":146,"endColumn":1,"fix":"2375"},{"ruleId":"2223","severity":2,"message":"2224","line":27,"column":6,"nodeType":"2272","messageId":"2226","endLine":28,"endColumn":1,"fix":"2376"},{"ruleId":"2223","severity":2,"message":"2224","line":43,"column":6,"nodeType":"2272","messageId":"2226","endLine":44,"endColumn":1,"fix":"2377"},{"ruleId":"2223","severity":2,"message":"2224","line":61,"column":6,"nodeType":"2272","messageId":"2226","endLine":62,"endColumn":1,"fix":"2378"},{"ruleId":"2223","severity":2,"message":"2224","line":81,"column":6,"nodeType":"2272","messageId":"2226","endLine":82,"endColumn":1,"fix":"2379"},{"ruleId":"2223","severity":2,"message":"2224","line":76,"column":34,"nodeType":"2225","messageId":"2226","endLine":77,"endColumn":1,"fix":"2380"},{"ruleId":"2223","severity":2,"message":"2224","line":104,"column":53,"nodeType":"2257","messageId":"2226","endLine":105,"endColumn":1,"fix":"2381"},{"ruleId":"2223","severity":2,"message":"2224","line":128,"column":27,"nodeType":"2304","messageId":"2226","endLine":129,"endColumn":1,"fix":"2382"},{"ruleId":"2223","severity":2,"message":"2224","line":139,"column":25,"nodeType":"2272","messageId":"2226","endLine":140,"endColumn":1,"fix":"2383"},{"ruleId":"2223","severity":2,"message":"2224","line":150,"column":16,"nodeType":"2225","messageId":"2226","endLine":151,"endColumn":1,"fix":"2384"},{"ruleId":"2223","severity":2,"message":"2224","line":156,"column":85,"nodeType":"2257","messageId":"2226","endLine":157,"endColumn":1,"fix":"2385"},{"ruleId":"2223","severity":2,"message":"2224","line":175,"column":4,"nodeType":"2272","messageId":"2226","endLine":176,"endColumn":1,"fix":"2386"},{"ruleId":"2223","severity":2,"message":"2224","line":185,"column":28,"nodeType":"2261","messageId":"2226","endLine":186,"endColumn":1,"fix":"2387"},{"ruleId":"2223","severity":2,"message":"2224","line":190,"column":120,"nodeType":"2257","messageId":"2226","endLine":191,"endColumn":1,"fix":"2388"},{"ruleId":"2223","severity":2,"message":"2224","line":244,"column":31,"nodeType":"2225","messageId":"2226","endLine":245,"endColumn":1,"fix":"2389"},{"ruleId":"2223","severity":2,"message":"2224","line":257,"column":24,"nodeType":"2261","messageId":"2226","endLine":258,"endColumn":1,"fix":"2390"},{"ruleId":"2223","severity":2,"message":"2224","line":302,"column":4,"nodeType":"2272","messageId":"2226","endLine":303,"endColumn":1,"fix":"2391"},{"ruleId":"2223","severity":2,"message":"2224","line":353,"column":10,"nodeType":"2272","messageId":"2226","endLine":354,"endColumn":1,"fix":"2392"},{"ruleId":"2223","severity":2,"message":"2224","line":386,"column":31,"nodeType":"2261","messageId":"2226","endLine":387,"endColumn":1,"fix":"2393"},{"ruleId":"2223","severity":2,"message":"2224","line":403,"column":82,"nodeType":"2225","messageId":"2226","endLine":404,"endColumn":1,"fix":"2394"},{"ruleId":"2223","severity":2,"message":"2224","line":411,"column":34,"nodeType":"2261","messageId":"2226","endLine":412,"endColumn":1,"fix":"2395"},{"ruleId":"2223","severity":2,"message":"2224","line":435,"column":52,"nodeType":"2225","messageId":"2226","endLine":436,"endColumn":1,"fix":"2396"},{"ruleId":"2223","severity":2,"message":"2224","line":442,"column":25,"nodeType":"2261","messageId":"2226","endLine":443,"endColumn":1,"fix":"2397"},{"ruleId":"2223","severity":2,"message":"2224","line":449,"column":25,"nodeType":"2261","messageId":"2226","endLine":450,"endColumn":1,"fix":"2398"},{"ruleId":"2223","severity":2,"message":"2224","line":455,"column":73,"nodeType":"2225","messageId":"2226","endLine":456,"endColumn":1,"fix":"2399"},{"ruleId":"2223","severity":2,"message":"2224","line":462,"column":25,"nodeType":"2261","messageId":"2226","endLine":463,"endColumn":1,"fix":"2400"},{"ruleId":"2223","severity":2,"message":"2224","line":469,"column":25,"nodeType":"2261","messageId":"2226","endLine":470,"endColumn":1,"fix":"2401"},{"ruleId":"2223","severity":2,"message":"2224","line":475,"column":106,"nodeType":"2225","messageId":"2226","endLine":476,"endColumn":1,"fix":"2402"},{"ruleId":"2223","severity":2,"message":"2224","line":483,"column":34,"nodeType":"2261","messageId":"2226","endLine":484,"endColumn":1,"fix":"2403"},{"ruleId":"2223","severity":2,"message":"2224","line":68,"column":40,"nodeType":"2225","messageId":"2226","endLine":69,"endColumn":1,"fix":"2404"},{"ruleId":"2223","severity":2,"message":"2224","line":14,"column":4,"nodeType":"2233","messageId":"2226","endLine":15,"endColumn":1,"fix":"2405"},{"ruleId":"2223","severity":2,"message":"2224","line":18,"column":35,"nodeType":"2225","messageId":"2226","endLine":19,"endColumn":1,"fix":"2406"},{"ruleId":"2223","severity":2,"message":"2224","line":24,"column":44,"nodeType":"2225","messageId":"2226","endLine":25,"endColumn":1,"fix":"2407"},{"ruleId":"2223","severity":2,"message":"2224","line":14,"column":4,"nodeType":"2233","messageId":"2226","endLine":15,"endColumn":1,"fix":"2408"},{"ruleId":"2223","severity":2,"message":"2224","line":18,"column":35,"nodeType":"2225","messageId":"2226","endLine":19,"endColumn":1,"fix":"2409"},{"ruleId":"2223","severity":2,"message":"2224","line":24,"column":44,"nodeType":"2225","messageId":"2226","endLine":25,"endColumn":1,"fix":"2410"},{"ruleId":"2223","severity":2,"message":"2224","line":132,"column":53,"nodeType":"2411","messageId":"2226","endLine":133,"endColumn":1,"fix":"2412"},{"ruleId":"2229","severity":2,"message":"2355","line":147,"column":12,"nodeType":"2225","messageId":"2231","endLine":147,"endColumn":15,"fix":"2413"},{"ruleId":"2229","severity":2,"message":"2355","line":160,"column":12,"nodeType":"2225","messageId":"2231","endLine":160,"endColumn":15,"fix":"2414"},{"ruleId":"2223","severity":2,"message":"2224","line":211,"column":67,"nodeType":"2225","messageId":"2226","endLine":212,"endColumn":1,"fix":"2415"},{"ruleId":"2223","severity":2,"message":"2224","line":350,"column":26,"nodeType":"2225","messageId":"2226","endLine":351,"endColumn":1,"fix":"2416"},{"ruleId":"2223","severity":2,"message":"2224","line":405,"column":27,"nodeType":"2225","messageId":"2226","endLine":406,"endColumn":1,"fix":"2417"},{"ruleId":"2223","severity":2,"message":"2224","line":422,"column":6,"nodeType":"2233","messageId":"2226","endLine":423,"endColumn":1,"fix":"2418"},{"ruleId":"2223","severity":2,"message":"2224","line":56,"column":7,"nodeType":"2233","messageId":"2226","endLine":57,"endColumn":1,"fix":"2419"},{"ruleId":"2223","severity":2,"message":"2224","line":61,"column":20,"nodeType":"2225","messageId":"2226","endLine":62,"endColumn":1,"fix":"2420"},{"ruleId":"2223","severity":2,"message":"2224","line":40,"column":34,"nodeType":"2225","messageId":"2226","endLine":41,"endColumn":1,"fix":"2421"},{"ruleId":"2223","severity":2,"message":"2224","line":60,"column":34,"nodeType":"2225","messageId":"2226","endLine":61,"endColumn":1,"fix":"2422"},{"ruleId":"2223","severity":2,"message":"2224","line":88,"column":34,"nodeType":"2225","messageId":"2226","endLine":89,"endColumn":1,"fix":"2423"},{"ruleId":"2223","severity":2,"message":"2224","line":137,"column":74,"nodeType":"2304","messageId":"2226","endLine":138,"endColumn":1,"fix":"2424"},{"ruleId":"2223","severity":2,"message":"2224","line":89,"column":80,"nodeType":"2257","messageId":"2226","endLine":90,"endColumn":1,"fix":"2425"},{"ruleId":"2223","severity":2,"message":"2224","line":45,"column":18,"nodeType":"2225","messageId":"2226","endLine":46,"endColumn":1,"fix":"2426"},{"ruleId":"2223","severity":2,"message":"2224","line":155,"column":13,"nodeType":"2225","messageId":"2226","endLine":156,"endColumn":1,"fix":"2427"},{"ruleId":"2223","severity":2,"message":"2224","line":190,"column":4,"nodeType":"2272","messageId":"2226","endLine":191,"endColumn":1,"fix":"2428"},{"ruleId":"2223","severity":2,"message":"2224","line":197,"column":13,"nodeType":"2225","messageId":"2226","endLine":198,"endColumn":1,"fix":"2429"},{"ruleId":"2223","severity":2,"message":"2224","line":211,"column":4,"nodeType":"2272","messageId":"2226","endLine":212,"endColumn":1,"fix":"2430"},{"ruleId":"2223","severity":2,"message":"2224","line":218,"column":17,"nodeType":"2304","messageId":"2226","endLine":219,"endColumn":1,"fix":"2431"},{"ruleId":"2223","severity":2,"message":"2224","line":245,"column":4,"nodeType":"2272","messageId":"2226","endLine":246,"endColumn":1,"fix":"2432"},{"ruleId":"2223","severity":2,"message":"2224","line":252,"column":13,"nodeType":"2225","messageId":"2226","endLine":253,"endColumn":1,"fix":"2433"},{"ruleId":"2223","severity":2,"message":"2224","line":270,"column":11,"nodeType":"2225","messageId":"2226","endLine":271,"endColumn":1,"fix":"2434"},{"ruleId":"2223","severity":2,"message":"2224","line":284,"column":4,"nodeType":"2272","messageId":"2226","endLine":285,"endColumn":1,"fix":"2435"},{"ruleId":"2223","severity":2,"message":"2224","line":291,"column":13,"nodeType":"2225","messageId":"2226","endLine":292,"endColumn":1,"fix":"2436"},{"ruleId":"2223","severity":2,"message":"2224","line":305,"column":4,"nodeType":"2272","messageId":"2226","endLine":306,"endColumn":1,"fix":"2437"},{"ruleId":"2223","severity":2,"message":"2224","line":314,"column":13,"nodeType":"2225","messageId":"2226","endLine":315,"endColumn":1,"fix":"2438"},{"ruleId":"2223","severity":2,"message":"2224","line":329,"column":4,"nodeType":"2272","messageId":"2226","endLine":330,"endColumn":1,"fix":"2439"},{"ruleId":"2223","severity":2,"message":"2224","line":356,"column":13,"nodeType":"2225","messageId":"2226","endLine":357,"endColumn":1,"fix":"2440"},{"ruleId":"2223","severity":2,"message":"2224","line":389,"column":4,"nodeType":"2272","messageId":"2226","endLine":390,"endColumn":1,"fix":"2441"},{"ruleId":"2223","severity":2,"message":"2224","line":396,"column":13,"nodeType":"2225","messageId":"2226","endLine":397,"endColumn":1,"fix":"2442"},{"ruleId":"2223","severity":2,"message":"2224","line":417,"column":4,"nodeType":"2272","messageId":"2226","endLine":418,"endColumn":1,"fix":"2443"},{"ruleId":"2223","severity":2,"message":"2224","line":431,"column":93,"nodeType":"2225","messageId":"2226","endLine":432,"endColumn":1,"fix":"2444"},{"ruleId":"2223","severity":2,"message":"2224","line":501,"column":13,"nodeType":"2225","messageId":"2226","endLine":502,"endColumn":1,"fix":"2445"},{"ruleId":"2223","severity":2,"message":"2224","line":512,"column":63,"nodeType":"2287","messageId":"2226","endLine":513,"endColumn":1,"fix":"2446"},{"ruleId":"2223","severity":2,"message":"2224","line":523,"column":4,"nodeType":"2233","messageId":"2226","endLine":524,"endColumn":1,"fix":"2447"},{"ruleId":"2223","severity":2,"message":"2224","line":530,"column":13,"nodeType":"2225","messageId":"2226","endLine":531,"endColumn":1,"fix":"2448"},{"ruleId":"2223","severity":2,"message":"2224","line":542,"column":28,"nodeType":"2287","messageId":"2226","endLine":543,"endColumn":1,"fix":"2449"},{"ruleId":"2223","severity":2,"message":"2224","line":553,"column":4,"nodeType":"2233","messageId":"2226","endLine":554,"endColumn":1,"fix":"2450"},{"ruleId":"2223","severity":2,"message":"2224","line":560,"column":13,"nodeType":"2225","messageId":"2226","endLine":561,"endColumn":1,"fix":"2451"},{"ruleId":"2223","severity":2,"message":"2224","line":587,"column":4,"nodeType":"2272","messageId":"2226","endLine":588,"endColumn":1,"fix":"2452"},{"ruleId":"2223","severity":2,"message":"2224","line":594,"column":13,"nodeType":"2225","messageId":"2226","endLine":595,"endColumn":1,"fix":"2453"},{"ruleId":"2223","severity":2,"message":"2224","line":620,"column":4,"nodeType":"2272","messageId":"2226","endLine":621,"endColumn":1,"fix":"2454"},{"ruleId":"2223","severity":2,"message":"2224","line":693,"column":13,"nodeType":"2225","messageId":"2226","endLine":694,"endColumn":1,"fix":"2455"},{"ruleId":"2223","severity":2,"message":"2224","line":720,"column":4,"nodeType":"2272","messageId":"2226","endLine":721,"endColumn":1,"fix":"2456"},{"ruleId":"2223","severity":2,"message":"2224","line":726,"column":20,"nodeType":"2225","messageId":"2226","endLine":727,"endColumn":1,"fix":"2457"},{"ruleId":"2223","severity":2,"message":"2224","line":768,"column":43,"nodeType":"2261","messageId":"2226","endLine":769,"endColumn":1,"fix":"2458"},{"ruleId":"2223","severity":2,"message":"2224","line":773,"column":4,"nodeType":"2233","messageId":"2226","endLine":774,"endColumn":1,"fix":"2459"},{"ruleId":"2223","severity":2,"message":"2224","line":780,"column":13,"nodeType":"2225","messageId":"2226","endLine":781,"endColumn":1,"fix":"2460"},{"ruleId":"2223","severity":2,"message":"2224","line":789,"column":63,"nodeType":"2233","messageId":"2226","endLine":790,"endColumn":1,"fix":"2461"},{"ruleId":"2223","severity":2,"message":"2224","line":807,"column":4,"nodeType":"2272","messageId":"2226","endLine":808,"endColumn":1,"fix":"2462"},{"ruleId":"2223","severity":2,"message":"2224","line":814,"column":13,"nodeType":"2225","messageId":"2226","endLine":815,"endColumn":1,"fix":"2463"},{"ruleId":"2223","severity":2,"message":"2224","line":827,"column":11,"nodeType":"2233","messageId":"2226","endLine":828,"endColumn":1,"fix":"2464"},{"ruleId":"2223","severity":2,"message":"2224","line":861,"column":4,"nodeType":"2272","messageId":"2226","endLine":862,"endColumn":1,"fix":"2465"},{"ruleId":"2223","severity":2,"message":"2224","line":868,"column":17,"nodeType":"2304","messageId":"2226","endLine":869,"endColumn":1,"fix":"2466"},{"ruleId":"2223","severity":2,"message":"2224","line":900,"column":4,"nodeType":"2272","messageId":"2226","endLine":901,"endColumn":1,"fix":"2467"},{"ruleId":"2223","severity":2,"message":"2224","line":907,"column":17,"nodeType":"2304","messageId":"2226","endLine":908,"endColumn":1,"fix":"2468"},{"ruleId":"2223","severity":2,"message":"2224","line":939,"column":4,"nodeType":"2272","messageId":"2226","endLine":940,"endColumn":1,"fix":"2469"},{"ruleId":"2223","severity":2,"message":"2224","line":946,"column":13,"nodeType":"2225","messageId":"2226","endLine":947,"endColumn":1,"fix":"2470"},{"ruleId":"2223","severity":2,"message":"2224","line":976,"column":4,"nodeType":"2272","messageId":"2226","endLine":977,"endColumn":1,"fix":"2471"},{"ruleId":"2223","severity":2,"message":"2224","line":989,"column":40,"nodeType":"2225","messageId":"2226","endLine":990,"endColumn":1,"fix":"2472"},{"ruleId":"2223","severity":2,"message":"2224","line":1000,"column":32,"nodeType":"2225","messageId":"2226","endLine":1001,"endColumn":1,"fix":"2473"},{"ruleId":"2223","severity":2,"message":"2224","line":1028,"column":21,"nodeType":"2225","messageId":"2226","endLine":1029,"endColumn":1,"fix":"2474"},{"ruleId":"2223","severity":2,"message":"2224","line":1074,"column":32,"nodeType":"2225","messageId":"2226","endLine":1075,"endColumn":1,"fix":"2475"},{"ruleId":"2223","severity":2,"message":"2224","line":1129,"column":22,"nodeType":"2225","messageId":"2226","endLine":1130,"endColumn":1,"fix":"2476"},{"ruleId":"2223","severity":2,"message":"2224","line":1171,"column":92,"nodeType":"2225","messageId":"2226","endLine":1172,"endColumn":1,"fix":"2477"},{"ruleId":"2223","severity":2,"message":"2224","line":1191,"column":25,"nodeType":"2225","messageId":"2226","endLine":1192,"endColumn":1,"fix":"2478"},{"ruleId":"2223","severity":2,"message":"2224","line":1197,"column":89,"nodeType":"2225","messageId":"2226","endLine":1198,"endColumn":1,"fix":"2479"},{"ruleId":"2223","severity":2,"message":"2224","line":1210,"column":62,"nodeType":"2225","messageId":"2226","endLine":1211,"endColumn":1,"fix":"2480"},{"ruleId":"2223","severity":2,"message":"2224","line":1216,"column":65,"nodeType":"2225","messageId":"2226","endLine":1217,"endColumn":1,"fix":"2481"},{"ruleId":"2223","severity":2,"message":"2224","line":1242,"column":54,"nodeType":"2225","messageId":"2226","endLine":1243,"endColumn":1,"fix":"2482"},{"ruleId":"2223","severity":2,"message":"2224","line":1252,"column":82,"nodeType":"2225","messageId":"2226","endLine":1253,"endColumn":1,"fix":"2483"},{"ruleId":"2223","severity":2,"message":"2224","line":1279,"column":58,"nodeType":"2225","messageId":"2226","endLine":1280,"endColumn":1,"fix":"2484"},{"ruleId":"2223","severity":2,"message":"2224","line":1289,"column":65,"nodeType":"2225","messageId":"2226","endLine":1290,"endColumn":1,"fix":"2485"},{"ruleId":"2223","severity":2,"message":"2224","line":1315,"column":75,"nodeType":"2225","messageId":"2226","endLine":1316,"endColumn":1,"fix":"2486"},{"ruleId":"2223","severity":2,"message":"2224","line":1338,"column":66,"nodeType":"2225","messageId":"2226","endLine":1339,"endColumn":1,"fix":"2487"},{"ruleId":"2223","severity":2,"message":"2224","line":1372,"column":66,"nodeType":"2225","messageId":"2226","endLine":1373,"endColumn":1,"fix":"2488"},{"ruleId":"2223","severity":2,"message":"2224","line":1384,"column":49,"nodeType":"2225","messageId":"2226","endLine":1385,"endColumn":1,"fix":"2489"},{"ruleId":"2223","severity":2,"message":"2224","line":1390,"column":71,"nodeType":"2225","messageId":"2226","endLine":1391,"endColumn":1,"fix":"2490"},{"ruleId":"2223","severity":2,"message":"2224","line":1450,"column":71,"nodeType":"2225","messageId":"2226","endLine":1451,"endColumn":1,"fix":"2491"},{"ruleId":"2223","severity":2,"message":"2224","line":1474,"column":46,"nodeType":"2225","messageId":"2226","endLine":1475,"endColumn":1,"fix":"2492"},{"ruleId":"2223","severity":2,"message":"2224","line":1483,"column":76,"nodeType":"2225","messageId":"2226","endLine":1484,"endColumn":1,"fix":"2493"},{"ruleId":"2223","severity":2,"message":"2224","line":1499,"column":67,"nodeType":"2225","messageId":"2226","endLine":1500,"endColumn":1,"fix":"2494"},{"ruleId":"2223","severity":2,"message":"2224","line":1514,"column":59,"nodeType":"2225","messageId":"2226","endLine":1515,"endColumn":1,"fix":"2495"},{"ruleId":"2223","severity":2,"message":"2224","line":1525,"column":52,"nodeType":"2225","messageId":"2226","endLine":1526,"endColumn":1,"fix":"2496"},{"ruleId":"2223","severity":2,"message":"2224","line":1534,"column":67,"nodeType":"2225","messageId":"2226","endLine":1535,"endColumn":1,"fix":"2497"},{"ruleId":"2223","severity":2,"message":"2224","line":1566,"column":65,"nodeType":"2225","messageId":"2226","endLine":1567,"endColumn":1,"fix":"2498"},{"ruleId":"2223","severity":2,"message":"2224","line":1587,"column":78,"nodeType":"2225","messageId":"2226","endLine":1588,"endColumn":1,"fix":"2499"},{"ruleId":"2223","severity":2,"message":"2224","line":1595,"column":76,"nodeType":"2225","messageId":"2226","endLine":1596,"endColumn":1,"fix":"2500"},{"ruleId":"2223","severity":2,"message":"2224","line":1616,"column":70,"nodeType":"2225","messageId":"2226","endLine":1617,"endColumn":1,"fix":"2501"},{"ruleId":"2223","severity":2,"message":"2224","line":1631,"column":63,"nodeType":"2225","messageId":"2226","endLine":1632,"endColumn":1,"fix":"2502"},{"ruleId":"2223","severity":2,"message":"2224","line":1638,"column":45,"nodeType":"2225","messageId":"2226","endLine":1639,"endColumn":1,"fix":"2503"},{"ruleId":"2223","severity":2,"message":"2224","line":1644,"column":70,"nodeType":"2225","messageId":"2226","endLine":1645,"endColumn":1,"fix":"2504"},{"ruleId":"2223","severity":2,"message":"2224","line":1651,"column":45,"nodeType":"2225","messageId":"2226","endLine":1652,"endColumn":1,"fix":"2505"},{"ruleId":"2223","severity":2,"message":"2224","line":1657,"column":58,"nodeType":"2225","messageId":"2226","endLine":1658,"endColumn":1,"fix":"2506"},{"ruleId":"2223","severity":2,"message":"2224","line":1664,"column":51,"nodeType":"2225","messageId":"2226","endLine":1665,"endColumn":1,"fix":"2507"},{"ruleId":"2223","severity":2,"message":"2224","line":27,"column":42,"nodeType":"2225","messageId":"2226","endLine":28,"endColumn":1,"fix":"2508"},{"ruleId":"2223","severity":2,"message":"2224","line":27,"column":74,"nodeType":"2233","messageId":"2226","endLine":28,"endColumn":1,"fix":"2509"},{"ruleId":"2223","severity":2,"message":"2224","line":30,"column":3,"nodeType":"2233","messageId":"2226","endLine":31,"endColumn":1,"fix":"2510"},{"ruleId":"2223","severity":2,"message":"2224","line":13,"column":22,"nodeType":"2225","messageId":"2226","endLine":14,"endColumn":1,"fix":"2511"},{"ruleId":"2223","severity":2,"message":"2224","line":35,"column":18,"nodeType":"2225","messageId":"2226","endLine":36,"endColumn":1,"fix":"2512"},{"ruleId":"2223","severity":2,"message":"2224","line":40,"column":69,"nodeType":"2233","messageId":"2226","endLine":41,"endColumn":1,"fix":"2513"},{"ruleId":"2223","severity":2,"message":"2224","line":69,"column":22,"nodeType":"2225","messageId":"2226","endLine":70,"endColumn":1,"fix":"2514"},{"ruleId":"2223","severity":2,"message":"2224","line":76,"column":22,"nodeType":"2225","messageId":"2226","endLine":77,"endColumn":1,"fix":"2515"},{"ruleId":"2223","severity":2,"message":"2224","line":85,"column":42,"nodeType":"2225","messageId":"2226","endLine":86,"endColumn":1,"fix":"2516"},{"ruleId":"2223","severity":2,"message":"2224","line":100,"column":24,"nodeType":"2225","messageId":"2226","endLine":101,"endColumn":1,"fix":"2517"},{"ruleId":"2223","severity":2,"message":"2224","line":110,"column":21,"nodeType":"2225","messageId":"2226","endLine":111,"endColumn":1,"fix":"2518"},{"ruleId":"2223","severity":2,"message":"2224","line":120,"column":15,"nodeType":"2225","messageId":"2226","endLine":121,"endColumn":1,"fix":"2519"},{"ruleId":"2223","severity":2,"message":"2224","line":146,"column":23,"nodeType":"2225","messageId":"2226","endLine":147,"endColumn":1,"fix":"2520"},{"ruleId":"2223","severity":2,"message":"2224","line":170,"column":21,"nodeType":"2225","messageId":"2226","endLine":171,"endColumn":1,"fix":"2521"},{"ruleId":"2223","severity":2,"message":"2224","line":198,"column":44,"nodeType":"2225","messageId":"2226","endLine":199,"endColumn":1,"fix":"2522"},{"ruleId":"2223","severity":2,"message":"2224","line":213,"column":54,"nodeType":"2523","messageId":"2226","endLine":214,"endColumn":1,"fix":"2524"},{"ruleId":"2223","severity":2,"message":"2224","line":271,"column":69,"nodeType":"2225","messageId":"2226","endLine":272,"endColumn":1,"fix":"2525"},{"ruleId":"2223","severity":2,"message":"2224","line":288,"column":21,"nodeType":"2225","messageId":"2226","endLine":289,"endColumn":1,"fix":"2526"},{"ruleId":"2223","severity":2,"message":"2224","line":296,"column":21,"nodeType":"2225","messageId":"2226","endLine":297,"endColumn":1,"fix":"2527"},{"ruleId":"2223","severity":2,"message":"2224","line":303,"column":68,"nodeType":"2225","messageId":"2226","endLine":304,"endColumn":1,"fix":"2528"},{"ruleId":"2223","severity":2,"message":"2224","line":316,"column":20,"nodeType":"2225","messageId":"2226","endLine":317,"endColumn":1,"fix":"2529"},{"ruleId":"2223","severity":2,"message":"2224","line":326,"column":20,"nodeType":"2225","messageId":"2226","endLine":327,"endColumn":1,"fix":"2530"},{"ruleId":"2223","severity":2,"message":"2224","line":352,"column":30,"nodeType":"2225","messageId":"2226","endLine":353,"endColumn":1,"fix":"2531"},{"ruleId":"2223","severity":2,"message":"2224","line":392,"column":28,"nodeType":"2225","messageId":"2226","endLine":393,"endColumn":1,"fix":"2532"},{"ruleId":"2223","severity":2,"message":"2224","line":404,"column":26,"nodeType":"2304","messageId":"2226","endLine":405,"endColumn":1,"fix":"2533"},{"ruleId":"2223","severity":2,"message":"2224","line":412,"column":20,"nodeType":"2225","messageId":"2226","endLine":413,"endColumn":1,"fix":"2534"},{"ruleId":"2223","severity":2,"message":"2224","line":47,"column":3,"nodeType":"2233","messageId":"2226","endLine":48,"endColumn":1,"fix":"2535"},{"ruleId":"2229","severity":2,"message":"2355","line":20,"column":16,"nodeType":"2225","messageId":"2231","endLine":20,"endColumn":19,"fix":"2536"},{"ruleId":"2223","severity":2,"message":"2537","line":15,"column":39,"nodeType":"2538","messageId":"2539","endLine":15,"endColumn":40,"fix":"2540"},{"ruleId":"2223","severity":2,"message":"2224","line":22,"column":16,"nodeType":"2225","messageId":"2226","endLine":23,"endColumn":1,"fix":"2541"},{"ruleId":"2223","severity":2,"message":"2224","line":49,"column":8,"nodeType":"2272","messageId":"2226","endLine":50,"endColumn":1,"fix":"2542"},{"ruleId":"2223","severity":2,"message":"2224","line":186,"column":3,"nodeType":"2233","messageId":"2226","endLine":187,"endColumn":1,"fix":"2543"},{"ruleId":"2223","severity":2,"message":"2224","line":60,"column":7,"nodeType":"2233","messageId":"2226","endLine":61,"endColumn":1,"fix":"2544"},{"ruleId":"2243","severity":2,"message":"2545","line":17,"column":10,"nodeType":"2225","messageId":"2245","endLine":17,"endColumn":20},{"ruleId":"2243","severity":2,"message":"2546","line":17,"column":22,"nodeType":"2225","messageId":"2245","endLine":17,"endColumn":34},{"ruleId":"2243","severity":2,"message":"2547","line":17,"column":36,"nodeType":"2225","messageId":"2245","endLine":17,"endColumn":44},{"ruleId":"2243","severity":2,"message":"2548","line":17,"column":46,"nodeType":"2225","messageId":"2245","endLine":17,"endColumn":56},{"ruleId":"2243","severity":2,"message":"2549","line":17,"column":58,"nodeType":"2225","messageId":"2245","endLine":17,"endColumn":69},{"ruleId":"2243","severity":2,"message":"2550","line":17,"column":71,"nodeType":"2225","messageId":"2245","endLine":17,"endColumn":81},{"ruleId":"2243","severity":2,"message":"2551","line":21,"column":10,"nodeType":"2225","messageId":"2245","endLine":21,"endColumn":19},{"ruleId":"2243","severity":2,"message":"2552","line":24,"column":10,"nodeType":"2225","messageId":"2245","endLine":24,"endColumn":25},{"ruleId":"2243","severity":2,"message":"2553","line":24,"column":27,"nodeType":"2225","messageId":"2245","endLine":24,"endColumn":44},{"ruleId":"2243","severity":2,"message":"2554","line":24,"column":46,"nodeType":"2225","messageId":"2245","endLine":24,"endColumn":63},{"ruleId":"2243","severity":2,"message":"2555","line":62,"column":5,"nodeType":"2225","messageId":"2245","endLine":62,"endColumn":20},{"ruleId":"2223","severity":2,"message":"2224","line":77,"column":24,"nodeType":"2225","messageId":"2226","endLine":78,"endColumn":1,"fix":"2556"},{"ruleId":"2223","severity":2,"message":"2224","line":160,"column":7,"nodeType":"2233","messageId":"2226","endLine":161,"endColumn":1,"fix":"2557"},{"ruleId":"2223","severity":2,"message":"2224","line":108,"column":25,"nodeType":"2233","messageId":"2226","endLine":109,"endColumn":1,"fix":"2558"},{"ruleId":"2223","severity":2,"message":"2224","line":26,"column":5,"nodeType":"2233","messageId":"2226","endLine":27,"endColumn":1,"fix":"2559"},{"ruleId":"2223","severity":2,"message":"2224","line":19,"column":25,"nodeType":"2225","messageId":"2226","endLine":20,"endColumn":1,"fix":"2560"},{"ruleId":"2223","severity":2,"message":"2224","line":32,"column":26,"nodeType":"2225","messageId":"2226","endLine":33,"endColumn":1,"fix":"2561"},{"ruleId":"2223","severity":2,"message":"2224","line":69,"column":26,"nodeType":"2225","messageId":"2226","endLine":70,"endColumn":1,"fix":"2562"},{"ruleId":"2223","severity":2,"message":"2224","line":21,"column":94,"nodeType":"2233","messageId":"2226","endLine":22,"endColumn":1,"fix":"2563"},{"ruleId":"2223","severity":2,"message":"2224","line":46,"column":47,"nodeType":"2272","messageId":"2226","endLine":47,"endColumn":1,"fix":"2564"},{"ruleId":"2223","severity":2,"message":"2224","line":63,"column":47,"nodeType":"2272","messageId":"2226","endLine":64,"endColumn":1,"fix":"2565"},{"ruleId":"2223","severity":2,"message":"2224","line":82,"column":49,"nodeType":"2272","messageId":"2226","endLine":83,"endColumn":1,"fix":"2566"},{"ruleId":"2223","severity":2,"message":"2224","line":67,"column":51,"nodeType":"2272","messageId":"2226","endLine":68,"endColumn":1,"fix":"2567"},{"ruleId":"2223","severity":2,"message":"2224","line":26,"column":2,"nodeType":"2323","messageId":"2226","endLine":27,"endColumn":1,"fix":"2568"},{"ruleId":"2223","severity":2,"message":"2224","line":39,"column":16,"nodeType":"2233","messageId":"2226","endLine":40,"endColumn":1,"fix":"2569"},{"ruleId":"2223","severity":2,"message":"2224","line":26,"column":39,"nodeType":"2225","messageId":"2226","endLine":27,"endColumn":1,"fix":"2570"},{"ruleId":"2223","severity":2,"message":"2224","line":57,"column":21,"nodeType":"2225","messageId":"2226","endLine":58,"endColumn":1,"fix":"2571"},{"ruleId":"2223","severity":2,"message":"2224","line":68,"column":85,"nodeType":"2233","messageId":"2226","endLine":69,"endColumn":1,"fix":"2572"},{"ruleId":"2223","severity":2,"message":"2224","line":83,"column":24,"nodeType":"2233","messageId":"2226","endLine":84,"endColumn":1,"fix":"2573"},{"ruleId":"2223","severity":2,"message":"2224","line":88,"column":83,"nodeType":"2233","messageId":"2226","endLine":89,"endColumn":1,"fix":"2574"},{"ruleId":"2223","severity":2,"message":"2224","line":105,"column":45,"nodeType":"2225","messageId":"2226","endLine":106,"endColumn":1,"fix":"2575"},{"ruleId":"2223","severity":2,"message":"2224","line":7,"column":56,"nodeType":"2272","messageId":"2226","endLine":8,"endColumn":1,"fix":"2576"},{"ruleId":"2577","severity":2,"message":"2578","line":66,"column":15,"nodeType":"2579","messageId":"2580","endLine":66,"endColumn":39},{"ruleId":"2223","severity":2,"message":"2224","line":110,"column":5,"nodeType":"2233","messageId":"2226","endLine":111,"endColumn":1,"fix":"2581"},{"ruleId":"2223","severity":2,"message":"2224","line":46,"column":38,"nodeType":"2225","messageId":"2226","endLine":47,"endColumn":1,"fix":"2582"},{"ruleId":"2223","severity":2,"message":"2224","line":58,"column":25,"nodeType":"2225","messageId":"2226","endLine":59,"endColumn":1,"fix":"2583"},{"ruleId":"2223","severity":2,"message":"2224","line":78,"column":51,"nodeType":"2225","messageId":"2226","endLine":79,"endColumn":1,"fix":"2584"},{"ruleId":"2223","severity":2,"message":"2224","line":89,"column":39,"nodeType":"2225","messageId":"2226","endLine":90,"endColumn":1,"fix":"2585"},{"ruleId":"2223","severity":2,"message":"2224","line":145,"column":19,"nodeType":"2225","messageId":"2226","endLine":146,"endColumn":1,"fix":"2586"},{"ruleId":"2223","severity":2,"message":"2224","line":161,"column":19,"nodeType":"2225","messageId":"2226","endLine":162,"endColumn":1,"fix":"2587"},{"ruleId":"2223","severity":2,"message":"2224","line":39,"column":26,"nodeType":"2225","messageId":"2226","endLine":40,"endColumn":1,"fix":"2588"},{"ruleId":"2223","severity":2,"message":"2224","line":26,"column":31,"nodeType":"2225","messageId":"2226","endLine":27,"endColumn":1,"fix":"2589"},{"ruleId":"2243","severity":2,"message":"2590","line":76,"column":9,"nodeType":"2225","messageId":"2245","endLine":76,"endColumn":41},{"ruleId":"2223","severity":2,"message":"2224","line":7,"column":21,"nodeType":"2225","messageId":"2226","endLine":8,"endColumn":1,"fix":"2591"},{"ruleId":"2223","severity":2,"message":"2224","line":30,"column":47,"nodeType":"2225","messageId":"2226","endLine":31,"endColumn":1,"fix":"2592"},{"ruleId":"2223","severity":2,"message":"2224","line":34,"column":57,"nodeType":"2233","messageId":"2226","endLine":35,"endColumn":1,"fix":"2593"},{"ruleId":"2223","severity":2,"message":"2224","line":169,"column":91,"nodeType":"2323","messageId":"2226","endLine":170,"endColumn":1,"fix":"2594"},{"ruleId":"2223","severity":2,"message":"2224","line":54,"column":28,"nodeType":"2225","messageId":"2226","endLine":55,"endColumn":1,"fix":"2595"},{"ruleId":"2223","severity":2,"message":"2537","line":94,"column":100,"nodeType":"2261","messageId":"2539","endLine":94,"endColumn":101,"fix":"2596"},{"ruleId":"2223","severity":2,"message":"2224","line":121,"column":29,"nodeType":"2225","messageId":"2226","endLine":122,"endColumn":1,"fix":"2597"},{"ruleId":"2223","severity":2,"message":"2224","line":158,"column":24,"nodeType":"2225","messageId":"2226","endLine":159,"endColumn":1,"fix":"2598"},{"ruleId":"2223","severity":2,"message":"2224","line":275,"column":10,"nodeType":"2272","messageId":"2226","endLine":276,"endColumn":1,"fix":"2599"},{"ruleId":"2223","severity":2,"message":"2224","line":310,"column":17,"nodeType":"2225","messageId":"2226","endLine":311,"endColumn":1,"fix":"2600"},{"ruleId":"2223","severity":2,"message":"2224","line":30,"column":3,"nodeType":"2233","messageId":"2226","endLine":31,"endColumn":1,"fix":"2601"},{"ruleId":"2223","severity":2,"message":"2224","line":45,"column":21,"nodeType":"2225","messageId":"2226","endLine":46,"endColumn":1,"fix":"2602"},{"ruleId":"2223","severity":2,"message":"2224","line":50,"column":21,"nodeType":"2225","messageId":"2226","endLine":51,"endColumn":1,"fix":"2603"},{"ruleId":"2223","severity":2,"message":"2224","line":7,"column":59,"nodeType":"2304","messageId":"2226","endLine":8,"endColumn":1,"fix":"2604"},{"ruleId":"2223","severity":2,"message":"2224","line":12,"column":42,"nodeType":"2225","messageId":"2226","endLine":13,"endColumn":1,"fix":"2605"},{"ruleId":"2223","severity":2,"message":"2224","line":26,"column":41,"nodeType":"2225","messageId":"2226","endLine":27,"endColumn":1,"fix":"2606"},"unicorn/prefer-exponentiation-operator",["2607"],"unicorn/regex-shorthand",["2608"],"comma-dangle","Missing trailing comma.","Identifier","missing",{"range":"2609","text":"2610"},{"range":"2611","text":"2610"},"unicorn/catch-error-name","The catch parameter `_err` should be named `error_`.","error",{"range":"2612","text":"2613"},"ArrowFunctionExpression",{"range":"2614","text":"2610"},"The catch parameter `err` should be named `error_`.",{"range":"2615","text":"2616"},{"range":"2617","text":"2610"},{"range":"2618","text":"2610"},{"range":"2619","text":"2610"},"AssignmentPattern",{"range":"2620","text":"2610"},{"range":"2621","text":"2610"},"@typescript-eslint/no-unused-vars","'PrimaryButton' is defined but never used. Allowed unused vars must match /^_/u.","unusedVar","'ButtonState' is defined but never used. Allowed unused vars must match /^_/u.","'CreateAnswerDto' is defined but never used. Allowed unused vars must match /^_/u.","'createGame' is defined but never used. Allowed unused vars must match /^_/u.","'CreateGameDto' is defined but never used. Allowed unused vars must match /^_/u.","'CreateQuestionDto' is defined but never used. Allowed unused vars must match /^_/u.","'QuizFormAnswersSectionProps' is defined but never used. Allowed unused vars must match /^_/u.","'QuestionsState' is defined but never used. Allowed unused vars must match /^_/u.","@typescript-eslint/explicit-function-return-type","Missing return type on function.","missingReturnType",{"range":"2622","text":"2610"},"CallExpression",{"range":"2623","text":"2610"},{"range":"2624","text":"2610"},{"range":"2625","text":"2610"},"MemberExpression",{"range":"2626","text":"2610"},{"range":"2627","text":"2610"},{"range":"2628","text":"2610"},{"range":"2629","text":"2610"},{"range":"2630","text":"2610"},{"range":"2631","text":"2610"},"@typescript-eslint/consistent-type-assertions","Use '<string>' instead of 'as string'.","TSAsExpression","angle-bracket","ObjectExpression",{"range":"2632","text":"2610"},{"range":"2633","text":"2610"},{"range":"2634","text":"2610"},{"range":"2635","text":"2610"},{"range":"2636","text":"2610"},{"range":"2637","text":"2610"},{"range":"2638","text":"2610"},{"range":"2639","text":"2610"},{"range":"2640","text":"2610"},{"range":"2641","text":"2610"},"ConditionalExpression",{"range":"2642","text":"2610"},{"range":"2643","text":"2610"},{"range":"2644","text":"2610"},"TemplateLiteral",{"range":"2645","text":"2610"},{"range":"2646","text":"2610"},{"range":"2647","text":"2610"},"'GroupCountersWithPaginationMeta' is defined but never used. Allowed unused vars must match /^_/u.","'unwrapResult' is defined but never used. Allowed unused vars must match /^_/u.","'KeyValueObject' is defined but never used. Allowed unused vars must match /^_/u.",{"range":"2648","text":"2610"},{"range":"2649","text":"2610"},{"range":"2650","text":"2610"},{"range":"2651","text":"2610"},{"range":"2652","text":"2610"},{"range":"2653","text":"2610"},{"range":"2654","text":"2610"},{"range":"2655","text":"2610"},{"range":"2656","text":"2610"},{"range":"2657","text":"2610"},"ObjectPattern",{"range":"2658","text":"2610"},{"range":"2659","text":"2610"},{"range":"2660","text":"2610"},{"range":"2661","text":"2610"},{"range":"2662","text":"2610"},{"range":"2663","text":"2610"},{"range":"2664","text":"2610"},{"range":"2665","text":"2610"},{"range":"2666","text":"2610"},{"range":"2667","text":"2610"},{"range":"2668","text":"2610"},{"range":"2669","text":"2610"},{"range":"2670","text":"2610"},{"range":"2671","text":"2610"},{"range":"2672","text":"2610"},{"range":"2673","text":"2610"},{"range":"2674","text":"2610"},{"range":"2675","text":"2610"},"ArrayExpression",{"range":"2676","text":"2610"},{"range":"2677","text":"2610"},{"range":"2678","text":"2610"},{"range":"2679","text":"2610"},{"range":"2680","text":"2610"},{"range":"2681","text":"2610"},{"range":"2682","text":"2610"},{"range":"2683","text":"2610"},{"range":"2684","text":"2610"},{"range":"2685","text":"2610"},{"range":"2686","text":"2610"},{"range":"2687","text":"2610"},{"range":"2688","text":"2610"},{"range":"2689","text":"2610"},{"range":"2690","text":"2610"},{"range":"2691","text":"2610"},{"range":"2692","text":"2610"},{"range":"2693","text":"2610"},{"range":"2694","text":"2610"},{"range":"2695","text":"2610"},{"range":"2696","text":"2610"},{"range":"2697","text":"2610"},{"range":"2698","text":"2610"},{"range":"2699","text":"2610"},{"range":"2700","text":"2610"},{"range":"2701","text":"2610"},{"range":"2702","text":"2610"},{"range":"2703","text":"2610"},{"range":"2704","text":"2610"},{"range":"2705","text":"2610"},{"range":"2706","text":"2610"},"The catch parameter `err` should be named `error`.",{"range":"2707","text":"2708"},{"range":"2709","text":"2610"},{"range":"2710","text":"2610"},{"range":"2711","text":"2610"},{"range":"2712","text":"2713"},{"range":"2714","text":"2610"},{"range":"2715","text":"2610"},{"range":"2716","text":"2610"},{"range":"2717","text":"2610"},{"range":"2718","text":"2610"},{"range":"2719","text":"2610"},{"range":"2720","text":"2610"},{"range":"2721","text":"2610"},{"range":"2722","text":"2610"},{"range":"2723","text":"2610"},{"range":"2724","text":"2231"},{"range":"2725","text":"2610"},{"range":"2726","text":"2610"},{"range":"2727","text":"2610"},{"range":"2728","text":"2610"},{"range":"2729","text":"2610"},{"range":"2730","text":"2610"},{"range":"2731","text":"2610"},{"range":"2732","text":"2610"},{"range":"2733","text":"2610"},{"range":"2734","text":"2610"},{"range":"2735","text":"2610"},{"range":"2736","text":"2610"},{"range":"2737","text":"2610"},{"range":"2738","text":"2610"},{"range":"2739","text":"2610"},{"range":"2740","text":"2610"},{"range":"2741","text":"2610"},{"range":"2742","text":"2610"},{"range":"2743","text":"2610"},{"range":"2744","text":"2610"},{"range":"2745","text":"2610"},{"range":"2746","text":"2610"},{"range":"2747","text":"2610"},{"range":"2748","text":"2610"},{"range":"2749","text":"2610"},{"range":"2750","text":"2610"},{"range":"2751","text":"2610"},{"range":"2752","text":"2610"},{"range":"2753","text":"2610"},{"range":"2754","text":"2610"},{"range":"2755","text":"2610"},{"range":"2756","text":"2610"},{"range":"2757","text":"2610"},{"range":"2758","text":"2610"},{"range":"2759","text":"2610"},{"range":"2760","text":"2610"},{"range":"2761","text":"2610"},{"range":"2762","text":"2610"},{"range":"2763","text":"2610"},"TSTypeAssertion",{"range":"2764","text":"2610"},{"range":"2765","text":"2231"},{"range":"2766","text":"2231"},{"range":"2767","text":"2610"},{"range":"2768","text":"2610"},{"range":"2769","text":"2610"},{"range":"2770","text":"2610"},{"range":"2771","text":"2610"},{"range":"2772","text":"2610"},{"range":"2773","text":"2610"},{"range":"2774","text":"2610"},{"range":"2775","text":"2610"},{"range":"2776","text":"2610"},{"range":"2777","text":"2610"},{"range":"2778","text":"2610"},{"range":"2779","text":"2610"},{"range":"2780","text":"2610"},{"range":"2781","text":"2610"},{"range":"2782","text":"2610"},{"range":"2783","text":"2610"},{"range":"2784","text":"2610"},{"range":"2785","text":"2610"},{"range":"2786","text":"2610"},{"range":"2787","text":"2610"},{"range":"2788","text":"2610"},{"range":"2789","text":"2610"},{"range":"2790","text":"2610"},{"range":"2791","text":"2610"},{"range":"2792","text":"2610"},{"range":"2793","text":"2610"},{"range":"2794","text":"2610"},{"range":"2795","text":"2610"},{"range":"2796","text":"2610"},{"range":"2797","text":"2610"},{"range":"2798","text":"2610"},{"range":"2799","text":"2610"},{"range":"2800","text":"2610"},{"range":"2801","text":"2610"},{"range":"2802","text":"2610"},{"range":"2803","text":"2610"},{"range":"2804","text":"2610"},{"range":"2805","text":"2610"},{"range":"2806","text":"2610"},{"range":"2807","text":"2610"},{"range":"2808","text":"2610"},{"range":"2809","text":"2610"},{"range":"2810","text":"2610"},{"range":"2811","text":"2610"},{"range":"2812","text":"2610"},{"range":"2813","text":"2610"},{"range":"2814","text":"2610"},{"range":"2815","text":"2610"},{"range":"2816","text":"2610"},{"range":"2817","text":"2610"},{"range":"2818","text":"2610"},{"range":"2819","text":"2610"},{"range":"2820","text":"2610"},{"range":"2821","text":"2610"},{"range":"2822","text":"2610"},{"range":"2823","text":"2610"},{"range":"2824","text":"2610"},{"range":"2825","text":"2610"},{"range":"2826","text":"2610"},{"range":"2827","text":"2610"},{"range":"2828","text":"2610"},{"range":"2829","text":"2610"},{"range":"2830","text":"2610"},{"range":"2831","text":"2610"},{"range":"2832","text":"2610"},{"range":"2833","text":"2610"},{"range":"2834","text":"2610"},{"range":"2835","text":"2610"},{"range":"2836","text":"2610"},{"range":"2837","text":"2610"},{"range":"2838","text":"2610"},{"range":"2839","text":"2610"},{"range":"2840","text":"2610"},{"range":"2841","text":"2610"},{"range":"2842","text":"2610"},{"range":"2843","text":"2610"},{"range":"2844","text":"2610"},{"range":"2845","text":"2610"},{"range":"2846","text":"2610"},{"range":"2847","text":"2610"},{"range":"2848","text":"2610"},{"range":"2849","text":"2610"},{"range":"2850","text":"2610"},{"range":"2851","text":"2610"},{"range":"2852","text":"2610"},{"range":"2853","text":"2610"},{"range":"2854","text":"2610"},{"range":"2855","text":"2610"},{"range":"2856","text":"2610"},{"range":"2857","text":"2610"},{"range":"2858","text":"2610"},{"range":"2859","text":"2610"},{"range":"2860","text":"2610"},{"range":"2861","text":"2610"},{"range":"2862","text":"2610"},{"range":"2863","text":"2610"},{"range":"2864","text":"2610"},{"range":"2865","text":"2610"},{"range":"2866","text":"2610"},{"range":"2867","text":"2610"},{"range":"2868","text":"2610"},{"range":"2869","text":"2610"},{"range":"2870","text":"2610"},{"range":"2871","text":"2610"},{"range":"2872","text":"2610"},{"range":"2873","text":"2610"},{"range":"2874","text":"2610"},"NewExpression",{"range":"2875","text":"2610"},{"range":"2876","text":"2610"},{"range":"2877","text":"2610"},{"range":"2878","text":"2610"},{"range":"2879","text":"2610"},{"range":"2880","text":"2610"},{"range":"2881","text":"2610"},{"range":"2882","text":"2610"},{"range":"2883","text":"2610"},{"range":"2884","text":"2610"},{"range":"2885","text":"2610"},{"range":"2886","text":"2610"},{"range":"2887","text":"2231"},"Unexpected trailing comma.","Literal","unexpected",{"range":"2888","text":"2889"},{"range":"2890","text":"2610"},{"range":"2891","text":"2610"},{"range":"2892","text":"2610"},{"range":"2893","text":"2610"},"'getAppIcon' is defined but never used. Allowed unused vars must match /^_/u.","'messagesIcon' is defined but never used. Allowed unused vars must match /^_/u.","'moreIcon' is defined but never used. Allowed unused vars must match /^_/u.","'peopleIcon' is defined but never used. Allowed unused vars must match /^_/u.","'profileIcon' is defined but never used. Allowed unused vars must match /^_/u.","'groupsIcon' is defined but never used. Allowed unused vars must match /^_/u.","'getString' is defined but never used. Allowed unused vars must match /^_/u.","'BASE_GROUPS_URL' is defined but never used. Allowed unused vars must match /^_/u.","'BASE_MESSAGES_URL' is defined but never used. Allowed unused vars must match /^_/u.","'BASE_CONTACTS_URL' is defined but never used. Allowed unused vars must match /^_/u.","'openMoreOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.",{"range":"2894","text":"2610"},{"range":"2895","text":"2610"},{"range":"2896","text":"2610"},{"range":"2897","text":"2610"},{"range":"2898","text":"2610"},{"range":"2899","text":"2610"},{"range":"2900","text":"2610"},{"range":"2901","text":"2610"},{"range":"2902","text":"2610"},{"range":"2903","text":"2610"},{"range":"2904","text":"2610"},{"range":"2905","text":"2610"},{"range":"2906","text":"2610"},{"range":"2907","text":"2610"},{"range":"2908","text":"2610"},{"range":"2909","text":"2610"},{"range":"2910","text":"2610"},{"range":"2911","text":"2610"},{"range":"2912","text":"2610"},{"range":"2913","text":"2610"},{"range":"2914","text":"2610"},"@typescript-eslint/no-unnecessary-condition","Unnecessary conditional, both sides of the expression are literal values","BinaryExpression","literalBooleanExpression",{"range":"2915","text":"2610"},{"range":"2916","text":"2610"},{"range":"2917","text":"2610"},{"range":"2918","text":"2610"},{"range":"2919","text":"2610"},{"range":"2920","text":"2610"},{"range":"2921","text":"2610"},{"range":"2922","text":"2610"},{"range":"2923","text":"2610"},"'messageCardType' is assigned a value but never used. Allowed unused vars must match /^_/u.",{"range":"2924","text":"2610"},{"range":"2925","text":"2610"},{"range":"2926","text":"2610"},{"range":"2927","text":"2610"},{"range":"2928","text":"2610"},{"range":"2929","text":"2889"},{"range":"2930","text":"2610"},{"range":"2931","text":"2610"},{"range":"2932","text":"2610"},{"range":"2933","text":"2610"},{"range":"2934","text":"2610"},{"range":"2935","text":"2610"},{"range":"2936","text":"2610"},{"range":"2937","text":"2610"},{"range":"2938","text":"2610"},{"range":"2939","text":"2610"},"prefer-exponentiation-operator","unicorn/better-regex",[628,628],",",[890,890],[2091,2100],"error_: any",[2134,2134],[2498,2550],"error_) {\n      processQueue(error_, null)\n      throw error_",[3068,3068],[1812,1812],[7049,7049],[8804,8804],[9238,9238],[2476,2476],[3247,3247],[4096,4096],[5098,5098],[8058,8058],[8217,8217],[3848,3848],[4361,4361],[5800,5800],[8859,8859],[6278,6278],[7024,7024],[1606,1606],[2257,2257],[3103,3103],[3326,3326],[3589,3589],[3867,3867],[4180,4180],[4755,4755],[2182,2182],[7992,7992],[13342,13342],[699,699],[3228,3228],[4987,4987],[1561,1561],[2105,2105],[2683,2683],[3873,3873],[3354,3354],[5378,5378],[6416,6416],[7095,7095],[7763,7763],[8117,8117],[8366,8366],[9474,9474],[9693,9693],[11179,11179],[11315,11315],[11463,11463],[11729,11729],[11737,11737],[11743,11743],[12005,12005],[12265,12265],[12366,12366],[15928,15928],[16132,16132],[16895,16895],[19372,19372],[19697,19697],[19995,19995],[1750,1750],[2217,2217],[2697,2697],[2853,2853],[726,726],[1726,1726],[1778,1778],[1265,1265],[1786,1786],[1089,1089],[1292,1292],[2018,2018],[2117,2117],[2739,2739],[1426,1426],[871,871],[1081,1081],[1226,1226],[1384,1384],[2504,2504],[3633,3633],[4127,4127],[1040,1040],[406,406],[531,531],[711,711],[1148,1148],[1359,1359],[1637,1637],[5703,5703],[816,816],[1203,1759],"error) {\n      const errorTitle: string = error.response?.data.error_code === CreateMeetingError.ERR_TOO_MANY_CALLS\n        ? getString('too-many-meetings-created-title')\n        : getString('create-meeting-failure-title')\n\n      const errorDescription: string = error.response?.data.error_code === CreateMeetingError.ERR_TOO_MANY_CALLS\n        ? getString('too-many-meetings-created-description')\n        : getString('something-went-wrong')\n\n      dispatch(setToastError({\n        title: errorTitle,\n        message: errorDescription,\n      }))\n\n      throw error",[1852,1852],[2067,2067],[2245,2245],[2527,2699],"error) {\n      dispatch(setToastError({\n        title: getString('join-meeting-failure-title'),\n        message: getString('something-went-wrong'),\n      }))\n\n      throw error",[2788,2788],[3053,3053],[3657,3657],[4111,4111],[4395,4395],[4839,4839],[2134,2134],[5290,5290],[1504,1504],[1225,1225],[3793,3796],[3919,3919],[4204,4204],[4186,4186],[4703,4703],[909,909],[1300,1300],[1760,1760],[2278,2278],[2176,2176],[3087,3087],[3842,3842],[4222,4222],[4483,4483],[4684,4684],[5482,5482],[5814,5814],[6021,6021],[7639,7639],[8227,8227],[10031,10031],[11948,11948],[13217,13217],[13870,13870],[14159,14159],[15054,15054],[15332,15332],[15550,15550],[15730,15730],[16003,16003],[16222,16222],[16424,16424],[16707,16707],[2142,2142],[656,656],[783,783],[925,925],[652,652],[779,779],[920,920],[4273,4273],[4596,4599],[4934,4937],[6154,6154],[10635,10635],[12329,12329],[12858,12858],[1277,1277],[1956,1956],[1506,1506],[2233,2233],[2974,2974],[4457,4457],[3370,3370],[1141,1141],[4166,4166],[5348,5348],[5474,5474],[5949,5949],[6162,6162],[6944,6944],[7088,7088],[7448,7448],[7805,7805],[7923,7923],[8353,8353],[8563,8563],[9023,9023],[9725,9725],[11130,11130],[11261,11261],[11975,11975],[12450,12450],[14281,14281],[14683,14683],[14921,14921],[15053,15053],[15550,15550],[15796,15796],[15945,15945],[16799,16799],[16950,16950],[18010,18010],[20428,20428],[21367,21367],[21482,21482],[22964,22964],[23028,23028],[23185,23185],[23526,23526],[24113,24113],[24274,24274],[24697,24697],[25914,25914],[26120,26120],[27147,27147],[27360,27360],[28435,28435],[28592,28592],[29596,29596],[29860,29860],[30271,30271],[31105,31105],[32785,32785],[34758,34758],[36525,36525],[37343,37343],[37567,37567],[38162,38162],[38370,38370],[39282,39282],[39737,39737],[40730,40730],[41165,41165],[42175,42175],[42945,42945],[44431,44431],[44910,44910],[45132,45132],[46859,46859],[47790,47790],[48131,48131],[48871,48871],[49534,49534],[49995,49995],[50352,50352],[51491,51491],[52379,52379],[52727,52727],[53527,53527],[54229,54229],[54547,54547],[54801,54801],[55103,55103],[55344,55344],[55636,55636],[886,886],[1047,1047],[633,633],[486,486],[1302,1302],[1610,1610],[2219,2219],[2409,2409],[2621,2621],[3011,3011],[3203,3203],[3416,3416],[4043,4043],[4564,4564],[5390,5390],[6039,6039],[7702,7702],[8216,8216],[8442,8442],[8676,8676],[8969,8969],[9207,9207],[9901,9901],[10938,10938],[11231,11231],[11455,11455],[1110,1110],[563,566],[755,756],"",[588,588],[1445,1445],[4066,4066],[1455,1455],[2214,2214],[3522,3522],[3764,3764],[710,710],[967,967],[1416,1416],[2860,2860],[1220,1220],[2168,2168],[2702,2702],[3278,3278],[2583,2583],[1108,1108],[1875,1875],[763,763],[1829,1829],[2311,2311],[2893,2893],[3065,3065],[3675,3675],[356,356],[2815,2815],[1580,1580],[1858,1858],[2529,2529],[3021,3021],[5418,5418],[5981,5981],[1138,1138],[1024,1024],[226,226],[1357,1357],[1311,1311],[5169,5169],[1545,1545],[3194,3195],[3982,3982],[5123,5123],[8750,8750],[9830,9830],[631,631],[1616,1616],[1757,1757],[447,447],[569,569],[946,946]]